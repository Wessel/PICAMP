#ifndef HCMS_ASCII_H
#define HCMS_ASCII_H

#define ASCII_TABLE_SIZE 106
// characters taken from "HCMS-29xx/HCMS-39xx LED Displays Character Set (ASCII and Katakana)"
// cherry picked and ordered by Burhan Topaloglu
// item 6 is for lookup.
const char HCMS_ascii[ASCII_TABLE_SIZE][6] = {
    // debug
    {0x00, 0x00, 0x00, 0x00, 0x00, ' '},  // 0 space/empty
    {0x2A, 0x55, 0x2A, 0x55, 0x2A, 0xD7}, // 1 checker, using the ascii for x cross

    // numbers
    {0x3E, 0x51, 0x49, 0x45, 0x3E, '0'}, // 2 0
    {0x00, 0x42, 0x7F, 0x40, 0x00, '1'}, // 3 1
    {0x62, 0x51, 0x49, 0x49, 0x46, '2'}, // 4 2
    {0x22, 0x41, 0x49, 0x49, 0x36, '3'}, // 5 3
    {0x18, 0x14, 0x12, 0x7F, 0x10, '4'}, // 6 4
    {0x27, 0x45, 0x45, 0x45, 0x39, '5'}, // 7 5
    {0x3C, 0x4A, 0x49, 0x49, 0x30, '6'}, // 8 6
    {0x01, 0x71, 0x09, 0x05, 0x03, '7'}, // 9 7
    {0x36, 0x49, 0x49, 0x49, 0x37, '8'}, // 10 8
    {0x06, 0x49, 0x49, 0x29, 0x1E, '9'}, // 11 9

    // lowercase letters
    {0x38, 0x44, 0x44, 0x3C, 0x40, 'a'}, // 12 a
    {0x7F, 0x48, 0x44, 0x44, 0x38, 'b'}, // 13 b
    {0x38, 0x44, 0x44, 0x44, 0x44, 'c'}, // 14 c
    {0x38, 0x44, 0x44, 0x48, 0x7F, 'd'}, // 15 d
    {0x38, 0x54, 0x54, 0x54, 0x08, 'e'}, // 16 e
    {0x08, 0x7E, 0x09, 0x02, 0x00, 'f'}, // 17 f
    {0x08, 0x14, 0x54, 0x54, 0x3C, 'g'}, // 18 g
    {0x7F, 0x08, 0x04, 0x04, 0x78, 'h'}, // 19 h
    {0x00, 0x44, 0x7D, 0x40, 0x00, 'i'}, // 20 i
    {0x20, 0x40, 0x44, 0x3D, 0x00, 'j'}, // 21 j
    {0x00, 0x7F, 0x10, 0x28, 0x44, 'k'}, // 22 k
    {0x00, 0x41, 0x7F, 0x40, 0x00, 'l'}, // 23 l
    {0x78, 0x04, 0x18, 0x04, 0x78, 'm'}, // 24 m
    {0x7C, 0x08, 0x04, 0x04, 0x78, 'n'}, // 25 n
    {0x38, 0x44, 0x44, 0x44, 0x38, 'o'}, // 26 o
    {0x7C, 0x14, 0x24, 0x24, 0x18, 'p'}, // 27 p
    {0x18, 0x24, 0x14, 0x7C, 0x40, 'q'}, // 28 q
    {0x00, 0x7C, 0x08, 0x04, 0x04, 'r'}, // 29 r
    {0x48, 0x54, 0x54, 0x54, 0x20, 's'}, // 30 s
    {0x04, 0x3E, 0x44, 0x20, 0x00, 't'}, // 31 t
    {0x3C, 0x40, 0x40, 0x20, 0x7C, 'u'}, // 32 u
    {0x1C, 0x20, 0x40, 0x20, 0x1C, 'v'}, // 33 v
    {0x3C, 0x40, 0x30, 0x40, 0x3C, 'w'}, // 34 w
    {0x44, 0x28, 0x10, 0x28, 0x44, 'x'}, // 35 x
    {0x04, 0x48, 0x30, 0x08, 0x04, 'y'}, // 36 y
    {0x44, 0x64, 0x54, 0x4C, 0x44, 'z'}, // 37 z

    // uppercase letters
    {0x7E, 0x09, 0x09, 0x09, 0x7E, 'A'}, // 38 A
    {0x7E, 0x49, 0x49, 0x49, 0x36, 'B'}, // 39 B
    {0x3E, 0x41, 0x41, 0x41, 0x22, 'C'}, // 40 C
    {0x7F, 0x41, 0x41, 0x41, 0x3E, 'D'}, // 41 D
    {0x7F, 0x49, 0x49, 0x49, 0x41, 'E'}, // 42 E
    {0x7F, 0x09, 0x09, 0x09, 0x01, 'F'}, // 43 F
    {0x3E, 0x41, 0x41, 0x51, 0x32, 'G'}, // 44 G
    {0x7F, 0x08, 0x08, 0x08, 0x7F, 'H'}, // 45 H
    {0x00, 0x41, 0x7F, 0x41, 0x00, 'I'}, // 46 I
    {0x20, 0x40, 0x40, 0x40, 0x3F, 'J'}, // 47 J
    {0x7F, 0x08, 0x14, 0x22, 0x41, 'K'}, // 48 K
    {0x7F, 0x40, 0x40, 0x40, 0x40, 'L'}, // 49 L
    {0x7F, 0x02, 0x0C, 0x02, 0x7F, 'M'}, // 50 M
    {0x7F, 0x04, 0x08, 0x10, 0x7F, 'N'}, // 51 N
    {0x3E, 0x41, 0x41, 0x41, 0x3E, 'O'}, // 52 O
    {0x7F, 0x09, 0x09, 0x09, 0x06, 'P'}, // 53 P
    {0x3E, 0x41, 0x51, 0x21, 0x5E, 'Q'}, // 54 Q
    {0x7F, 0x09, 0x19, 0x29, 0x46, 'R'}, // 55 R
    {0x26, 0x49, 0x49, 0x49, 0x32, 'S'}, // 56 S
    {0x01, 0x01, 0x7F, 0x01, 0x01, 'T'}, // 57 T
    {0x3F, 0x40, 0x40, 0x40, 0x3F, 'U'}, // 58 U
    {0x07, 0x18, 0x60, 0x18, 0x07, 'V'}, // 59 V
    {0x7F, 0x20, 0x18, 0x20, 0x7F, 'W'}, // 60 W
    {0x63, 0x14, 0x08, 0x14, 0x63, 'X'}, // 61 X
    {0x03, 0x04, 0x78, 0x04, 0x03, 'Y'}, // 62 Y
    {0x61, 0x51, 0x49, 0x45, 0x43, 'Z'}, // 63 Z

    // special letters/umlauts
    {0x78, 0x14, 0x15, 0x14, 0x78, 0xC5}, // 64 � capital A with circle on top
    {0x38, 0x44, 0x45, 0x3C, 0x40, 0xE5}, // 65 � lowercase a with circle on top
    {0x78, 0x15, 0x14, 0x15, 0x78, 0xC4}, // 66 � capital A with two dots on top
    {0x38, 0x45, 0x44, 0x3D, 0x40, 0xE4}, // 67 � lowercase a with two dots on top
    {0x3C, 0x43, 0x42, 0x43, 0x3C, 0xD6}, // 68 � capital O with two dots on top
    {0x38, 0x45, 0x44, 0x45, 0x38, 0xF6}, // 69 � lowercase o with two dots on top
    {0x3C, 0x41, 0x40, 0x41, 0x3C, 0xDC}, // 70 � capital U with two dots on top
    {0x38, 0x42, 0x40, 0x42, 0x38, 0xFC}, // 71 � lowercase u with two dots on top

    // special characters
    {0x00, 0x00, 0x5F, 0x00, 0x00, '!'},  // 72 !
    {0x00, 0x03, 0x00, 0x03, 0x00, '"'},  // 73 "
    {0x14, 0x7F, 0x14, 0x7F, 0x14, '#'},  // 74 #
    {0x24, 0x2A, 0x7F, 0x2A, 0x12, '$'},  // 75 $
    {0x23, 0x13, 0x08, 0x64, 0x62, '%'},  // 76 %
    {0x36, 0x49, 0x56, 0x20, 0x50, '&'},  // 77 &
    {0x00, 0x0B, 0x07, 0x00, 0x00, 0x27}, // 78 '
    {0x00, 0x00, 0x3E, 0x41, 0x00, '('},  // 79 (
    {0x00, 0x41, 0x3E, 0x00, 0x00, ')'},  // 80 )
    {0x08, 0x2A, 0x1C, 0x2A, 0x08, '*'},  // 81 *
    {0x08, 0x08, 0x3E, 0x08, 0x08, '+'},  // 82 +
    {0x00, 0x58, 0x38, 0x00, 0x00, ','},  // 83 ,
    {0x08, 0x08, 0x08, 0x08, 0x08, '-'},  // 84 -
    {0x00, 0x30, 0x30, 0x00, 0x00, '.'},  // 85 .
    {0x20, 0x10, 0x08, 0x04, 0x02, '/'},  // 86 forward slash
    {0x02, 0x04, 0x08, 0x10, 0x20, 0x5c}, // 87 backslash
    {0x00, 0x36, 0x36, 0x00, 0x00, ':'},  // 88 :
    {0x00, 0x5B, 0x3B, 0x00, 0x00, ';'},  // 89 ;
    {0x00, 0x08, 0x14, 0x22, 0x41, '<'},  // 90 <
    {0x14, 0x14, 0x14, 0x14, 0x14, '='},  // 91 =
    {0x41, 0x22, 0x14, 0x08, 0x00, '>'},  // 92 >
    {0x02, 0x01, 0x51, 0x09, 0x06, '?'},  // 93 ?
    {0x30, 0x35, 0x48, 0x40, 0x30, 0xBF}, // 94 � Inverted question mark
    {0x3E, 0x41, 0x5D, 0x55, 0x1E, '@'},  // 95 @
    {0x00, 0x00, 0x7F, 0x41, 0x41, '['},  // 96 [
    {0x41, 0x41, 0x7F, 0x00, 0x00, ']'},  // 97 ]
    {0x04, 0x02, 0x7F, 0x02, 0x04, '-'},  // 98 -
    {0x40, 0x40, 0x40, 0x40, 0x40, '_'},  // 99 _
    {0x00, 0x07, 0x0B, 0x00, 0x00, '`'},  // 100 `
    {0x00, 0x08, 0x36, 0x41, 0x00, '{'},  // 101 {
    {0x00, 0x00, 0x77, 0x00, 0x00, '|'},  // 102 |
    {0x00, 0x41, 0x36, 0x08, 0x00, '}'},  // 103 }
    {0x08, 0x04, 0x08, 0x10, 0x08, '~'},  // 104 ~

    // user defined or unusual desired characters
    {0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0xD8} // 105 filler - FULL
//    {0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0xD8}, // 106 filler - FULL
//    {0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0xD8}, // 107 filler - FULL
//    {0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0xD8}, // 108 filler - FULL
//    {0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0xD8}, // 109 filler - FULL
//    {0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0xD8}, // 110 filler - FULL
//    {0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0xD8}, // 111 filler - FULL
//    {0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0xD8}, // 112 filler - FULL
//    {0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0xD8}, // 113 filler - FULL
//    {0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0xD8}, // 114 filler - FULL
//    {0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0xD8}, // 115 filler - FULL
//    {0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0xD8}, // 116 filler - FULL
//    {0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0xD8}, // 117 filler - FULL
//    {0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0xD8}, // 118 filler - FULL
//    {0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0xD8}, // 119 filler - FULL
//    {0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0xD8}, // 120 filler - FULL
//    {0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0xD8}, // 121 filler - FULL
//    {0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0xD8}, // 122 filler - FULL
//    {0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0xD8}, // 123 filler - FULL
//    {0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0xD8}, // 124 filler - FULL
//    {0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0xD8}, // 125 filler - FULL
//    {0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0xD8}, // 126 filler - FULL
//    {0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0xD8}  // 127 FINAL - FULL Latin capital letter O with slash
};
// filler has been added to keep size static in the future, this script may be edited to add custom characters if desired
#endif