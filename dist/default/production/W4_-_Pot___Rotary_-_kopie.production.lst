

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Thu Nov 23 22:31:30 2023

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     5                           	psect	idataBANK1,global,class=CODE,delta=2,noexec
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,noexec
    11                           	psect	inittext,global,class=CODE,delta=2
    12                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    14                           	psect	maintext,global,class=CODE,split=1,delta=2
    15                           	psect	text1,local,class=CODE,merge=1,delta=2
    16                           	psect	text2,local,class=CODE,merge=1,delta=2
    17                           	psect	text3,local,class=CODE,merge=1,delta=2
    18                           	psect	text4,local,class=CODE,merge=1,delta=2,group=1
    19                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    20                           	psect	text6,local,class=CODE,merge=1,delta=2
    21                           	psect	text7,local,class=CODE,merge=1,delta=2
    22                           	psect	text8,local,class=CODE,merge=1,delta=2
    23                           	psect	text9,local,class=CODE,merge=1,delta=2
    24                           	psect	text10,local,class=CODE,merge=1,delta=2
    25                           	psect	text11,local,class=CODE,merge=1,delta=2
    26                           	psect	intentry,global,class=CODE,delta=2
    27                           	psect	text12,local,class=CODE,merge=1,delta=2
    28                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    29                           	dabs	1,0x7E,2
    30     0000                     
    31                           ; Generated 22/03/2023 GMT
    32                           ; 
    33                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    34                           ; All rights reserved.
    35                           ; 
    36                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    37                           ; 
    38                           ; Redistribution and use in source and binary forms, with or without modification, are
    39                           ; permitted provided that the following conditions are met:
    40                           ; 
    41                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    42                           ;        conditions and the following disclaimer.
    43                           ; 
    44                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    45                           ;        of conditions and the following disclaimer in the documentation and/or other
    46                           ;        materials provided with the distribution. Publication is not required when
    47                           ;        this file is used in an embedded application.
    48                           ; 
    49                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    50                           ;        software without specific prior written permission.
    51                           ; 
    52                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    53                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    54                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    55                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    56                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    57                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    58                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    59                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    60                           ; 
    61                           ; 
    62                           ; Code-generator required, PIC16F887 Definitions
    63                           ; 
    64                           ; SFR Addresses
    65     0000                     	;# 
    66     0001                     	;# 
    67     0002                     	;# 
    68     0003                     	;# 
    69     0004                     	;# 
    70     0005                     	;# 
    71     0006                     	;# 
    72     0007                     	;# 
    73     0008                     	;# 
    74     0009                     	;# 
    75     000A                     	;# 
    76     000B                     	;# 
    77     000C                     	;# 
    78     000D                     	;# 
    79     000E                     	;# 
    80     000E                     	;# 
    81     000F                     	;# 
    82     0010                     	;# 
    83     0011                     	;# 
    84     0012                     	;# 
    85     0013                     	;# 
    86     0014                     	;# 
    87     0015                     	;# 
    88     0015                     	;# 
    89     0016                     	;# 
    90     0017                     	;# 
    91     0018                     	;# 
    92     0019                     	;# 
    93     001A                     	;# 
    94     001B                     	;# 
    95     001B                     	;# 
    96     001C                     	;# 
    97     001D                     	;# 
    98     001E                     	;# 
    99     001F                     	;# 
   100     0081                     	;# 
   101     0085                     	;# 
   102     0086                     	;# 
   103     0087                     	;# 
   104     0088                     	;# 
   105     0089                     	;# 
   106     008C                     	;# 
   107     008D                     	;# 
   108     008E                     	;# 
   109     008F                     	;# 
   110     0090                     	;# 
   111     0091                     	;# 
   112     0092                     	;# 
   113     0093                     	;# 
   114     0093                     	;# 
   115     0093                     	;# 
   116     0094                     	;# 
   117     0095                     	;# 
   118     0096                     	;# 
   119     0097                     	;# 
   120     0098                     	;# 
   121     0099                     	;# 
   122     009A                     	;# 
   123     009B                     	;# 
   124     009C                     	;# 
   125     009D                     	;# 
   126     009E                     	;# 
   127     009F                     	;# 
   128     0105                     	;# 
   129     0107                     	;# 
   130     0108                     	;# 
   131     0109                     	;# 
   132     010C                     	;# 
   133     010C                     	;# 
   134     010D                     	;# 
   135     010E                     	;# 
   136     010F                     	;# 
   137     0185                     	;# 
   138     0187                     	;# 
   139     0188                     	;# 
   140     0189                     	;# 
   141     018C                     	;# 
   142     018D                     	;# 
   143     0000                     	;# 
   144     0001                     	;# 
   145     0002                     	;# 
   146     0003                     	;# 
   147     0004                     	;# 
   148     0005                     	;# 
   149     0006                     	;# 
   150     0007                     	;# 
   151     0008                     	;# 
   152     0009                     	;# 
   153     000A                     	;# 
   154     000B                     	;# 
   155     000C                     	;# 
   156     000D                     	;# 
   157     000E                     	;# 
   158     000E                     	;# 
   159     000F                     	;# 
   160     0010                     	;# 
   161     0011                     	;# 
   162     0012                     	;# 
   163     0013                     	;# 
   164     0014                     	;# 
   165     0015                     	;# 
   166     0015                     	;# 
   167     0016                     	;# 
   168     0017                     	;# 
   169     0018                     	;# 
   170     0019                     	;# 
   171     001A                     	;# 
   172     001B                     	;# 
   173     001B                     	;# 
   174     001C                     	;# 
   175     001D                     	;# 
   176     001E                     	;# 
   177     001F                     	;# 
   178     0081                     	;# 
   179     0085                     	;# 
   180     0086                     	;# 
   181     0087                     	;# 
   182     0088                     	;# 
   183     0089                     	;# 
   184     008C                     	;# 
   185     008D                     	;# 
   186     008E                     	;# 
   187     008F                     	;# 
   188     0090                     	;# 
   189     0091                     	;# 
   190     0092                     	;# 
   191     0093                     	;# 
   192     0093                     	;# 
   193     0093                     	;# 
   194     0094                     	;# 
   195     0095                     	;# 
   196     0096                     	;# 
   197     0097                     	;# 
   198     0098                     	;# 
   199     0099                     	;# 
   200     009A                     	;# 
   201     009B                     	;# 
   202     009C                     	;# 
   203     009D                     	;# 
   204     009E                     	;# 
   205     009F                     	;# 
   206     0105                     	;# 
   207     0107                     	;# 
   208     0108                     	;# 
   209     0109                     	;# 
   210     010C                     	;# 
   211     010C                     	;# 
   212     010D                     	;# 
   213     010E                     	;# 
   214     010F                     	;# 
   215     0185                     	;# 
   216     0187                     	;# 
   217     0188                     	;# 
   218     0189                     	;# 
   219     018C                     	;# 
   220     018D                     	;# 
   221     0000                     	;# 
   222     0001                     	;# 
   223     0002                     	;# 
   224     0003                     	;# 
   225     0004                     	;# 
   226     0005                     	;# 
   227     0006                     	;# 
   228     0007                     	;# 
   229     0008                     	;# 
   230     0009                     	;# 
   231     000A                     	;# 
   232     000B                     	;# 
   233     000C                     	;# 
   234     000D                     	;# 
   235     000E                     	;# 
   236     000E                     	;# 
   237     000F                     	;# 
   238     0010                     	;# 
   239     0011                     	;# 
   240     0012                     	;# 
   241     0013                     	;# 
   242     0014                     	;# 
   243     0015                     	;# 
   244     0015                     	;# 
   245     0016                     	;# 
   246     0017                     	;# 
   247     0018                     	;# 
   248     0019                     	;# 
   249     001A                     	;# 
   250     001B                     	;# 
   251     001B                     	;# 
   252     001C                     	;# 
   253     001D                     	;# 
   254     001E                     	;# 
   255     001F                     	;# 
   256     0081                     	;# 
   257     0085                     	;# 
   258     0086                     	;# 
   259     0087                     	;# 
   260     0088                     	;# 
   261     0089                     	;# 
   262     008C                     	;# 
   263     008D                     	;# 
   264     008E                     	;# 
   265     008F                     	;# 
   266     0090                     	;# 
   267     0091                     	;# 
   268     0092                     	;# 
   269     0093                     	;# 
   270     0093                     	;# 
   271     0093                     	;# 
   272     0094                     	;# 
   273     0095                     	;# 
   274     0096                     	;# 
   275     0097                     	;# 
   276     0098                     	;# 
   277     0099                     	;# 
   278     009A                     	;# 
   279     009B                     	;# 
   280     009C                     	;# 
   281     009D                     	;# 
   282     009E                     	;# 
   283     009F                     	;# 
   284     0105                     	;# 
   285     0107                     	;# 
   286     0108                     	;# 
   287     0109                     	;# 
   288     010C                     	;# 
   289     010C                     	;# 
   290     010D                     	;# 
   291     010E                     	;# 
   292     010F                     	;# 
   293     0185                     	;# 
   294     0187                     	;# 
   295     0188                     	;# 
   296     0189                     	;# 
   297     018C                     	;# 
   298     018D                     	;# 
   299     0000                     	;# 
   300     0001                     	;# 
   301     0002                     	;# 
   302     0003                     	;# 
   303     0004                     	;# 
   304     0005                     	;# 
   305     0006                     	;# 
   306     0007                     	;# 
   307     0008                     	;# 
   308     0009                     	;# 
   309     000A                     	;# 
   310     000B                     	;# 
   311     000C                     	;# 
   312     000D                     	;# 
   313     000E                     	;# 
   314     000E                     	;# 
   315     000F                     	;# 
   316     0010                     	;# 
   317     0011                     	;# 
   318     0012                     	;# 
   319     0013                     	;# 
   320     0014                     	;# 
   321     0015                     	;# 
   322     0015                     	;# 
   323     0016                     	;# 
   324     0017                     	;# 
   325     0018                     	;# 
   326     0019                     	;# 
   327     001A                     	;# 
   328     001B                     	;# 
   329     001B                     	;# 
   330     001C                     	;# 
   331     001D                     	;# 
   332     001E                     	;# 
   333     001F                     	;# 
   334     0081                     	;# 
   335     0085                     	;# 
   336     0086                     	;# 
   337     0087                     	;# 
   338     0088                     	;# 
   339     0089                     	;# 
   340     008C                     	;# 
   341     008D                     	;# 
   342     008E                     	;# 
   343     008F                     	;# 
   344     0090                     	;# 
   345     0091                     	;# 
   346     0092                     	;# 
   347     0093                     	;# 
   348     0093                     	;# 
   349     0093                     	;# 
   350     0094                     	;# 
   351     0095                     	;# 
   352     0096                     	;# 
   353     0097                     	;# 
   354     0098                     	;# 
   355     0099                     	;# 
   356     009A                     	;# 
   357     009B                     	;# 
   358     009C                     	;# 
   359     009D                     	;# 
   360     009E                     	;# 
   361     009F                     	;# 
   362     0105                     	;# 
   363     0107                     	;# 
   364     0108                     	;# 
   365     0109                     	;# 
   366     010C                     	;# 
   367     010C                     	;# 
   368     010D                     	;# 
   369     010E                     	;# 
   370     010F                     	;# 
   371     0185                     	;# 
   372     0187                     	;# 
   373     0188                     	;# 
   374     0189                     	;# 
   375     018C                     	;# 
   376     018D                     	;# 
   377     0000                     	;# 
   378     0001                     	;# 
   379     0002                     	;# 
   380     0003                     	;# 
   381     0004                     	;# 
   382     0005                     	;# 
   383     0006                     	;# 
   384     0007                     	;# 
   385     0008                     	;# 
   386     0009                     	;# 
   387     000A                     	;# 
   388     000B                     	;# 
   389     000C                     	;# 
   390     000D                     	;# 
   391     000E                     	;# 
   392     000E                     	;# 
   393     000F                     	;# 
   394     0010                     	;# 
   395     0011                     	;# 
   396     0012                     	;# 
   397     0013                     	;# 
   398     0014                     	;# 
   399     0015                     	;# 
   400     0015                     	;# 
   401     0016                     	;# 
   402     0017                     	;# 
   403     0018                     	;# 
   404     0019                     	;# 
   405     001A                     	;# 
   406     001B                     	;# 
   407     001B                     	;# 
   408     001C                     	;# 
   409     001D                     	;# 
   410     001E                     	;# 
   411     001F                     	;# 
   412     0081                     	;# 
   413     0085                     	;# 
   414     0086                     	;# 
   415     0087                     	;# 
   416     0088                     	;# 
   417     0089                     	;# 
   418     008C                     	;# 
   419     008D                     	;# 
   420     008E                     	;# 
   421     008F                     	;# 
   422     0090                     	;# 
   423     0091                     	;# 
   424     0092                     	;# 
   425     0093                     	;# 
   426     0093                     	;# 
   427     0093                     	;# 
   428     0094                     	;# 
   429     0095                     	;# 
   430     0096                     	;# 
   431     0097                     	;# 
   432     0098                     	;# 
   433     0099                     	;# 
   434     009A                     	;# 
   435     009B                     	;# 
   436     009C                     	;# 
   437     009D                     	;# 
   438     009E                     	;# 
   439     009F                     	;# 
   440     0105                     	;# 
   441     0107                     	;# 
   442     0108                     	;# 
   443     0109                     	;# 
   444     010C                     	;# 
   445     010C                     	;# 
   446     010D                     	;# 
   447     010E                     	;# 
   448     010F                     	;# 
   449     0185                     	;# 
   450     0187                     	;# 
   451     0188                     	;# 
   452     0189                     	;# 
   453     018C                     	;# 
   454     018D                     	;# 
   455                           
   456                           	psect	idataBANK0
   457     03C2                     __pidataBANK0:
   458                           
   459                           ;initializer for pic_init@F1593
   460     03C2  3401               	retlw	1
   461     03C3  3401               	retlw	1
   462     03C4  3407               	retlw	7
   463     03C5  3400               	retlw	0
   464     03C6  3400               	retlw	0
   465     03C7  3400               	retlw	0
   466     03C8  3401               	retlw	1
   467                           
   468                           ;initializer for pic_init@F1597
   469     03C9  3401               	retlw	1
   470     03CA  3401               	retlw	1
   471     03CB  3400               	retlw	0
   472     03CC  3400               	retlw	0
   473     03CD  3401               	retlw	1
   474     03CE  3401               	retlw	1
   475                           
   476                           ;initializer for pic_init@F1595
   477     03CF  3401               	retlw	1
   478     03D0  3403               	retlw	3
   479     03D1  3401               	retlw	1
   480                           
   481                           	psect	idataBANK1
   482     0371                     __pidataBANK1:
   483                           
   484                           ;initializer for pic_init@F1599
   485     0371  3485               	retlw	133
   486     0372  3400               	retlw	0
   487     0373  3405               	retlw	5
   488     0374  3400               	retlw	0
   489     0375  3488               	retlw	136
   490     0376  3401               	retlw	1
   491     0377  3400               	retlw	0
   492     0378  3400               	retlw	0
   493     0379  3486               	retlw	134
   494     037A  3400               	retlw	0
   495     037B  3406               	retlw	6
   496     037C  3400               	retlw	0
   497     037D  3489               	retlw	137
   498     037E  3401               	retlw	1
   499     037F  3401               	retlw	1
   500     0380  3400               	retlw	0
   501     0381  3489               	retlw	137
   502     0382  3400               	retlw	0
   503     0383  3409               	retlw	9
   504     0384  3400               	retlw	0
   505     0385  3489               	retlw	137
   506     0386  3401               	retlw	1
   507     0387  3401               	retlw	1
   508     0388  3401               	retlw	1
   509     001E                     _ADRESH	set	30
   510     0006                     _PORTBbits	set	6
   511     001F                     _ADCON0bits	set	31
   512     000B                     _INTCONbits	set	11
   513     0006                     _PORTB	set	6
   514     0005                     _PORTA	set	5
   515     00F9                     _GO	set	249
   516     009E                     _ADRESL	set	158
   517     0089                     _TRISEbits	set	137
   518     0086                     _TRISBbits	set	134
   519     009F                     _ADCON1bits	set	159
   520     0081                     _OPTION_REGbits	set	129
   521     0096                     _IOCBbits	set	150
   522     008F                     _OSCCONbits	set	143
   523     0085                     _TRISA	set	133
   524     0188                     _ANSELbits	set	392
   525     0189                     _ANSELH	set	393
   526     0188                     _ANSEL	set	392
   527                           
   528                           	psect	cinit
   529     0013                     start_initialization:	
   530                           ; #config settings
   531                           
   532     0013                     __initialization:
   533                           
   534                           ; Initialize objects allocated to BANK1
   535     0013  1383               	bcf	3,7	;select IRP bank0
   536     0014  30B8               	movlw	low (__pdataBANK1+24)
   537     0015  00FD               	movwf	btemp+-1
   538     0016  3003               	movlw	high __pidataBANK1
   539     0017  00FE               	movwf	btemp
   540     0018  3071               	movlw	low __pidataBANK1
   541     0019  00FF               	movwf	btemp+1
   542     001A  30A0               	movlw	low __pdataBANK1
   543     001B  0084               	movwf	4
   544     001C  120A  118A  23A1  120A  118A  	fcall	init_ram0
   545                           
   546                           ; Initialize objects allocated to BANK0
   547     0021  3064               	movlw	low (__pdataBANK0+16)
   548     0022  00FD               	movwf	btemp+-1
   549     0023  3003               	movlw	high __pidataBANK0
   550     0024  00FE               	movwf	btemp
   551     0025  30C2               	movlw	low __pidataBANK0
   552     0026  00FF               	movwf	btemp+1
   553     0027  3054               	movlw	low __pdataBANK0
   554     0028  0084               	movwf	4
   555     0029  120A  118A  23A1  120A  118A  	fcall	init_ram0
   556                           
   557                           ; Clear objects allocated to BANK0
   558     002E  01E4               	clrf	__pbssBANK0& (0+127)
   559     002F  01E5               	clrf	(__pbssBANK0+1)& (0+127)
   560     0030  01E6               	clrf	(__pbssBANK0+2)& (0+127)
   561     0031  01E7               	clrf	(__pbssBANK0+3)& (0+127)
   562     0032  01E8               	clrf	(__pbssBANK0+4)& (0+127)
   563     0033  01E9               	clrf	(__pbssBANK0+5)& (0+127)
   564     0034  01EA               	clrf	(__pbssBANK0+6)& (0+127)
   565     0035  01EB               	clrf	(__pbssBANK0+7)& (0+127)
   566                           
   567                           ; Clear objects allocated to COMMON
   568     0036  01FC               	clrf	__pbssCOMMON& (0+127)
   569     0037  01FD               	clrf	(__pbssCOMMON+1)& (0+127)
   570     0038                     end_of_initialization:	
   571                           ;End of C runtime variable initialization code
   572                           
   573     0038                     __end_of__initialization:
   574     0038  0183               	clrf	3
   575     0039  120A  118A  2BD2   	ljmp	_main	;jump to C main() function
   576                           
   577                           	psect	bssCOMMON
   578     007C                     __pbssCOMMON:
   579     007C                     parse_rotary@prevState:
   580     007C                     	ds	1
   581     007D                     _count:
   582     007D                     	ds	1
   583                           
   584                           	psect	bssBANK0
   585     0064                     __pbssBANK0:
   586     0064                     pic_loop@F1588:
   587     0064                     	ds	8
   588                           
   589                           	psect	dataBANK0
   590     0054                     __pdataBANK0:
   591     0054                     pic_init@F1593:
   592     0054                     	ds	7
   593     005B                     pic_init@F1597:
   594     005B                     	ds	6
   595     0061                     pic_init@F1595:
   596     0061                     	ds	3
   597                           
   598                           	psect	dataBANK1
   599     00A0                     __pdataBANK1:
   600     00A0                     pic_init@F1599:
   601     00A0                     	ds	24
   602                           
   603                           	psect	inittext
   604     039D                     init_fetch0:	
   605                           ;	Called with low address in FSR and high address in W
   606                           
   607     039D  087E               	movf	btemp,w
   608     039E  008A               	movwf	10
   609     039F  087F               	movf	btemp+1,w
   610     03A0  0082               	movwf	2
   611     03A1                     init_ram0:	
   612                           ;Called with:
   613                           ;	high address of idata address in btemp 
   614                           ;	low address of idata address in btemp+1 
   615                           ;	low address of data in FSR
   616                           ;	high address + 1 of data in btemp-1
   617                           
   618     03A1  120A  118A  239D  120A  118A  	fcall	init_fetch0
   619     03A6  0080               	movwf	0
   620     03A7  0A84               	incf	4,f
   621     03A8  0804               	movf	4,w
   622     03A9  067D               	xorwf	btemp+-1,w
   623     03AA  1903               	btfsc	3,2
   624     03AB  3400               	retlw	0
   625     03AC  0AFF               	incf	btemp+1,f
   626     03AD  1903               	btfsc	3,2
   627     03AE  0AFE               	incf	btemp,f
   628     03AF  2BA1               	goto	init_ram0
   629                           
   630                           	psect	cstackCOMMON
   631     0070                     __pcstackCOMMON:
   632     0070                     ?_pic_init:
   633     0070                     ?_pic_loop:	
   634                           ; 1 bytes @ 0x0
   635                           
   636     0070                     ?_init_gpio:	
   637                           ; 1 bytes @ 0x0
   638                           
   639     0070                     ?_parse_rotary:	
   640                           ; 1 bytes @ 0x0
   641                           
   642     0070                     ?_main:	
   643                           ; 1 bytes @ 0x0
   644                           
   645     0070                     ?_isr:	
   646                           ; 1 bytes @ 0x0
   647                           
   648     0070                     parse_rotary@pinB:	
   649                           ; 1 bytes @ 0x0
   650                           
   651                           
   652                           ; 1 bytes @ 0x0
   653     0070                     	ds	1
   654     0071                     parse_rotary@counter:
   655                           
   656                           ; 1 bytes @ 0x1
   657     0071                     	ds	1
   658     0072                     parse_rotary@max:
   659                           
   660                           ; 1 bytes @ 0x2
   661     0072                     	ds	1
   662     0073                     parse_rotary@min:
   663                           
   664                           ; 1 bytes @ 0x3
   665     0073                     	ds	1
   666     0074                     ??_parse_rotary:
   667                           
   668                           ; 1 bytes @ 0x4
   669     0074                     	ds	1
   670     0075                     parse_rotary@pinA:
   671                           
   672                           ; 1 bytes @ 0x5
   673     0075                     	ds	1
   674     0076                     parse_rotary@state:
   675                           
   676                           ; 1 bytes @ 0x6
   677     0076                     	ds	1
   678     0077                     ??_isr:
   679                           
   680                           ; 1 bytes @ 0x7
   681     0077                     	ds	5
   682                           
   683                           	psect	cstackBANK0
   684     0020                     __pcstackBANK0:
   685     0020                     ??_init_gpio:
   686     0020                     ?_init_osc:	
   687                           ; 1 bytes @ 0x0
   688                           
   689     0020                     ?_init_int:	
   690                           ; 1 bytes @ 0x0
   691                           
   692     0020                     ?_init_adc:	
   693                           ; 1 bytes @ 0x0
   694                           
   695     0020                     ?_read_potentiometer:	
   696                           ; 1 bytes @ 0x0
   697                           
   698     0020                     ?___wmul:	
   699                           ; 2 bytes @ 0x0
   700                           
   701     0020                     ?___awdiv:	
   702                           ; 2 bytes @ 0x0
   703                           
   704     0020                     ___wmul@multiplier:	
   705                           ; 2 bytes @ 0x0
   706                           
   707     0020                     ___awdiv@divisor:	
   708                           ; 2 bytes @ 0x0
   709                           
   710     0020                     init_osc@config:	
   711                           ; 2 bytes @ 0x0
   712                           
   713     0020                     init_int@config:	
   714                           ; 3 bytes @ 0x0
   715                           
   716     0020                     init_adc@config:	
   717                           ; 6 bytes @ 0x0
   718                           
   719                           
   720                           ; 7 bytes @ 0x0
   721     0020                     	ds	2
   722     0022                     ??_read_potentiometer:
   723     0022                     read_potentiometer@result:	
   724                           ; 1 bytes @ 0x2
   725                           
   726     0022                     ___wmul@multiplicand:	
   727                           ; 2 bytes @ 0x2
   728                           
   729     0022                     ___awdiv@dividend:	
   730                           ; 2 bytes @ 0x2
   731                           
   732                           
   733                           ; 2 bytes @ 0x2
   734     0022                     	ds	1
   735     0023                     ??_init_osc:
   736                           
   737                           ; 1 bytes @ 0x3
   738     0023                     	ds	1
   739     0024                     ??___wmul:
   740     0024                     ??___awdiv:	
   741                           ; 1 bytes @ 0x4
   742                           
   743     0024                     ___awdiv@counter:	
   744                           ; 1 bytes @ 0x4
   745                           
   746     0024                     ___wmul@product:	
   747                           ; 1 bytes @ 0x4
   748                           
   749                           
   750                           ; 2 bytes @ 0x4
   751     0024                     	ds	1
   752     0025                     ___awdiv@sign:
   753                           
   754                           ; 1 bytes @ 0x5
   755     0025                     	ds	1
   756     0026                     ??_init_int:
   757     0026                     ___awdiv@quotient:	
   758                           ; 1 bytes @ 0x6
   759                           
   760                           
   761                           ; 2 bytes @ 0x6
   762     0026                     	ds	1
   763     0027                     ??_init_adc:
   764                           
   765                           ; 1 bytes @ 0x7
   766     0027                     	ds	1
   767     0028                     ??_pic_init:
   768     0028                     ?_populate_step_array:	
   769                           ; 1 bytes @ 0x8
   770                           
   771     0028                     populate_step_array@size:	
   772                           ; 1 bytes @ 0x8
   773                           
   774                           
   775                           ; 2 bytes @ 0x8
   776     0028                     	ds	2
   777     002A                     populate_step_array@potLimit:
   778                           
   779                           ; 2 bytes @ 0xA
   780     002A                     	ds	2
   781     002C                     ??_populate_step_array:
   782     002C                     pic_init@pin_config:	
   783                           ; 1 bytes @ 0xC
   784                           
   785                           
   786                           ; 24 bytes @ 0xC
   787     002C                     	ds	2
   788     002E                     populate_step_array@i:
   789                           
   790                           ; 2 bytes @ 0xE
   791     002E                     	ds	2
   792     0030                     populate_step_array@array:
   793                           
   794                           ; 1 bytes @ 0x10
   795     0030                     	ds	1
   796     0031                     ??_pic_loop:
   797                           
   798                           ; 1 bytes @ 0x11
   799     0031                     	ds	6
   800     0037                     pic_loop@stepArray:
   801                           
   802                           ; 8 bytes @ 0x17
   803     0037                     	ds	8
   804     003F                     pic_loop@result:
   805                           
   806                           ; 2 bytes @ 0x1F
   807     003F                     	ds	2
   808     0041                     pic_loop@i:
   809                           
   810                           ; 2 bytes @ 0x21
   811     0041                     	ds	3
   812     0044                     pic_init@adc_config:
   813                           
   814                           ; 7 bytes @ 0x24
   815     0044                     	ds	7
   816     004B                     pic_init@int_config:
   817                           
   818                           ; 6 bytes @ 0x2B
   819     004B                     	ds	6
   820     0051                     pic_init@osc_config:
   821                           
   822                           ; 3 bytes @ 0x31
   823     0051                     	ds	3
   824     0054                     ??_main:
   825                           
   826                           	psect	maintext
   827     03D2                     __pmaintext:	
   828                           ; 1 bytes @ 0x34
   829 ;;
   830 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   831 ;;
   832 ;; *************** function _main *****************
   833 ;; Defined at:
   834 ;;		line 18 in file "src/main.c"
   835 ;; Parameters:    Size  Location     Type
   836 ;;		None
   837 ;; Auto vars:     Size  Location     Type
   838 ;;		None
   839 ;; Return value:  Size  Location     Type
   840 ;;                  1    wreg      void 
   841 ;; Registers used:
   842 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   843 ;; Tracked objects:
   844 ;;		On entry : B00/0
   845 ;;		On exit  : 0/0
   846 ;;		Unchanged: 0/0
   847 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   848 ;;      Params:         0       0       0       0       0
   849 ;;      Locals:         0       0       0       0       0
   850 ;;      Temps:          0       0       0       0       0
   851 ;;      Totals:         0       0       0       0       0
   852 ;;Total ram usage:        0 bytes
   853 ;; Hardware stack levels required when called: 5
   854 ;; This function calls:
   855 ;;		_pic_init
   856 ;;		_pic_loop
   857 ;; This function is called by:
   858 ;;		Startup code after reset
   859 ;; This function uses a non-reentrant model
   860 ;;
   861                           
   862     03D2                     _main:	
   863                           ;psect for function _main
   864                           
   865     03D2                     l1097:	
   866                           ;incstack = 0
   867                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   868                           
   869                           
   870                           ;src/main.c: 20:   pic_init();
   871     03D2  120A  118A  20DD  120A  118A  	fcall	_pic_init
   872     03D7                     l1099:
   873                           
   874                           ;src/main.c: 22:   pic_loop();
   875     03D7  120A  118A  203C  120A  118A  	fcall	_pic_loop
   876     03DC                     l90:
   877     03DC  120A  118A  2810   	ljmp	start
   878     03DF                     __end_of_main:
   879                           
   880                           	psect	text1
   881     003C                     __ptext1:	
   882 ;; *************** function _pic_loop *****************
   883 ;; Defined at:
   884 ;;		line 25 in file "src/main.c"
   885 ;; Parameters:    Size  Location     Type
   886 ;;		None
   887 ;; Auto vars:     Size  Location     Type
   888 ;;  i               2   33[BANK0 ] int 
   889 ;;  result          2   31[BANK0 ] int 
   890 ;;  stepArray       8   23[BANK0 ] int [4]
   891 ;; Return value:  Size  Location     Type
   892 ;;                  1    wreg      void 
   893 ;; Registers used:
   894 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   895 ;; Tracked objects:
   896 ;;		On entry : 0/0
   897 ;;		On exit  : 0/0
   898 ;;		Unchanged: 0/0
   899 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   900 ;;      Params:         0       0       0       0       0
   901 ;;      Locals:         0      12       0       0       0
   902 ;;      Temps:          0       6       0       0       0
   903 ;;      Totals:         0      18       0       0       0
   904 ;;Total ram usage:       18 bytes
   905 ;; Hardware stack levels used: 1
   906 ;; Hardware stack levels required when called: 4
   907 ;; This function calls:
   908 ;;		_populate_step_array
   909 ;;		_read_potentiometer
   910 ;; This function is called by:
   911 ;;		_main
   912 ;; This function uses a non-reentrant model
   913 ;;
   914                           
   915     003C                     _pic_loop:	
   916                           ;psect for function _pic_loop
   917                           
   918     003C                     l1047:	
   919                           ;incstack = 0
   920                           ; Regs used in _pic_loop: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   921                           
   922                           
   923                           ;src/main.c: 27:   int stepArray[4] = {0};
   924     003C  3037               	movlw	pic_loop@stepArray& (0+255)
   925     003D  0084               	movwf	4
   926     003E  3008               	movlw	8
   927     003F  00FF               	movwf	btemp+1
   928     0040                     u720:
   929     0040  1383               	bcf	3,7	;select IRP bank0
   930     0041  0180               	clrf	0
   931     0042  0A84               	incf	4,f
   932     0043  0BFF               	decfsz	btemp+1,f
   933     0044  2840               	goto	u720
   934     0045                     l1049:
   935                           
   936                           ;src/main.c: 28:   populate_step_array(stepArray, 4, 1023);
   937     0045  3004               	movlw	4
   938     0046  1283               	bcf	3,5	;RP0=0, select bank0
   939     0047  1303               	bcf	3,6	;RP1=0, select bank0
   940     0048  00A8               	movwf	populate_step_array@size
   941     0049  3000               	movlw	0
   942     004A  00A9               	movwf	populate_step_array@size+1
   943     004B  30FF               	movlw	255
   944     004C  00AA               	movwf	populate_step_array@potLimit
   945     004D  3003               	movlw	3
   946     004E  00AB               	movwf	populate_step_array@potLimit+1
   947     004F  3037               	movlw	(low (pic_loop@stepArray| 0))& (0+255)
   948     0050  120A  118A  21D3  120A  118A  	fcall	_populate_step_array
   949     0055                     l1051:
   950                           
   951                           ;src/main.c: 32:     int result = read_potentiometer();
   952     0055  120A  118A  2389  120A  118A  	fcall	_read_potentiometer
   953     005A  1283               	bcf	3,5	;RP0=0, select bank0
   954     005B  1303               	bcf	3,6	;RP1=0, select bank0
   955     005C  0821               	movf	?_read_potentiometer+1,w
   956     005D  00C0               	movwf	pic_loop@result+1
   957     005E  0820               	movf	?_read_potentiometer,w
   958     005F  00BF               	movwf	pic_loop@result
   959     0060                     l1053:
   960                           
   961                           ;src/main.c: 38:     for (int i = 0; i < 4; i++) {
   962     0060  01C1               	clrf	pic_loop@i
   963     0061  01C2               	clrf	pic_loop@i+1
   964     0062                     l1059:
   965                           
   966                           ;src/main.c: 39:       if (result > (stepArray[i] - 2)) {
   967     0062  1283               	bcf	3,5	;RP0=0, select bank0
   968     0063  1303               	bcf	3,6	;RP1=0, select bank0
   969     0064  0841               	movf	pic_loop@i,w
   970     0065  00B1               	movwf	??_pic_loop
   971     0066  0731               	addwf	??_pic_loop,w
   972     0067  3E37               	addlw	(low (pic_loop@stepArray| 0))& (0+255)
   973     0068  0084               	movwf	4
   974     0069  1383               	bcf	3,7	;select IRP bank0
   975     006A  0800               	movf	0,w
   976     006B  00B2               	movwf	??_pic_loop+1
   977     006C  0A84               	incf	4,f
   978     006D  0800               	movf	0,w
   979     006E  00B3               	movwf	??_pic_loop+2
   980     006F  0832               	movf	??_pic_loop+1,w
   981     0070  3EFE               	addlw	254
   982     0071  00B4               	movwf	??_pic_loop+3
   983     0072  0833               	movf	??_pic_loop+2,w
   984     0073  1803               	skipnc
   985     0074  3E01               	addlw	1
   986     0075  3EFF               	addlw	255
   987     0076  00B5               	movwf	??_pic_loop+4
   988     0077  0835               	movf	??_pic_loop+4,w
   989     0078  3A80               	xorlw	128
   990     0079  00B6               	movwf	??_pic_loop+5
   991     007A  0840               	movf	pic_loop@result+1,w
   992     007B  3A80               	xorlw	128
   993     007C  0236               	subwf	??_pic_loop+5,w
   994     007D  1D03               	skipz
   995     007E  2881               	goto	u735
   996     007F  083F               	movf	pic_loop@result,w
   997     0080  0234               	subwf	??_pic_loop+3,w
   998     0081                     u735:
   999     0081  1803               	skipnc
  1000     0082  2884               	goto	u731
  1001     0083  2885               	goto	u730
  1002     0084                     u731:
  1003     0084  2895               	goto	l1063
  1004     0085                     u730:
  1005     0085                     l1061:
  1006                           
  1007                           ;src/main.c: 40:         PORTA = (unsigned char)(PORTA & ~(1 << i));
  1008     0085  3001               	movlw	1
  1009     0086  1283               	bcf	3,5	;RP0=0, select bank0
  1010     0087  1303               	bcf	3,6	;RP1=0, select bank0
  1011     0088  00B1               	movwf	??_pic_loop
  1012     0089  0A41               	incf	pic_loop@i,w
  1013     008A  288D               	goto	u744
  1014     008B                     u745:
  1015     008B  1003               	clrc
  1016     008C  0DB1               	rlf	??_pic_loop,f
  1017     008D                     u744:
  1018     008D  3EFF               	addlw	-1
  1019     008E  1D03               	skipz
  1020     008F  288B               	goto	u745
  1021     0090  0831               	movf	??_pic_loop,w
  1022     0091  3AFF               	xorlw	255
  1023     0092  0505               	andwf	5,w	;volatile
  1024     0093  0085               	movwf	5	;volatile
  1025                           
  1026                           ;src/main.c: 41:       } else if (result <= (stepArray[i] - 2)) {
  1027     0094  28C6               	goto	l1067
  1028     0095                     l1063:
  1029     0095  1283               	bcf	3,5	;RP0=0, select bank0
  1030     0096  1303               	bcf	3,6	;RP1=0, select bank0
  1031     0097  0841               	movf	pic_loop@i,w
  1032     0098  00B1               	movwf	??_pic_loop
  1033     0099  0731               	addwf	??_pic_loop,w
  1034     009A  3E37               	addlw	(low (pic_loop@stepArray| 0))& (0+255)
  1035     009B  0084               	movwf	4
  1036     009C  1383               	bcf	3,7	;select IRP bank0
  1037     009D  0800               	movf	0,w
  1038     009E  00B2               	movwf	??_pic_loop+1
  1039     009F  0A84               	incf	4,f
  1040     00A0  0800               	movf	0,w
  1041     00A1  00B3               	movwf	??_pic_loop+2
  1042     00A2  0832               	movf	??_pic_loop+1,w
  1043     00A3  3EFE               	addlw	254
  1044     00A4  00B4               	movwf	??_pic_loop+3
  1045     00A5  0833               	movf	??_pic_loop+2,w
  1046     00A6  1803               	skipnc
  1047     00A7  3E01               	addlw	1
  1048     00A8  3EFF               	addlw	255
  1049     00A9  00B5               	movwf	??_pic_loop+4
  1050     00AA  0835               	movf	??_pic_loop+4,w
  1051     00AB  3A80               	xorlw	128
  1052     00AC  00B6               	movwf	??_pic_loop+5
  1053     00AD  0840               	movf	pic_loop@result+1,w
  1054     00AE  3A80               	xorlw	128
  1055     00AF  0236               	subwf	??_pic_loop+5,w
  1056     00B0  1D03               	skipz
  1057     00B1  28B4               	goto	u755
  1058     00B2  083F               	movf	pic_loop@result,w
  1059     00B3  0234               	subwf	??_pic_loop+3,w
  1060     00B4                     u755:
  1061     00B4  1C03               	skipc
  1062     00B5  28B7               	goto	u751
  1063     00B6  28B8               	goto	u750
  1064     00B7                     u751:
  1065     00B7  28C6               	goto	l1067
  1066     00B8                     u750:
  1067     00B8                     l1065:
  1068                           
  1069                           ;src/main.c: 42:         PORTA = (unsigned char)(PORTA | (1 << i));
  1070     00B8  3001               	movlw	1
  1071     00B9  1283               	bcf	3,5	;RP0=0, select bank0
  1072     00BA  1303               	bcf	3,6	;RP1=0, select bank0
  1073     00BB  00B1               	movwf	??_pic_loop
  1074     00BC  0A41               	incf	pic_loop@i,w
  1075     00BD  28C0               	goto	u764
  1076     00BE                     u765:
  1077     00BE  1003               	clrc
  1078     00BF  0DB1               	rlf	??_pic_loop,f
  1079     00C0                     u764:
  1080     00C0  3EFF               	addlw	-1
  1081     00C1  1D03               	skipz
  1082     00C2  28BE               	goto	u765
  1083     00C3  0831               	movf	??_pic_loop,w
  1084     00C4  0405               	iorwf	5,w	;volatile
  1085     00C5  0085               	movwf	5	;volatile
  1086     00C6                     l1067:
  1087                           
  1088                           ;src/main.c: 44:     }
  1089     00C6  3001               	movlw	1
  1090     00C7  1283               	bcf	3,5	;RP0=0, select bank0
  1091     00C8  1303               	bcf	3,6	;RP1=0, select bank0
  1092     00C9  07C1               	addwf	pic_loop@i,f
  1093     00CA  1803               	skipnc
  1094     00CB  0AC2               	incf	pic_loop@i+1,f
  1095     00CC  3000               	movlw	0
  1096     00CD  07C2               	addwf	pic_loop@i+1,f
  1097     00CE                     l1069:
  1098     00CE  0842               	movf	pic_loop@i+1,w
  1099     00CF  3A80               	xorlw	128
  1100     00D0  00FF               	movwf	btemp+1
  1101     00D1  3080               	movlw	128
  1102     00D2  027F               	subwf	btemp+1,w
  1103     00D3  1D03               	skipz
  1104     00D4  28D7               	goto	u775
  1105     00D5  3004               	movlw	4
  1106     00D6  0241               	subwf	pic_loop@i,w
  1107     00D7                     u775:
  1108     00D7  1C03               	skipc
  1109     00D8  28DA               	goto	u771
  1110     00D9  28DB               	goto	u770
  1111     00DA                     u771:
  1112     00DA  2862               	goto	l1059
  1113     00DB                     u770:
  1114     00DB  2855               	goto	l1051
  1115     00DC  0008               	return
  1116     00DD                     __end_of_pic_loop:
  1117                           
  1118                           	psect	text2
  1119     0389                     __ptext2:	
  1120 ;; *************** function _read_potentiometer *****************
  1121 ;; Defined at:
  1122 ;;		line 10 in file "src/potentiometer.c"
  1123 ;; Parameters:    Size  Location     Type
  1124 ;;		None
  1125 ;; Auto vars:     Size  Location     Type
  1126 ;;  result          2    2[BANK0 ] int 
  1127 ;; Return value:  Size  Location     Type
  1128 ;;                  2    0[BANK0 ] int 
  1129 ;; Registers used:
  1130 ;;		wreg
  1131 ;; Tracked objects:
  1132 ;;		On entry : 0/0
  1133 ;;		On exit  : 0/0
  1134 ;;		Unchanged: 0/0
  1135 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1136 ;;      Params:         0       2       0       0       0
  1137 ;;      Locals:         0       2       0       0       0
  1138 ;;      Temps:          0       0       0       0       0
  1139 ;;      Totals:         0       4       0       0       0
  1140 ;;Total ram usage:        4 bytes
  1141 ;; Hardware stack levels used: 1
  1142 ;; Hardware stack levels required when called: 2
  1143 ;; This function calls:
  1144 ;;		Nothing
  1145 ;; This function is called by:
  1146 ;;		_pic_loop
  1147 ;; This function uses a non-reentrant model
  1148 ;;
  1149                           
  1150     0389                     _read_potentiometer:	
  1151                           ;psect for function _read_potentiometer
  1152                           
  1153     0389                     l1009:	
  1154                           ;incstack = 0
  1155                           ; Regs used in _read_potentiometer: [wreg]
  1156                           
  1157                           
  1158                           ;src/potentiometer.c: 12:   _delay((unsigned long)((5)*(500000/4000000.0)));
  1159                           ;src/potentiometer.c: 16:   GO = 1;
  1160     0389  1283               	bcf	3,5	;RP0=0, select bank0
  1161     038A  1303               	bcf	3,6	;RP1=0, select bank0
  1162     038B  149F               	bsf	31,1	;volatile
  1163     038C                     l156:	
  1164                           ;src/potentiometer.c: 17:   while (GO) continue;
  1165                           
  1166     038C  189F               	btfsc	31,1	;volatile
  1167     038D  2B8F               	goto	u681
  1168     038E  2B90               	goto	u680
  1169     038F                     u681:
  1170     038F  2B8C               	goto	l156
  1171     0390                     u680:
  1172     0390                     l1011:
  1173                           
  1174                           ;src/potentiometer.c: 21:   int result = (ADRESH * 256) + ADRESL;
  1175     0390  081E               	movf	30,w	;volatile
  1176     0391  00A3               	movwf	read_potentiometer@result+1
  1177     0392  1683               	bsf	3,5	;RP0=1, select bank1
  1178     0393  1303               	bcf	3,6	;RP1=0, select bank1
  1179     0394  081E               	movf	30,w	;volatile
  1180     0395  1283               	bcf	3,5	;RP0=0, select bank0
  1181     0396  1303               	bcf	3,6	;RP1=0, select bank0
  1182     0397  00A2               	movwf	read_potentiometer@result
  1183                           
  1184                           ;src/potentiometer.c: 23:   return result;
  1185     0398  0823               	movf	read_potentiometer@result+1,w
  1186     0399  00A1               	movwf	?_read_potentiometer+1
  1187     039A  0822               	movf	read_potentiometer@result,w
  1188     039B  00A0               	movwf	?_read_potentiometer
  1189     039C                     l159:
  1190     039C  0008               	return
  1191     039D                     __end_of_read_potentiometer:
  1192                           
  1193                           	psect	text3
  1194     01D3                     __ptext3:	
  1195 ;; *************** function _populate_step_array *****************
  1196 ;; Defined at:
  1197 ;;		line 3 in file "src/potentiometer.c"
  1198 ;; Parameters:    Size  Location     Type
  1199 ;;  array           1    wreg     PTR int 
  1200 ;;		 -> pic_loop@stepArray(8), 
  1201 ;;  size            2    8[BANK0 ] int 
  1202 ;;  potLimit        2   10[BANK0 ] int 
  1203 ;; Auto vars:     Size  Location     Type
  1204 ;;  array           1   16[BANK0 ] PTR int 
  1205 ;;		 -> pic_loop@stepArray(8), 
  1206 ;;  i               2   14[BANK0 ] int 
  1207 ;; Return value:  Size  Location     Type
  1208 ;;                  1    wreg      void 
  1209 ;; Registers used:
  1210 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1211 ;; Tracked objects:
  1212 ;;		On entry : 0/0
  1213 ;;		On exit  : 0/0
  1214 ;;		Unchanged: 0/0
  1215 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1216 ;;      Params:         0       4       0       0       0
  1217 ;;      Locals:         0       3       0       0       0
  1218 ;;      Temps:          0       2       0       0       0
  1219 ;;      Totals:         0       9       0       0       0
  1220 ;;Total ram usage:        9 bytes
  1221 ;; Hardware stack levels used: 1
  1222 ;; Hardware stack levels required when called: 3
  1223 ;; This function calls:
  1224 ;;		___awdiv
  1225 ;;		___wmul
  1226 ;; This function is called by:
  1227 ;;		_pic_loop
  1228 ;; This function uses a non-reentrant model
  1229 ;;
  1230                           
  1231     01D3                     _populate_step_array:	
  1232                           ;psect for function _populate_step_array
  1233                           
  1234                           
  1235                           ;incstack = 0
  1236                           ; Regs used in _populate_step_array: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack
      +                          ]
  1237                           ;populate_step_array@array stored from wreg
  1238     01D3  1283               	bcf	3,5	;RP0=0, select bank0
  1239     01D4  1303               	bcf	3,6	;RP1=0, select bank0
  1240     01D5  00B0               	movwf	populate_step_array@array
  1241     01D6                     l999:
  1242                           
  1243                           ;src/potentiometer.c: 4:   array[0] = potLimit / (size + 1);
  1244     01D6  0828               	movf	populate_step_array@size,w
  1245     01D7  3E01               	addlw	1
  1246     01D8  00A0               	movwf	___awdiv@divisor
  1247     01D9  0829               	movf	populate_step_array@size+1,w
  1248     01DA  1803               	skipnc
  1249     01DB  3E01               	addlw	1
  1250     01DC  3E00               	addlw	0
  1251     01DD  00A1               	movwf	___awdiv@divisor+1
  1252     01DE  082B               	movf	populate_step_array@potLimit+1,w
  1253     01DF  00A3               	movwf	___awdiv@dividend+1
  1254     01E0  082A               	movf	populate_step_array@potLimit,w
  1255     01E1  00A2               	movwf	___awdiv@dividend
  1256     01E2  120A  118A  216A  120A  118A  	fcall	___awdiv
  1257     01E7  1283               	bcf	3,5	;RP0=0, select bank0
  1258     01E8  1303               	bcf	3,6	;RP1=0, select bank0
  1259     01E9  0830               	movf	populate_step_array@array,w
  1260     01EA  0084               	movwf	4
  1261     01EB  0820               	movf	?___awdiv,w
  1262     01EC  1383               	bcf	3,7	;select IRP bank0
  1263     01ED  0080               	movwf	0
  1264     01EE  0A84               	incf	4,f
  1265     01EF  0821               	movf	?___awdiv+1,w
  1266     01F0  0080               	movwf	0
  1267     01F1                     l1001:
  1268                           
  1269                           ;src/potentiometer.c: 5:   for (int i = 0; i < size; i++){
  1270     01F1  01AE               	clrf	populate_step_array@i
  1271     01F2  01AF               	clrf	populate_step_array@i+1
  1272     01F3  2A20               	goto	l1007
  1273     01F4                     l1003:
  1274                           
  1275                           ;src/potentiometer.c: 6:     array[i] = array[0] * (i + 1);
  1276     01F4  1283               	bcf	3,5	;RP0=0, select bank0
  1277     01F5  1303               	bcf	3,6	;RP1=0, select bank0
  1278     01F6  082E               	movf	populate_step_array@i,w
  1279     01F7  3E01               	addlw	1
  1280     01F8  00A0               	movwf	___wmul@multiplier
  1281     01F9  082F               	movf	populate_step_array@i+1,w
  1282     01FA  1803               	skipnc
  1283     01FB  3E01               	addlw	1
  1284     01FC  3E00               	addlw	0
  1285     01FD  00A1               	movwf	___wmul@multiplier+1
  1286     01FE  0830               	movf	populate_step_array@array,w
  1287     01FF  0084               	movwf	4
  1288     0200  1383               	bcf	3,7	;select IRP bank0
  1289     0201  0800               	movf	0,w
  1290     0202  00A2               	movwf	___wmul@multiplicand
  1291     0203  0A84               	incf	4,f
  1292     0204  0800               	movf	0,w
  1293     0205  00A3               	movwf	___wmul@multiplicand+1
  1294     0206  120A  118A  234A  120A  118A  	fcall	___wmul
  1295     020B  1283               	bcf	3,5	;RP0=0, select bank0
  1296     020C  1303               	bcf	3,6	;RP1=0, select bank0
  1297     020D  082E               	movf	populate_step_array@i,w
  1298     020E  00AC               	movwf	??_populate_step_array
  1299     020F  072C               	addwf	??_populate_step_array,w
  1300     0210  0730               	addwf	populate_step_array@array,w
  1301     0211  00AD               	movwf	??_populate_step_array+1
  1302     0212  082D               	movf	??_populate_step_array+1,w
  1303     0213  0084               	movwf	4
  1304     0214  0820               	movf	?___wmul,w
  1305     0215  1383               	bcf	3,7	;select IRP bank0
  1306     0216  0080               	movwf	0
  1307     0217  0A84               	incf	4,f
  1308     0218  0821               	movf	?___wmul+1,w
  1309     0219  0080               	movwf	0
  1310     021A                     l1005:
  1311                           
  1312                           ;src/potentiometer.c: 7:   }
  1313     021A  3001               	movlw	1
  1314     021B  07AE               	addwf	populate_step_array@i,f
  1315     021C  1803               	skipnc
  1316     021D  0AAF               	incf	populate_step_array@i+1,f
  1317     021E  3000               	movlw	0
  1318     021F  07AF               	addwf	populate_step_array@i+1,f
  1319     0220                     l1007:
  1320     0220  082F               	movf	populate_step_array@i+1,w
  1321     0221  3A80               	xorlw	128
  1322     0222  00AC               	movwf	??_populate_step_array
  1323     0223  0829               	movf	populate_step_array@size+1,w
  1324     0224  3A80               	xorlw	128
  1325     0225  022C               	subwf	??_populate_step_array,w
  1326     0226  1D03               	skipz
  1327     0227  2A2A               	goto	u675
  1328     0228  0828               	movf	populate_step_array@size,w
  1329     0229  022E               	subwf	populate_step_array@i,w
  1330     022A                     u675:
  1331     022A  1C03               	skipc
  1332     022B  2A2D               	goto	u671
  1333     022C  2A2E               	goto	u670
  1334     022D                     u671:
  1335     022D  29F4               	goto	l1003
  1336     022E                     u670:
  1337     022E                     l153:
  1338     022E  0008               	return
  1339     022F                     __end_of_populate_step_array:
  1340                           
  1341                           	psect	text4
  1342     034A                     __ptext4:	
  1343 ;; *************** function ___wmul *****************
  1344 ;; Defined at:
  1345 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\Umul16.c"
  1346 ;; Parameters:    Size  Location     Type
  1347 ;;  multiplier      2    0[BANK0 ] unsigned int 
  1348 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  1349 ;; Auto vars:     Size  Location     Type
  1350 ;;  product         2    4[BANK0 ] unsigned int 
  1351 ;; Return value:  Size  Location     Type
  1352 ;;                  2    0[BANK0 ] unsigned int 
  1353 ;; Registers used:
  1354 ;;		wreg, status,2, status,0
  1355 ;; Tracked objects:
  1356 ;;		On entry : 0/0
  1357 ;;		On exit  : 0/0
  1358 ;;		Unchanged: 0/0
  1359 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1360 ;;      Params:         0       4       0       0       0
  1361 ;;      Locals:         0       2       0       0       0
  1362 ;;      Temps:          0       0       0       0       0
  1363 ;;      Totals:         0       6       0       0       0
  1364 ;;Total ram usage:        6 bytes
  1365 ;; Hardware stack levels used: 1
  1366 ;; Hardware stack levels required when called: 2
  1367 ;; This function calls:
  1368 ;;		Nothing
  1369 ;; This function is called by:
  1370 ;;		_populate_step_array
  1371 ;; This function uses a non-reentrant model
  1372 ;;
  1373                           
  1374     034A                     ___wmul:	
  1375                           ;psect for function ___wmul
  1376                           
  1377     034A                     l913:	
  1378                           ;incstack = 0
  1379                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  1380                           
  1381     034A  1283               	bcf	3,5	;RP0=0, select bank0
  1382     034B  1303               	bcf	3,6	;RP1=0, select bank0
  1383     034C  01A4               	clrf	___wmul@product
  1384     034D  01A5               	clrf	___wmul@product+1
  1385     034E                     l915:
  1386     034E  1C20               	btfss	___wmul@multiplier,0
  1387     034F  2B51               	goto	u471
  1388     0350  2B52               	goto	u470
  1389     0351                     u471:
  1390     0351  2B58               	goto	l245
  1391     0352                     u470:
  1392     0352                     l917:
  1393     0352  0822               	movf	___wmul@multiplicand,w
  1394     0353  07A4               	addwf	___wmul@product,f
  1395     0354  1803               	skipnc
  1396     0355  0AA5               	incf	___wmul@product+1,f
  1397     0356  0823               	movf	___wmul@multiplicand+1,w
  1398     0357  07A5               	addwf	___wmul@product+1,f
  1399     0358                     l245:
  1400     0358  3001               	movlw	1
  1401     0359                     u485:
  1402     0359  1003               	clrc
  1403     035A  0DA2               	rlf	___wmul@multiplicand,f
  1404     035B  0DA3               	rlf	___wmul@multiplicand+1,f
  1405     035C  3EFF               	addlw	-1
  1406     035D  1D03               	skipz
  1407     035E  2B59               	goto	u485
  1408     035F                     l919:
  1409     035F  3001               	movlw	1
  1410     0360                     u495:
  1411     0360  1003               	clrc
  1412     0361  0CA1               	rrf	___wmul@multiplier+1,f
  1413     0362  0CA0               	rrf	___wmul@multiplier,f
  1414     0363  3EFF               	addlw	-1
  1415     0364  1D03               	skipz
  1416     0365  2B60               	goto	u495
  1417     0366                     l921:
  1418     0366  0820               	movf	___wmul@multiplier,w
  1419     0367  0421               	iorwf	___wmul@multiplier+1,w
  1420     0368  1D03               	btfss	3,2
  1421     0369  2B6B               	goto	u501
  1422     036A  2B6C               	goto	u500
  1423     036B                     u501:
  1424     036B  2B4E               	goto	l915
  1425     036C                     u500:
  1426     036C                     l923:
  1427     036C  0825               	movf	___wmul@product+1,w
  1428     036D  00A1               	movwf	?___wmul+1
  1429     036E  0824               	movf	___wmul@product,w
  1430     036F  00A0               	movwf	?___wmul
  1431     0370                     l247:
  1432     0370  0008               	return
  1433     0371                     __end_of___wmul:
  1434                           
  1435                           	psect	text5
  1436     016A                     __ptext5:	
  1437 ;; *************** function ___awdiv *****************
  1438 ;; Defined at:
  1439 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\awdiv.c"
  1440 ;; Parameters:    Size  Location     Type
  1441 ;;  divisor         2    0[BANK0 ] int 
  1442 ;;  dividend        2    2[BANK0 ] int 
  1443 ;; Auto vars:     Size  Location     Type
  1444 ;;  quotient        2    6[BANK0 ] int 
  1445 ;;  sign            1    5[BANK0 ] unsigned char 
  1446 ;;  counter         1    4[BANK0 ] unsigned char 
  1447 ;; Return value:  Size  Location     Type
  1448 ;;                  2    0[BANK0 ] int 
  1449 ;; Registers used:
  1450 ;;		wreg, status,2, status,0, btemp+1
  1451 ;; Tracked objects:
  1452 ;;		On entry : 0/0
  1453 ;;		On exit  : 0/0
  1454 ;;		Unchanged: 0/0
  1455 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1456 ;;      Params:         0       4       0       0       0
  1457 ;;      Locals:         0       4       0       0       0
  1458 ;;      Temps:          0       0       0       0       0
  1459 ;;      Totals:         0       8       0       0       0
  1460 ;;Total ram usage:        8 bytes
  1461 ;; Hardware stack levels used: 1
  1462 ;; Hardware stack levels required when called: 2
  1463 ;; This function calls:
  1464 ;;		Nothing
  1465 ;; This function is called by:
  1466 ;;		_populate_step_array
  1467 ;; This function uses a non-reentrant model
  1468 ;;
  1469                           
  1470     016A                     ___awdiv:	
  1471                           ;psect for function ___awdiv
  1472                           
  1473     016A                     l927:	
  1474                           ;incstack = 0
  1475                           ; Regs used in ___awdiv: [wreg+status,2+status,0+btemp+1]
  1476                           
  1477     016A  1283               	bcf	3,5	;RP0=0, select bank0
  1478     016B  1303               	bcf	3,6	;RP1=0, select bank0
  1479     016C  01A5               	clrf	___awdiv@sign
  1480     016D                     l929:
  1481     016D  1FA1               	btfss	___awdiv@divisor+1,7
  1482     016E  2970               	goto	u511
  1483     016F  2971               	goto	u510
  1484     0170                     u511:
  1485     0170  2978               	goto	l935
  1486     0171                     u510:
  1487     0171                     l931:
  1488     0171  09A0               	comf	___awdiv@divisor,f
  1489     0172  09A1               	comf	___awdiv@divisor+1,f
  1490     0173  0AA0               	incf	___awdiv@divisor,f
  1491     0174  1903               	skipnz
  1492     0175  0AA1               	incf	___awdiv@divisor+1,f
  1493     0176                     l933:
  1494     0176  01A5               	clrf	___awdiv@sign
  1495     0177  0AA5               	incf	___awdiv@sign,f
  1496     0178                     l935:
  1497     0178  1FA3               	btfss	___awdiv@dividend+1,7
  1498     0179  297B               	goto	u521
  1499     017A  297C               	goto	u520
  1500     017B                     u521:
  1501     017B  2985               	goto	l941
  1502     017C                     u520:
  1503     017C                     l937:
  1504     017C  09A2               	comf	___awdiv@dividend,f
  1505     017D  09A3               	comf	___awdiv@dividend+1,f
  1506     017E  0AA2               	incf	___awdiv@dividend,f
  1507     017F  1903               	skipnz
  1508     0180  0AA3               	incf	___awdiv@dividend+1,f
  1509     0181                     l939:
  1510     0181  3001               	movlw	1
  1511     0182  00FF               	movwf	btemp+1
  1512     0183  087F               	movf	btemp+1,w
  1513     0184  06A5               	xorwf	___awdiv@sign,f
  1514     0185                     l941:
  1515     0185  01A6               	clrf	___awdiv@quotient
  1516     0186  01A7               	clrf	___awdiv@quotient+1
  1517     0187                     l943:
  1518     0187  0820               	movf	___awdiv@divisor,w
  1519     0188  0421               	iorwf	___awdiv@divisor+1,w
  1520     0189  1903               	btfsc	3,2
  1521     018A  298C               	goto	u531
  1522     018B  298D               	goto	u530
  1523     018C                     u531:
  1524     018C  29C4               	goto	l963
  1525     018D                     u530:
  1526     018D                     l945:
  1527     018D  01A4               	clrf	___awdiv@counter
  1528     018E  0AA4               	incf	___awdiv@counter,f
  1529     018F  299B               	goto	l951
  1530     0190                     l947:
  1531     0190  3001               	movlw	1
  1532     0191                     u545:
  1533     0191  1003               	clrc
  1534     0192  0DA0               	rlf	___awdiv@divisor,f
  1535     0193  0DA1               	rlf	___awdiv@divisor+1,f
  1536     0194  3EFF               	addlw	-1
  1537     0195  1D03               	skipz
  1538     0196  2991               	goto	u545
  1539     0197                     l949:
  1540     0197  3001               	movlw	1
  1541     0198  00FF               	movwf	btemp+1
  1542     0199  087F               	movf	btemp+1,w
  1543     019A  07A4               	addwf	___awdiv@counter,f
  1544     019B                     l951:
  1545     019B  1FA1               	btfss	___awdiv@divisor+1,7
  1546     019C  299E               	goto	u551
  1547     019D  299F               	goto	u550
  1548     019E                     u551:
  1549     019E  2990               	goto	l947
  1550     019F                     u550:
  1551     019F                     l953:
  1552     019F  3001               	movlw	1
  1553     01A0                     u565:
  1554     01A0  1003               	clrc
  1555     01A1  0DA6               	rlf	___awdiv@quotient,f
  1556     01A2  0DA7               	rlf	___awdiv@quotient+1,f
  1557     01A3  3EFF               	addlw	-1
  1558     01A4  1D03               	skipz
  1559     01A5  29A0               	goto	u565
  1560     01A6  0821               	movf	___awdiv@divisor+1,w
  1561     01A7  0223               	subwf	___awdiv@dividend+1,w
  1562     01A8  1D03               	skipz
  1563     01A9  29AC               	goto	u575
  1564     01AA  0820               	movf	___awdiv@divisor,w
  1565     01AB  0222               	subwf	___awdiv@dividend,w
  1566     01AC                     u575:
  1567     01AC  1C03               	skipc
  1568     01AD  29AF               	goto	u571
  1569     01AE  29B0               	goto	u570
  1570     01AF                     u571:
  1571     01AF  29B7               	goto	l959
  1572     01B0                     u570:
  1573     01B0                     l955:
  1574     01B0  0820               	movf	___awdiv@divisor,w
  1575     01B1  02A2               	subwf	___awdiv@dividend,f
  1576     01B2  0821               	movf	___awdiv@divisor+1,w
  1577     01B3  1C03               	skipc
  1578     01B4  03A3               	decf	___awdiv@dividend+1,f
  1579     01B5  02A3               	subwf	___awdiv@dividend+1,f
  1580     01B6                     l957:
  1581     01B6  1426               	bsf	___awdiv@quotient,0
  1582     01B7                     l959:
  1583     01B7  3001               	movlw	1
  1584     01B8                     u585:
  1585     01B8  1003               	clrc
  1586     01B9  0CA1               	rrf	___awdiv@divisor+1,f
  1587     01BA  0CA0               	rrf	___awdiv@divisor,f
  1588     01BB  3EFF               	addlw	-1
  1589     01BC  1D03               	skipz
  1590     01BD  29B8               	goto	u585
  1591     01BE                     l961:
  1592     01BE  3001               	movlw	1
  1593     01BF  02A4               	subwf	___awdiv@counter,f
  1594     01C0  1D03               	btfss	3,2
  1595     01C1  29C3               	goto	u591
  1596     01C2  29C4               	goto	u590
  1597     01C3                     u591:
  1598     01C3  299F               	goto	l953
  1599     01C4                     u590:
  1600     01C4                     l963:
  1601     01C4  0825               	movf	___awdiv@sign,w
  1602     01C5  1903               	btfsc	3,2
  1603     01C6  29C8               	goto	u601
  1604     01C7  29C9               	goto	u600
  1605     01C8                     u601:
  1606     01C8  29CE               	goto	l967
  1607     01C9                     u600:
  1608     01C9                     l965:
  1609     01C9  09A6               	comf	___awdiv@quotient,f
  1610     01CA  09A7               	comf	___awdiv@quotient+1,f
  1611     01CB  0AA6               	incf	___awdiv@quotient,f
  1612     01CC  1903               	skipnz
  1613     01CD  0AA7               	incf	___awdiv@quotient+1,f
  1614     01CE                     l967:
  1615     01CE  0827               	movf	___awdiv@quotient+1,w
  1616     01CF  00A1               	movwf	?___awdiv+1
  1617     01D0  0826               	movf	___awdiv@quotient,w
  1618     01D1  00A0               	movwf	?___awdiv
  1619     01D2                     l398:
  1620     01D2  0008               	return
  1621     01D3                     __end_of___awdiv:
  1622                           
  1623                           	psect	text6
  1624     00DD                     __ptext6:	
  1625 ;; *************** function _pic_init *****************
  1626 ;; Defined at:
  1627 ;;		line 48 in file "src/main.c"
  1628 ;; Parameters:    Size  Location     Type
  1629 ;;		None
  1630 ;; Auto vars:     Size  Location     Type
  1631 ;;  pin_config     24   12[BANK0 ] struct .[3]
  1632 ;;  adc_config      7   36[BANK0 ] struct .
  1633 ;;  int_config      6   43[BANK0 ] struct .
  1634 ;;  osc_config      3   49[BANK0 ] struct .
  1635 ;; Return value:  Size  Location     Type
  1636 ;;                  1    wreg      void 
  1637 ;; Registers used:
  1638 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1639 ;; Tracked objects:
  1640 ;;		On entry : 0/0
  1641 ;;		On exit  : 0/0
  1642 ;;		Unchanged: 0/0
  1643 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1644 ;;      Params:         0       0       0       0       0
  1645 ;;      Locals:         0      40       0       0       0
  1646 ;;      Temps:          0       4       0       0       0
  1647 ;;      Totals:         0      44       0       0       0
  1648 ;;Total ram usage:       44 bytes
  1649 ;; Hardware stack levels used: 1
  1650 ;; Hardware stack levels required when called: 3
  1651 ;; This function calls:
  1652 ;;		_init_adc
  1653 ;;		_init_gpio
  1654 ;;		_init_int
  1655 ;;		_init_osc
  1656 ;; This function is called by:
  1657 ;;		_main
  1658 ;; This function uses a non-reentrant model
  1659 ;;
  1660                           
  1661     00DD                     _pic_init:	
  1662                           ;psect for function _pic_init
  1663                           
  1664     00DD                     l1031:	
  1665                           ;incstack = 0
  1666                           ; Regs used in _pic_init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1667                           
  1668                           
  1669                           ;src/main.c: 49:   ADCConfig adc_config = { ADC_ON, ADC_RIGHT, ADC_AN07, ADC_FOSC02,
  1670     00DD  3044               	movlw	pic_init@adc_config& (0+255)
  1671     00DE  0084               	movwf	4
  1672     00DF  3054               	movlw	low pic_init@F1593
  1673     00E0  1283               	bcf	3,5	;RP0=0, select bank0
  1674     00E1  1303               	bcf	3,6	;RP1=0, select bank0
  1675     00E2  00A8               	movwf	??_pic_init
  1676     00E3  0804               	movf	4,w
  1677     00E4  00A9               	movwf	??_pic_init+1
  1678     00E5  3007               	movlw	7
  1679     00E6  00AA               	movwf	??_pic_init+2
  1680     00E7                     u690:
  1681     00E7  0828               	movf	??_pic_init,w
  1682     00E8  0084               	movwf	4
  1683     00E9  1383               	bcf	3,7	;select IRP bank0
  1684     00EA  0800               	movf	0,w
  1685     00EB  00AB               	movwf	??_pic_init+3
  1686     00EC  0AA8               	incf	??_pic_init,f
  1687     00ED  0829               	movf	??_pic_init+1,w
  1688     00EE  0084               	movwf	4
  1689     00EF  082B               	movf	??_pic_init+3,w
  1690     00F0  0080               	movwf	0
  1691     00F1  0AA9               	incf	??_pic_init+1,f
  1692     00F2  0BAA               	decfsz	??_pic_init+2,f
  1693     00F3  28E7               	goto	u690
  1694     00F4                     l1033:
  1695                           
  1696                           ;src/main.c: 51:   OscillatorConfig osc_config = { INTERNAL_CLK, KHZ500, INTERNAL_FOSC }
      +                          ;
  1697     00F4  0861               	movf	pic_init@F1595,w
  1698     00F5  00D1               	movwf	pic_init@osc_config
  1699     00F6  0862               	movf	pic_init@F1595+1,w
  1700     00F7  00D2               	movwf	pic_init@osc_config+1
  1701     00F8  0863               	movf	pic_init@F1595+2,w
  1702     00F9  00D3               	movwf	pic_init@osc_config+2
  1703     00FA                     l1035:
  1704                           
  1705                           ;src/main.c: 52:   InterruptConfig int_config = { GIE_ENABLED, EINT_ENABLED, PEIE_DISABL
      +                          ED,
  1706     00FA  304B               	movlw	pic_init@int_config& (0+255)
  1707     00FB  0084               	movwf	4
  1708     00FC  085B               	movf	pic_init@F1597,w
  1709     00FD  0080               	movwf	0
  1710     00FE  0A84               	incf	4,f
  1711     00FF  085C               	movf	pic_init@F1597+1,w
  1712     0100  0080               	movwf	0
  1713     0101  0A84               	incf	4,f
  1714     0102  085D               	movf	pic_init@F1597+2,w
  1715     0103  0080               	movwf	0
  1716     0104  0A84               	incf	4,f
  1717     0105  085E               	movf	pic_init@F1597+3,w
  1718     0106  0080               	movwf	0
  1719     0107  0A84               	incf	4,f
  1720     0108  085F               	movf	pic_init@F1597+4,w
  1721     0109  0080               	movwf	0
  1722     010A  0A84               	incf	4,f
  1723     010B  0860               	movf	pic_init@F1597+5,w
  1724     010C  0080               	movwf	0
  1725     010D                     l1037:
  1726                           
  1727                           ;src/main.c: 55:   PinConfig pin_config[] = {
  1728     010D  302C               	movlw	pic_init@pin_config& (0+255)
  1729     010E  0084               	movwf	4
  1730     010F  30A0               	movlw	low pic_init@F1599
  1731     0110  00A8               	movwf	??_pic_init
  1732     0111  0804               	movf	4,w
  1733     0112  00A9               	movwf	??_pic_init+1
  1734     0113  3018               	movlw	24
  1735     0114  00AA               	movwf	??_pic_init+2
  1736     0115                     u700:
  1737     0115  0828               	movf	??_pic_init,w
  1738     0116  0084               	movwf	4
  1739     0117  1383               	bcf	3,7	;select IRP bank1
  1740     0118  0800               	movf	0,w
  1741     0119  00AB               	movwf	??_pic_init+3
  1742     011A  0AA8               	incf	??_pic_init,f
  1743     011B  0829               	movf	??_pic_init+1,w
  1744     011C  0084               	movwf	4
  1745     011D  082B               	movf	??_pic_init+3,w
  1746     011E  0080               	movwf	0
  1747     011F  0AA9               	incf	??_pic_init+1,f
  1748     0120  0BAA               	decfsz	??_pic_init+2,f
  1749     0121  2915               	goto	u700
  1750     0122                     l1039:
  1751                           
  1752                           ;src/main.c: 62:   init_osc(osc_config);
  1753     0122  0851               	movf	pic_init@osc_config,w
  1754     0123  00A0               	movwf	init_osc@config
  1755     0124  0852               	movf	pic_init@osc_config+1,w
  1756     0125  00A1               	movwf	init_osc@config+1
  1757     0126  0853               	movf	pic_init@osc_config+2,w
  1758     0127  00A2               	movwf	init_osc@config+2
  1759     0128  120A  118A  22E6  120A  118A  	fcall	_init_osc
  1760     012D                     l1041:
  1761                           
  1762                           ;src/main.c: 63:   init_int(int_config);
  1763     012D  3020               	movlw	init_int@config& (0+255)
  1764     012E  0084               	movwf	4
  1765     012F  1283               	bcf	3,5	;RP0=0, select bank0
  1766     0130  1303               	bcf	3,6	;RP1=0, select bank0
  1767     0131  084B               	movf	pic_init@int_config,w
  1768     0132  1383               	bcf	3,7	;select IRP bank0
  1769     0133  0080               	movwf	0
  1770     0134  0A84               	incf	4,f
  1771     0135  084C               	movf	pic_init@int_config+1,w
  1772     0136  0080               	movwf	0
  1773     0137  0A84               	incf	4,f
  1774     0138  084D               	movf	pic_init@int_config+2,w
  1775     0139  0080               	movwf	0
  1776     013A  0A84               	incf	4,f
  1777     013B  084E               	movf	pic_init@int_config+3,w
  1778     013C  0080               	movwf	0
  1779     013D  0A84               	incf	4,f
  1780     013E  084F               	movf	pic_init@int_config+4,w
  1781     013F  0080               	movwf	0
  1782     0140  0A84               	incf	4,f
  1783     0141  0850               	movf	pic_init@int_config+5,w
  1784     0142  0080               	movwf	0
  1785     0143  120A  118A  22AE  120A  118A  	fcall	_init_int
  1786     0148                     l1043:
  1787                           
  1788                           ;src/main.c: 64:   init_adc(adc_config);
  1789     0148  3020               	movlw	init_adc@config& (0+255)
  1790     0149  0084               	movwf	4
  1791     014A  3044               	movlw	low pic_init@adc_config
  1792     014B  1283               	bcf	3,5	;RP0=0, select bank0
  1793     014C  1303               	bcf	3,6	;RP1=0, select bank0
  1794     014D  00A8               	movwf	??_pic_init
  1795     014E  0804               	movf	4,w
  1796     014F  00A9               	movwf	??_pic_init+1
  1797     0150  3007               	movlw	7
  1798     0151  00AA               	movwf	??_pic_init+2
  1799     0152                     u710:
  1800     0152  0828               	movf	??_pic_init,w
  1801     0153  0084               	movwf	4
  1802     0154  1383               	bcf	3,7	;select IRP bank0
  1803     0155  0800               	movf	0,w
  1804     0156  00AB               	movwf	??_pic_init+3
  1805     0157  0AA8               	incf	??_pic_init,f
  1806     0158  0829               	movf	??_pic_init+1,w
  1807     0159  0084               	movwf	4
  1808     015A  082B               	movf	??_pic_init+3,w
  1809     015B  0080               	movwf	0
  1810     015C  0AA9               	incf	??_pic_init+1,f
  1811     015D  0BAA               	decfsz	??_pic_init+2,f
  1812     015E  2952               	goto	u710
  1813     015F  120A  118A  2275  120A  118A  	fcall	_init_adc
  1814     0164                     l1045:
  1815                           
  1816                           ;src/main.c: 66:   init_gpio();
  1817     0164  120A  118A  23B0  120A  118A  	fcall	_init_gpio
  1818     0169                     l114:
  1819     0169  0008               	return
  1820     016A                     __end_of_pic_init:
  1821                           
  1822                           	psect	text7
  1823     02E6                     __ptext7:	
  1824 ;; *************** function _init_osc *****************
  1825 ;; Defined at:
  1826 ;;		line 48 in file "src/initialisation.c"
  1827 ;; Parameters:    Size  Location     Type
  1828 ;;  config          3    0[BANK0 ] struct .
  1829 ;; Auto vars:     Size  Location     Type
  1830 ;;		None
  1831 ;; Return value:  Size  Location     Type
  1832 ;;                  1    wreg      void 
  1833 ;; Registers used:
  1834 ;;		wreg, status,2, status,0
  1835 ;; Tracked objects:
  1836 ;;		On entry : 0/0
  1837 ;;		On exit  : 0/0
  1838 ;;		Unchanged: 0/0
  1839 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1840 ;;      Params:         0       3       0       0       0
  1841 ;;      Locals:         0       0       0       0       0
  1842 ;;      Temps:          0       1       0       0       0
  1843 ;;      Totals:         0       4       0       0       0
  1844 ;;Total ram usage:        4 bytes
  1845 ;; Hardware stack levels used: 1
  1846 ;; Hardware stack levels required when called: 2
  1847 ;; This function calls:
  1848 ;;		Nothing
  1849 ;; This function is called by:
  1850 ;;		_pic_init
  1851 ;; This function uses a non-reentrant model
  1852 ;;
  1853                           
  1854     02E6                     _init_osc:	
  1855                           ;psect for function _init_osc
  1856                           
  1857     02E6                     l971:	
  1858                           ;incstack = 0
  1859                           ; Regs used in _init_osc: [wreg+status,2+status,0]
  1860                           
  1861                           
  1862                           ;src/initialisation.c: 50:   OSCCONbits.SCS = config.SCS;
  1863     02E6  1283               	bcf	3,5	;RP0=0, select bank0
  1864     02E7  1303               	bcf	3,6	;RP1=0, select bank0
  1865     02E8  0C20               	rrf	init_osc@config,w
  1866     02E9  1683               	bsf	3,5	;RP0=1, select bank1
  1867     02EA  1303               	bcf	3,6	;RP1=0, select bank1
  1868     02EB  1C03               	skipc
  1869     02EC  100F               	bcf	15,0	;volatile
  1870     02ED  1803               	skipnc
  1871     02EE  140F               	bsf	15,0	;volatile
  1872     02EF                     l973:
  1873                           
  1874                           ;src/initialisation.c: 52:   OSCCONbits.IRCF = config.IRCF;
  1875     02EF  1283               	bcf	3,5	;RP0=0, select bank0
  1876     02F0  1303               	bcf	3,6	;RP1=0, select bank0
  1877     02F1  0821               	movf	init_osc@config+1,w
  1878     02F2  00A3               	movwf	??_init_osc
  1879     02F3  0EA3               	swapf	??_init_osc,f
  1880     02F4  1683               	bsf	3,5	;RP0=1, select bank1
  1881     02F5  1303               	bcf	3,6	;RP1=0, select bank1
  1882     02F6  080F               	movf	15,w	;volatile
  1883     02F7  1283               	bcf	3,5	;RP0=0, select bank0
  1884     02F8  1303               	bcf	3,6	;RP1=0, select bank0
  1885     02F9  0623               	xorwf	??_init_osc,w
  1886     02FA  398F               	andlw	-113
  1887     02FB  0623               	xorwf	??_init_osc,w
  1888     02FC  1683               	bsf	3,5	;RP0=1, select bank1
  1889     02FD  1303               	bcf	3,6	;RP1=0, select bank1
  1890     02FE  008F               	movwf	15	;volatile
  1891     02FF                     l975:
  1892                           
  1893                           ;src/initialisation.c: 54:   OSCCONbits.OSTS = config.OSTS;
  1894     02FF  1283               	bcf	3,5	;RP0=0, select bank0
  1895     0300  1303               	bcf	3,6	;RP1=0, select bank0
  1896     0301  0C22               	rrf	init_osc@config+2,w
  1897     0302  1683               	bsf	3,5	;RP0=1, select bank1
  1898     0303  1303               	bcf	3,6	;RP1=0, select bank1
  1899     0304  1C03               	skipc
  1900     0305  118F               	bcf	15,3	;volatile
  1901     0306  1803               	skipnc
  1902     0307  158F               	bsf	15,3	;volatile
  1903                           
  1904                           ;src/initialisation.c: 57:   if (OSCCONbits.IRCF == KHZ032) {
  1905     0308  0E0F               	swapf	15,w	;volatile
  1906     0309  3907               	andlw	7
  1907     030A  3A00               	xorlw	0
  1908     030B  1D03               	skipz
  1909     030C  2B0E               	goto	u611
  1910     030D  2B0F               	goto	u610
  1911     030E                     u611:
  1912     030E  2B14               	goto	l27
  1913     030F                     u610:
  1914     030F                     l23:
  1915     030F  1C8F               	btfss	15,1	;volatile
  1916     0310  2B12               	goto	u621
  1917     0311  2B13               	goto	u620
  1918     0312                     u621:
  1919     0312  2B0F               	goto	l23
  1920     0313                     u620:
  1921     0313  2B18               	goto	l30
  1922     0314                     l27:
  1923     0314  1D0F               	btfss	15,2	;volatile
  1924     0315  2B17               	goto	u631
  1925     0316  2B18               	goto	u630
  1926     0317                     u631:
  1927     0317  2B14               	goto	l27
  1928     0318                     u630:
  1929     0318                     l30:
  1930     0318  0008               	return
  1931     0319                     __end_of_init_osc:
  1932                           
  1933                           	psect	text8
  1934     02AE                     __ptext8:	
  1935 ;; *************** function _init_int *****************
  1936 ;; Defined at:
  1937 ;;		line 75 in file "src/initialisation.c"
  1938 ;; Parameters:    Size  Location     Type
  1939 ;;  config          6    0[BANK0 ] struct .
  1940 ;; Auto vars:     Size  Location     Type
  1941 ;;		None
  1942 ;; Return value:  Size  Location     Type
  1943 ;;                  1    wreg      void 
  1944 ;; Registers used:
  1945 ;;		wreg, status,0
  1946 ;; Tracked objects:
  1947 ;;		On entry : 0/0
  1948 ;;		On exit  : 0/0
  1949 ;;		Unchanged: 0/0
  1950 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1951 ;;      Params:         0       6       0       0       0
  1952 ;;      Locals:         0       0       0       0       0
  1953 ;;      Temps:          0       0       0       0       0
  1954 ;;      Totals:         0       6       0       0       0
  1955 ;;Total ram usage:        6 bytes
  1956 ;; Hardware stack levels used: 1
  1957 ;; Hardware stack levels required when called: 2
  1958 ;; This function calls:
  1959 ;;		Nothing
  1960 ;; This function is called by:
  1961 ;;		_pic_init
  1962 ;; This function uses a non-reentrant model
  1963 ;;
  1964                           
  1965     02AE                     _init_int:	
  1966                           ;psect for function _init_int
  1967                           
  1968     02AE                     l979:	
  1969                           ;incstack = 0
  1970                           ; Regs used in _init_int: [wreg+status,0]
  1971                           
  1972                           
  1973                           ;src/initialisation.c: 77:   INTCONbits.GIE = config.GIE;
  1974     02AE  1283               	bcf	3,5	;RP0=0, select bank0
  1975     02AF  1303               	bcf	3,6	;RP1=0, select bank0
  1976     02B0  0C20               	rrf	init_int@config,w
  1977     02B1  1C03               	skipc
  1978     02B2  138B               	bcf	11,7	;volatile
  1979     02B3  1803               	skipnc
  1980     02B4  178B               	bsf	11,7	;volatile
  1981                           
  1982                           ;src/initialisation.c: 79:   INTCONbits.INTE = config.EINT;
  1983     02B5  0C21               	rrf	init_int@config+1,w
  1984     02B6  1C03               	skipc
  1985     02B7  120B               	bcf	11,4	;volatile
  1986     02B8  1803               	skipnc
  1987     02B9  160B               	bsf	11,4	;volatile
  1988                           
  1989                           ;src/initialisation.c: 82:   INTCONbits.PEIE = config.PEIE;
  1990     02BA  0C22               	rrf	init_int@config+2,w
  1991     02BB  1C03               	skipc
  1992     02BC  130B               	bcf	11,6	;volatile
  1993     02BD  1803               	skipnc
  1994     02BE  170B               	bsf	11,6	;volatile
  1995                           
  1996                           ;src/initialisation.c: 84:   INTCONbits.T0IE = config.T0IE;
  1997     02BF  0C23               	rrf	init_int@config+3,w
  1998     02C0  1C03               	skipc
  1999     02C1  128B               	bcf	11,5	;volatile
  2000     02C2  1803               	skipnc
  2001     02C3  168B               	bsf	11,5	;volatile
  2002                           
  2003                           ;src/initialisation.c: 87:   INTCONbits.RBIE = config.RBIE;
  2004     02C4  0C24               	rrf	init_int@config+4,w
  2005     02C5  1C03               	skipc
  2006     02C6  118B               	bcf	11,3	;volatile
  2007     02C7  1803               	skipnc
  2008     02C8  158B               	bsf	11,3	;volatile
  2009     02C9                     l981:
  2010                           
  2011                           ;src/initialisation.c: 90:   IOCBbits.IOCB4 = 1;
  2012     02C9  1683               	bsf	3,5	;RP0=1, select bank1
  2013     02CA  1303               	bcf	3,6	;RP1=0, select bank1
  2014     02CB  1616               	bsf	22,4	;volatile
  2015     02CC                     l983:
  2016                           
  2017                           ;src/initialisation.c: 91:   IOCBbits.IOCB5 = 1;
  2018     02CC  1696               	bsf	22,5	;volatile
  2019                           
  2020                           ;src/initialisation.c: 94:   OPTION_REGbits.INTEDG = config.INTEDG;
  2021     02CD  1283               	bcf	3,5	;RP0=0, select bank0
  2022     02CE  1303               	bcf	3,6	;RP1=0, select bank0
  2023     02CF  0C25               	rrf	init_int@config+5,w
  2024     02D0  1683               	bsf	3,5	;RP0=1, select bank1
  2025     02D1  1303               	bcf	3,6	;RP1=0, select bank1
  2026     02D2  1C03               	skipc
  2027     02D3  1301               	bcf	1,6	;volatile
  2028     02D4  1803               	skipnc
  2029     02D5  1701               	bsf	1,6	;volatile
  2030     02D6                     l985:
  2031                           
  2032                           ;src/initialisation.c: 97:   if (INTCONbits.INTE == EINT_ENABLED) {
  2033     02D6  1E0B               	btfss	11,4	;volatile
  2034     02D7  2AD9               	goto	u641
  2035     02D8  2ADA               	goto	u640
  2036     02D9                     u641:
  2037     02D9  2ADB               	goto	l33
  2038     02DA                     u640:
  2039     02DA                     l987:
  2040                           
  2041                           ;src/initialisation.c: 98:     INTCONbits.INTF = INT_AWAITING;
  2042     02DA  108B               	bcf	11,1	;volatile
  2043     02DB                     l33:	
  2044                           ;src/initialisation.c: 99:   }
  2045                           
  2046                           
  2047                           ;src/initialisation.c: 100:   if (INTCONbits.RBIE == RBINT_ENABLED) {
  2048     02DB  1D8B               	btfss	11,3	;volatile
  2049     02DC  2ADE               	goto	u651
  2050     02DD  2ADF               	goto	u650
  2051     02DE                     u651:
  2052     02DE  2AE0               	goto	l34
  2053     02DF                     u650:
  2054     02DF                     l989:
  2055                           
  2056                           ;src/initialisation.c: 101:     INTCONbits.RBIF = INT_AWAITING;
  2057     02DF  100B               	bcf	11,0	;volatile
  2058     02E0                     l34:	
  2059                           ;src/initialisation.c: 102:   }
  2060                           
  2061                           
  2062                           ;src/initialisation.c: 103:   if (INTCONbits.T0IE == T0INT_ENABLED) {
  2063     02E0  1E8B               	btfss	11,5	;volatile
  2064     02E1  2AE3               	goto	u661
  2065     02E2  2AE4               	goto	u660
  2066     02E3                     u661:
  2067     02E3  2AE5               	goto	l36
  2068     02E4                     u660:
  2069     02E4                     l991:
  2070                           
  2071                           ;src/initialisation.c: 104:     INTCONbits.T0IF = INT_AWAITING;
  2072     02E4  110B               	bcf	11,2	;volatile
  2073     02E5                     l36:
  2074     02E5  0008               	return
  2075     02E6                     __end_of_init_int:
  2076                           
  2077                           	psect	text9
  2078     03B0                     __ptext9:	
  2079 ;; *************** function _init_gpio *****************
  2080 ;; Defined at:
  2081 ;;		line 71 in file "src/main.c"
  2082 ;; Parameters:    Size  Location     Type
  2083 ;;		None
  2084 ;; Auto vars:     Size  Location     Type
  2085 ;;		None
  2086 ;; Return value:  Size  Location     Type
  2087 ;;                  1    wreg      void 
  2088 ;; Registers used:
  2089 ;;		wreg, status,2
  2090 ;; Tracked objects:
  2091 ;;		On entry : 0/0
  2092 ;;		On exit  : 0/0
  2093 ;;		Unchanged: 0/0
  2094 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2095 ;;      Params:         0       0       0       0       0
  2096 ;;      Locals:         0       0       0       0       0
  2097 ;;      Temps:          0       0       0       0       0
  2098 ;;      Totals:         0       0       0       0       0
  2099 ;;Total ram usage:        0 bytes
  2100 ;; Hardware stack levels used: 1
  2101 ;; Hardware stack levels required when called: 2
  2102 ;; This function calls:
  2103 ;;		Nothing
  2104 ;; This function is called by:
  2105 ;;		_pic_init
  2106 ;; This function uses a non-reentrant model
  2107 ;;
  2108                           
  2109     03B0                     _init_gpio:	
  2110                           ;psect for function _init_gpio
  2111                           
  2112     03B0                     l1015:	
  2113                           ;incstack = 0
  2114                           ; Regs used in _init_gpio: [wreg+status,2]
  2115                           
  2116                           
  2117                           ;src/main.c: 76:   TRISA = 0;
  2118     03B0  1683               	bsf	3,5	;RP0=1, select bank1
  2119     03B1  1303               	bcf	3,6	;RP1=0, select bank1
  2120     03B2  0185               	clrf	5	;volatile
  2121     03B3                     l1017:
  2122                           
  2123                           ;src/main.c: 77:   PORTA = OFF;
  2124     03B3  3001               	movlw	1
  2125     03B4  1283               	bcf	3,5	;RP0=0, select bank0
  2126     03B5  1303               	bcf	3,6	;RP1=0, select bank0
  2127     03B6  0085               	movwf	5	;volatile
  2128     03B7                     l1019:
  2129                           
  2130                           ;src/main.c: 79:   TRISBbits.TRISB4 = 1;
  2131     03B7  1683               	bsf	3,5	;RP0=1, select bank1
  2132     03B8  1303               	bcf	3,6	;RP1=0, select bank1
  2133     03B9  1606               	bsf	6,4	;volatile
  2134     03BA                     l1021:
  2135                           
  2136                           ;src/main.c: 80:   TRISBbits.TRISB5 = 1;
  2137     03BA  1686               	bsf	6,5	;volatile
  2138     03BB                     l1023:
  2139                           
  2140                           ;src/main.c: 83:   TRISEbits.TRISE2 = 1;
  2141     03BB  1509               	bsf	9,2	;volatile
  2142     03BC                     l1025:
  2143                           
  2144                           ;src/main.c: 86:   ANSEL = 0;
  2145     03BC  1683               	bsf	3,5	;RP0=1, select bank3
  2146     03BD  1703               	bsf	3,6	;RP1=1, select bank3
  2147     03BE  0188               	clrf	8	;volatile
  2148     03BF                     l1027:
  2149                           
  2150                           ;src/main.c: 87:   ANSELH = 0;
  2151     03BF  0189               	clrf	9	;volatile
  2152     03C0                     l1029:
  2153                           
  2154                           ;src/main.c: 88:   ANSELbits.ANS7 = 1;
  2155     03C0  1788               	bsf	8,7	;volatile
  2156     03C1                     l117:
  2157     03C1  0008               	return
  2158     03C2                     __end_of_init_gpio:
  2159                           
  2160                           	psect	text10
  2161     0275                     __ptext10:	
  2162 ;; *************** function _init_adc *****************
  2163 ;; Defined at:
  2164 ;;		line 119 in file "src/initialisation.c"
  2165 ;; Parameters:    Size  Location     Type
  2166 ;;  config          7    0[BANK0 ] struct .
  2167 ;; Auto vars:     Size  Location     Type
  2168 ;;		None
  2169 ;; Return value:  Size  Location     Type
  2170 ;;                  1    wreg      void 
  2171 ;; Registers used:
  2172 ;;		wreg, status,2, status,0
  2173 ;; Tracked objects:
  2174 ;;		On entry : 0/0
  2175 ;;		On exit  : 0/0
  2176 ;;		Unchanged: 0/0
  2177 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2178 ;;      Params:         0       7       0       0       0
  2179 ;;      Locals:         0       0       0       0       0
  2180 ;;      Temps:          0       1       0       0       0
  2181 ;;      Totals:         0       8       0       0       0
  2182 ;;Total ram usage:        8 bytes
  2183 ;; Hardware stack levels used: 1
  2184 ;; Hardware stack levels required when called: 2
  2185 ;; This function calls:
  2186 ;;		Nothing
  2187 ;; This function is called by:
  2188 ;;		_pic_init
  2189 ;; This function uses a non-reentrant model
  2190 ;;
  2191                           
  2192     0275                     _init_adc:	
  2193                           ;psect for function _init_adc
  2194                           
  2195     0275                     l993:	
  2196                           ;incstack = 0
  2197                           ; Regs used in _init_adc: [wreg+status,2+status,0]
  2198                           
  2199                           
  2200                           ;src/initialisation.c: 121:   ADCON0bits.ADON = config.ADON;
  2201     0275  1283               	bcf	3,5	;RP0=0, select bank0
  2202     0276  1303               	bcf	3,6	;RP1=0, select bank0
  2203     0277  0C20               	rrf	init_adc@config,w
  2204     0278  1C03               	skipc
  2205     0279  101F               	bcf	31,0	;volatile
  2206     027A  1803               	skipnc
  2207     027B  141F               	bsf	31,0	;volatile
  2208                           
  2209                           ;src/initialisation.c: 123:   ADCON0bits.GO_nDONE = config.GO_nDONE;
  2210     027C  0C26               	rrf	init_adc@config+6,w
  2211     027D  1C03               	skipc
  2212     027E  109F               	bcf	31,1	;volatile
  2213     027F  1803               	skipnc
  2214     0280  149F               	bsf	31,1	;volatile
  2215     0281                     l995:
  2216                           
  2217                           ;src/initialisation.c: 125:   ADCON0bits.CHS = config.CHS;
  2218     0281  0822               	movf	init_adc@config+2,w
  2219     0282  00A7               	movwf	??_init_adc
  2220     0283  0DA7               	rlf	??_init_adc,f
  2221     0284  0DA7               	rlf	??_init_adc,f
  2222     0285  081F               	movf	31,w	;volatile
  2223     0286  0627               	xorwf	??_init_adc,w
  2224     0287  39C3               	andlw	-61
  2225     0288  0627               	xorwf	??_init_adc,w
  2226     0289  009F               	movwf	31	;volatile
  2227     028A                     l997:
  2228                           
  2229                           ;src/initialisation.c: 127:   ADCON0bits.ADCS = config.ADCS;
  2230     028A  0823               	movf	init_adc@config+3,w
  2231     028B  00A7               	movwf	??_init_adc
  2232     028C  0EA7               	swapf	??_init_adc,f
  2233     028D  0DA7               	rlf	??_init_adc,f
  2234     028E  0DA7               	rlf	??_init_adc,f
  2235     028F  081F               	movf	31,w	;volatile
  2236     0290  0627               	xorwf	??_init_adc,w
  2237     0291  393F               	andlw	-193
  2238     0292  0627               	xorwf	??_init_adc,w
  2239     0293  009F               	movwf	31	;volatile
  2240                           
  2241                           ;src/initialisation.c: 130:   ADCON1bits.ADFM = config.ADFM;
  2242     0294  0C21               	rrf	init_adc@config+1,w
  2243     0295  1683               	bsf	3,5	;RP0=1, select bank1
  2244     0296  1303               	bcf	3,6	;RP1=0, select bank1
  2245     0297  1C03               	skipc
  2246     0298  139F               	bcf	31,7	;volatile
  2247     0299  1803               	skipnc
  2248     029A  179F               	bsf	31,7	;volatile
  2249                           
  2250                           ;src/initialisation.c: 132:   ADCON1bits.VCFG1 = config.VCFG1;
  2251     029B  1283               	bcf	3,5	;RP0=0, select bank0
  2252     029C  1303               	bcf	3,6	;RP1=0, select bank0
  2253     029D  0C25               	rrf	init_adc@config+5,w
  2254     029E  1683               	bsf	3,5	;RP0=1, select bank1
  2255     029F  1303               	bcf	3,6	;RP1=0, select bank1
  2256     02A0  1C03               	skipc
  2257     02A1  129F               	bcf	31,5	;volatile
  2258     02A2  1803               	skipnc
  2259     02A3  169F               	bsf	31,5	;volatile
  2260                           
  2261                           ;src/initialisation.c: 133:   ADCON1bits.VCFG0 = config.VCFG0;
  2262     02A4  1283               	bcf	3,5	;RP0=0, select bank0
  2263     02A5  1303               	bcf	3,6	;RP1=0, select bank0
  2264     02A6  0C24               	rrf	init_adc@config+4,w
  2265     02A7  1683               	bsf	3,5	;RP0=1, select bank1
  2266     02A8  1303               	bcf	3,6	;RP1=0, select bank1
  2267     02A9  1C03               	skipc
  2268     02AA  121F               	bcf	31,4	;volatile
  2269     02AB  1803               	skipnc
  2270     02AC  161F               	bsf	31,4	;volatile
  2271     02AD                     l39:
  2272     02AD  0008               	return
  2273     02AE                     __end_of_init_adc:
  2274                           
  2275                           	psect	text11
  2276     0319                     __ptext11:	
  2277 ;; *************** function _isr *****************
  2278 ;; Defined at:
  2279 ;;		line 92 in file "src/main.c"
  2280 ;; Parameters:    Size  Location     Type
  2281 ;;		None
  2282 ;; Auto vars:     Size  Location     Type
  2283 ;;		None
  2284 ;; Return value:  Size  Location     Type
  2285 ;;                  1    wreg      void 
  2286 ;; Registers used:
  2287 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2288 ;; Tracked objects:
  2289 ;;		On entry : 0/0
  2290 ;;		On exit  : 0/0
  2291 ;;		Unchanged: 0/0
  2292 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2293 ;;      Params:         0       0       0       0       0
  2294 ;;      Locals:         0       0       0       0       0
  2295 ;;      Temps:          5       0       0       0       0
  2296 ;;      Totals:         5       0       0       0       0
  2297 ;;Total ram usage:        5 bytes
  2298 ;; Hardware stack levels used: 1
  2299 ;; Hardware stack levels required when called: 1
  2300 ;; This function calls:
  2301 ;;		_parse_rotary
  2302 ;; This function is called by:
  2303 ;;		Interrupt level 1
  2304 ;; This function uses a non-reentrant model
  2305 ;;
  2306                           
  2307     0319                     _isr:	
  2308                           ;psect for function _isr
  2309                           
  2310     0319                     i1l1101:
  2311                           
  2312                           ;src/main.c: 93:   if (INTCONbits.RBIF == 1) {
  2313     0319  1C0B               	btfss	11,0	;volatile
  2314     031A  2B1C               	goto	u83_21
  2315     031B  2B1D               	goto	u83_20
  2316     031C                     u83_21:
  2317     031C  2B3F               	goto	i1l123
  2318     031D                     u83_20:
  2319     031D                     i1l1103:
  2320                           
  2321                           ;src/main.c: 95:     parse_rotary(PORTBbits.RB4, PORTBbits.RB5, &count, 4, 0);
  2322     031D  3000               	movlw	0
  2323     031E  1283               	bcf	3,5	;RP0=0, select bank0
  2324     031F  1303               	bcf	3,6	;RP1=0, select bank0
  2325     0320  1A86               	btfsc	6,5	;volatile
  2326     0321  3001               	movlw	1
  2327     0322  00F0               	movwf	parse_rotary@pinB
  2328     0323  307D               	movlw	(low (_count| 0))& (0+255)
  2329     0324  00F1               	movwf	parse_rotary@counter
  2330     0325  3004               	movlw	4
  2331     0326  00F2               	movwf	parse_rotary@max
  2332     0327  01F3               	clrf	parse_rotary@min
  2333     0328  0E06               	swapf	6,w	;volatile
  2334     0329  3901               	andlw	1
  2335     032A  120A  118A  222F  120A  118A  	fcall	_parse_rotary
  2336     032F                     i1l1105:
  2337                           
  2338                           ;src/main.c: 96:     PORTA = (unsigned char) (~(1 << count));
  2339     032F  3001               	movlw	1
  2340     0330  00F7               	movwf	??_isr
  2341     0331  0A7D               	incf	_count,w
  2342     0332  2B35               	goto	u84_24
  2343     0333                     u84_25:
  2344     0333  1003               	clrc
  2345     0334  0DF7               	rlf	??_isr,f
  2346     0335                     u84_24:
  2347     0335  3EFF               	addlw	-1
  2348     0336  1D03               	skipz
  2349     0337  2B33               	goto	u84_25
  2350     0338  0877               	movf	??_isr,w
  2351     0339  3AFF               	xorlw	255
  2352     033A  1283               	bcf	3,5	;RP0=0, select bank0
  2353     033B  1303               	bcf	3,6	;RP1=0, select bank0
  2354     033C  0085               	movwf	5	;volatile
  2355     033D                     i1l1107:
  2356                           
  2357                           ;src/main.c: 99:     INTCONbits.RBIF = INT_AWAITING;
  2358     033D  100B               	bcf	11,0	;volatile
  2359     033E                     i1l1109:
  2360                           
  2361                           ;src/main.c: 100:     INTCONbits.INTF = INT_AWAITING;
  2362     033E  108B               	bcf	11,1	;volatile
  2363     033F                     i1l123:
  2364     033F  087B               	movf	??_isr+4,w
  2365     0340  00FF               	movwf	btemp+1
  2366     0341  087A               	movf	??_isr+3,w
  2367     0342  008A               	movwf	10
  2368     0343  0879               	movf	??_isr+2,w
  2369     0344  0084               	movwf	4
  2370     0345  0E78               	swapf	??_isr+1,w
  2371     0346  0083               	movwf	3
  2372     0347  0EFE               	swapf	btemp,f
  2373     0348  0E7E               	swapf	btemp,w
  2374     0349  0009               	retfie
  2375     034A                     __end_of_isr:
  2376                           
  2377                           	psect	intentry
  2378     0004                     __pintentry:	
  2379                           ;incstack = 0
  2380                           ; Regs used in _isr: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2381                           
  2382     0004                     interrupt_function:
  2383     007E                     saved_w	set	btemp
  2384     0004  00FE               	movwf	btemp
  2385     0005  0E03               	swapf	3,w
  2386     0006  00F8               	movwf	??_isr+1
  2387     0007  0804               	movf	4,w
  2388     0008  00F9               	movwf	??_isr+2
  2389     0009  080A               	movf	10,w
  2390     000A  00FA               	movwf	??_isr+3
  2391     000B  087F               	movf	btemp+1,w
  2392     000C  00FB               	movwf	??_isr+4
  2393     000D  120A  118A  2B19   	ljmp	_isr
  2394                           
  2395                           	psect	text12
  2396     022F                     __ptext12:	
  2397 ;; *************** function _parse_rotary *****************
  2398 ;; Defined at:
  2399 ;;		line 7 in file "src/rotary_encoder.c"
  2400 ;; Parameters:    Size  Location     Type
  2401 ;;  pinA            1    wreg     unsigned char 
  2402 ;;  pinB            1    0[COMMON] unsigned char 
  2403 ;;  counter         1    1[COMMON] PTR unsigned char 
  2404 ;;		 -> count(1), 
  2405 ;;  max             1    2[COMMON] unsigned char 
  2406 ;;  min             1    3[COMMON] unsigned char 
  2407 ;; Auto vars:     Size  Location     Type
  2408 ;;  pinA            1    5[COMMON] unsigned char 
  2409 ;;  state           1    6[COMMON] unsigned char 
  2410 ;; Return value:  Size  Location     Type
  2411 ;;                  1    wreg      void 
  2412 ;; Registers used:
  2413 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  2414 ;; Tracked objects:
  2415 ;;		On entry : 0/0
  2416 ;;		On exit  : 0/0
  2417 ;;		Unchanged: 0/0
  2418 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2419 ;;      Params:         4       0       0       0       0
  2420 ;;      Locals:         2       0       0       0       0
  2421 ;;      Temps:          1       0       0       0       0
  2422 ;;      Totals:         7       0       0       0       0
  2423 ;;Total ram usage:        7 bytes
  2424 ;; Hardware stack levels used: 1
  2425 ;; This function calls:
  2426 ;;		Nothing
  2427 ;; This function is called by:
  2428 ;;		_isr
  2429 ;; This function uses a non-reentrant model
  2430 ;;
  2431                           
  2432     022F                     _parse_rotary:	
  2433                           ;psect for function _parse_rotary
  2434                           
  2435                           
  2436                           ;incstack = 0
  2437                           ; Regs used in _parse_rotary: [wreg-fsr0h+status,2+status,0+btemp+1]
  2438                           ;parse_rotary@pinA stored from wreg
  2439     022F  00F5               	movwf	parse_rotary@pinA
  2440     0230                     i1l1071:
  2441                           
  2442                           ;src/rotary_encoder.c: 9:   static unsigned char prevState;;src/rotary_encoder.c: 10:   
      +                          unsigned char state;;src/rotary_encoder.c: 13:   _delay((unsigned long)((1)*(500000/4000
      +                          .0)));
  2443     0230  3029               	movlw	41
  2444     0231  00F4               	movwf	??_parse_rotary
  2445     0232                     u85_27:
  2446     0232  0BF4               	decfsz	??_parse_rotary,f
  2447     0233  2A32               	goto	u85_27
  2448     0234  0000               	nop
  2449     0235                     i1l1073:
  2450                           
  2451                           ;src/rotary_encoder.c: 16:   state = (unsigned char)(pinB << 1 | pinA);
  2452     0235  0870               	movf	parse_rotary@pinB,w
  2453     0236  00F4               	movwf	??_parse_rotary
  2454     0237  0774               	addwf	??_parse_rotary,w
  2455     0238  0475               	iorwf	parse_rotary@pinA,w
  2456     0239  00F6               	movwf	parse_rotary@state
  2457     023A                     i1l1075:
  2458                           
  2459                           ;src/rotary_encoder.c: 19:   if (prevState == 0) {
  2460     023A  087C               	movf	parse_rotary@prevState,w
  2461     023B  1D03               	btfss	3,2
  2462     023C  2A3E               	goto	u78_21
  2463     023D  2A3F               	goto	u78_20
  2464     023E                     u78_21:
  2465     023E  2A55               	goto	i1l1085
  2466     023F                     u78_20:
  2467     023F                     i1l1077:
  2468                           
  2469                           ;src/rotary_encoder.c: 20:     if (state == ROTATE_LEFT) (*counter)--;
  2470     023F  0376               	decf	parse_rotary@state,w
  2471     0240  1D03               	btfss	3,2
  2472     0241  2A43               	goto	u79_21
  2473     0242  2A44               	goto	u79_20
  2474     0243                     u79_21:
  2475     0243  2A49               	goto	i1l1081
  2476     0244                     u79_20:
  2477     0244                     i1l1079:
  2478     0244  0871               	movf	parse_rotary@counter,w
  2479     0245  0084               	movwf	4
  2480     0246  3001               	movlw	1
  2481     0247  0280               	subwf	0,f
  2482     0248  2A55               	goto	i1l1085
  2483     0249                     i1l1081:
  2484     0249  3002               	movlw	2
  2485     024A  0676               	xorwf	parse_rotary@state,w
  2486     024B  1D03               	btfss	3,2
  2487     024C  2A4E               	goto	u80_21
  2488     024D  2A4F               	goto	u80_20
  2489     024E                     u80_21:
  2490     024E  2A55               	goto	i1l1085
  2491     024F                     u80_20:
  2492     024F                     i1l1083:
  2493     024F  3001               	movlw	1
  2494     0250  00FF               	movwf	btemp+1
  2495     0251  0871               	movf	parse_rotary@counter,w
  2496     0252  0084               	movwf	4
  2497     0253  087F               	movf	btemp+1,w
  2498     0254  0780               	addwf	0,f
  2499     0255                     i1l1085:
  2500                           
  2501                           ;src/rotary_encoder.c: 25:   if (*counter > max) *counter = min;
  2502     0255  0871               	movf	parse_rotary@counter,w
  2503     0256  0084               	movwf	4
  2504     0257  0800               	movf	0,w
  2505     0258  0272               	subwf	parse_rotary@max,w
  2506     0259  1803               	skipnc
  2507     025A  2A5C               	goto	u81_21
  2508     025B  2A5D               	goto	u81_20
  2509     025C                     u81_21:
  2510     025C  2A62               	goto	i1l1089
  2511     025D                     u81_20:
  2512     025D                     i1l1087:
  2513     025D  0871               	movf	parse_rotary@counter,w
  2514     025E  0084               	movwf	4
  2515     025F  0873               	movf	parse_rotary@min,w
  2516     0260  0080               	movwf	0
  2517     0261  2A6E               	goto	i1l1093
  2518     0262                     i1l1089:
  2519     0262  0871               	movf	parse_rotary@counter,w
  2520     0263  0084               	movwf	4
  2521     0264  0873               	movf	parse_rotary@min,w
  2522     0265  0200               	subwf	0,w
  2523     0266  1803               	skipnc
  2524     0267  2A69               	goto	u82_21
  2525     0268  2A6A               	goto	u82_20
  2526     0269                     u82_21:
  2527     0269  2A6E               	goto	i1l1093
  2528     026A                     u82_20:
  2529     026A                     i1l1091:
  2530     026A  0871               	movf	parse_rotary@counter,w
  2531     026B  0084               	movwf	4
  2532     026C  0872               	movf	parse_rotary@max,w
  2533     026D  0080               	movwf	0
  2534     026E                     i1l1093:
  2535                           
  2536                           ;src/rotary_encoder.c: 30:   prevState = state;
  2537     026E  0876               	movf	parse_rotary@state,w
  2538     026F  00FC               	movwf	parse_rotary@prevState
  2539     0270                     i1l1095:
  2540                           
  2541                           ;src/rotary_encoder.c: 31:   PORTB = PORTB;
  2542     0270  1283               	bcf	3,5	;RP0=0, select bank0
  2543     0271  1303               	bcf	3,6	;RP1=0, select bank0
  2544     0272  0806               	movf	6,w	;volatile
  2545     0273  0086               	movwf	6	;volatile
  2546     0274                     i1l139:
  2547     0274  0008               	return
  2548     0275                     __end_of_parse_rotary:
  2549     007E                     btemp	set	126	;btemp
  2550     007E                     wtemp0	set	126
  2551                           
  2552                           	psect	config
  2553                           
  2554                           ;Config register CONFIG1 @ 0x2007
  2555                           ;	Oscillator Selection bits
  2556                           ;	FOSC = INTRC_NOCLKOUT, INTOSCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O f
      +                          unction on RA7/OSC1/CLKIN
  2557                           ;	Watchdog Timer Enable bit
  2558                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  2559                           ;	Power-up Timer Enable bit
  2560                           ;	PWRTE = ON, PWRT enabled
  2561                           ;	RE3/MCLR pin function select bit
  2562                           ;	MCLRE = OFF, RE3/MCLR pin function is digital input, MCLR internally tied to VDD
  2563                           ;	Code Protection bit
  2564                           ;	CP = OFF, Program memory code protection is disabled
  2565                           ;	Data Code Protection bit
  2566                           ;	CPD = OFF, Data memory code protection is disabled
  2567                           ;	Brown Out Reset Selection bits
  2568                           ;	BOREN = ON, BOR enabled
  2569                           ;	Internal External Switchover bit
  2570                           ;	IESO = OFF, Internal/External Switchover mode is disabled
  2571                           ;	Fail-Safe Clock Monitor Enabled bit
  2572                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
  2573                           ;	Low Voltage Programming Enable bit
  2574                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
  2575                           ;	In-Circuit Debugger Mode bit
  2576                           ;	DEBUG = 0x1, unprogrammed default
  2577     2007                     	org	8199
  2578     2007  23C4               	dw	9156
  2579                           
  2580                           ;Config register CONFIG2 @ 0x2008
  2581                           ;	Brown-out Reset Selection bit
  2582                           ;	BOR4V = BOR40V, Brown-out Reset set to 4.0V
  2583                           ;	Flash Program Memory Self Write Enable bits
  2584                           ;	WRT = OFF, Write protection off
  2585     2008                     	org	8200
  2586     2008  3FFF               	dw	16383

Data Sizes:
    Strings     0
    Constant    0
    Data        40
    BSS         10
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      14
    BANK0            80     52      76
    BANK1            80      0      24
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    init_gpio2@config$ansel	PTR volatile unsigned char  size(2) Largest target is 1
		 -> ANSEL(SFR3[1]), ANSELH(SFR3[1]), 

    init_gpio2@config$lat	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTA(SFR0[1]), PORTB(SFR0[1]), PORTE(SFR0[1]), 

    init_gpio2@config$tris	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISA(SFR1[1]), TRISB(SFR1[1]), TRISE(SFR1[1]), 

    init_gpio2@size$ansel	PTR volatile unsigned char  size(2) Largest target is 1
		 -> ANSEL(SFR3[1]), ANSELH(SFR3[1]), 

    init_gpio2@size$lat	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTA(SFR0[1]), PORTB(SFR0[1]), PORTE(SFR0[1]), 

    init_gpio2@size$tris	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISA(SFR1[1]), TRISB(SFR1[1]), TRISE(SFR1[1]), 

    parse_rotary@counter	PTR unsigned char  size(1) Largest target is 1
		 -> count(COMMON[1]), 

    pic_init@F1599$ansel	PTR volatile unsigned char  size(2) Largest target is 1
		 -> ANSEL(SFR3[1]), ANSELH(SFR3[1]), 

    pic_init@F1599$lat	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTA(SFR0[1]), PORTB(SFR0[1]), PORTE(SFR0[1]), 

    pic_init@F1599$tris	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISA(SFR1[1]), TRISB(SFR1[1]), TRISE(SFR1[1]), 

    populate_step_array@array	PTR int  size(1) Largest target is 8
		 -> pic_loop@stepArray(BANK0[8]), 

    S28$ansel	PTR volatile unsigned char  size(2) Largest target is 1
		 -> ANSEL(SFR3[1]), ANSELH(SFR3[1]), 

    S28$lat	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTA(SFR0[1]), PORTB(SFR0[1]), PORTE(SFR0[1]), 

    S28$tris	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISA(SFR1[1]), TRISB(SFR1[1]), TRISE(SFR1[1]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _isr->_parse_rotary

Critical Paths under _main in BANK0

    _main->_pic_init
    _pic_loop->_populate_step_array
    _populate_step_array->___awdiv
    _pic_init->_init_adc

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    2020
                           _pic_init
                           _pic_loop
 ---------------------------------------------------------------------------------
 (1) _pic_loop                                            18    18      0    1357
                                             17 BANK0     18    18      0
                _populate_step_array
                 _read_potentiometer
 ---------------------------------------------------------------------------------
 (2) _read_potentiometer                                   4     2      2      23
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (2) _populate_step_array                                  9     5      4    1081
                                              8 BANK0      9     5      4
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     244
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     452
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _pic_init                                            44    44      0     663
                                              8 BANK0     44    44      0
                           _init_adc
                          _init_gpio
                           _init_int
                           _init_osc
 ---------------------------------------------------------------------------------
 (2) _init_osc                                             4     1      3     144
                                              0 BANK0      4     1      3
 ---------------------------------------------------------------------------------
 (2) _init_int                                             6     0      6     213
                                              0 BANK0      6     0      6
 ---------------------------------------------------------------------------------
 (2) _init_gpio                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_adc                                             8     1      7     236
                                              0 BANK0      8     1      7
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _isr                                                  5     5      0     635
                                              7 COMMON     5     5      0
                       _parse_rotary
 ---------------------------------------------------------------------------------
 (5) _parse_rotary                                         7     3      4     635
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _pic_init
     _init_adc
     _init_gpio
     _init_int
     _init_osc
   _pic_loop
     _populate_step_array
       ___awdiv
       ___wmul
     _read_potentiometer

 _isr (ROOT)
   _parse_rotary

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0      18       7       30.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     34      4C       5       95.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      C       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      72      12        0.0%
ABS                  0      0      72       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Thu Nov 23 22:31:30 2023

              pic_init@F1593 0054                pic_init@F1595 0061                pic_init@F1597 005B  
              pic_init@F1599 00A0                            pc 0002                           l30 0318  
                         l23 030F                           l33 02DB                           l34 02E0  
                         l27 0314                           l36 02E5                           l39 02AD  
                         l90 03DC                           _GO 00F9                 ___awdiv@sign 0025  
                         fsr 0004          ___wmul@multiplicand 0022                          l114 0169  
                        l117 03C1                          l153 022E                          l156 038C  
                        l245 0358                          l247 0370                          l159 039C  
                        l398 01D2                          l921 0366                          l913 034A  
                        l931 0171                          l923 036C                          l915 034E  
                        l941 0185                          l933 0176                          l917 0352  
                        l951 019B                          l943 0187                          l935 0178  
                        l927 016A                          l919 035F                          l961 01BE  
                        l953 019F                          l945 018D                          l937 017C  
                        l929 016D                          l971 02E6                          l955 01B0  
                        l947 0190                          l963 01C4                          l939 0181  
                        l981 02C9                          l973 02EF                          l965 01C9  
                        l957 01B6                          l949 0197                          l991 02E4  
                        l983 02CC                          l975 02FF                          l967 01CE  
                        l959 01B7                          l993 0275                          l985 02D6  
                        l995 0281                          l987 02DA                          l979 02AE  
                        l997 028A                          l989 02DF                          l999 01D6  
                        u500 036C                          u501 036B                          u510 0171  
                        u511 0170                          u600 01C9                          u520 017C  
                        u601 01C8                          u521 017B                          u610 030F  
                        u530 018D                          u611 030E                          u531 018C  
                        u620 0313                          u700 0115                          u621 0312  
                        u630 0318                          u710 0152                          u550 019F  
                        u470 0352                          u631 0317                          u551 019E  
                        u471 0351                          u640 02DA                          u720 0040  
                        u641 02D9                          u545 0191                          u650 02DF  
                        u570 01B0                          u730 0085                          u651 02DE  
                        u571 01AF                          u731 0084                          u660 02E4  
                        u661 02E3                          u565 01A0                          u485 0359  
                        u590 01C4                          u670 022E                          u750 00B8  
                        u591 01C3                          u575 01AC                          u495 0360  
                        u671 022D                          u751 00B7                          u735 0081  
                        u680 0390                          u744 008D                          u585 01B8  
                        u681 038F                          u745 008B                          u690 00E7  
                        u770 00DB                          u675 022A                          u771 00DA  
                        u755 00B4                          u764 00C0                          u765 00BE  
                        u775 00D7                          _isr 0319                          fsr0 0004  
                        indf 0000                pic_loop@F1588 0064                         l1001 01F1  
                       l1003 01F4                         l1011 0390                         l1021 03BA  
                       l1005 021A                         l1023 03BB                         l1015 03B0  
                       l1031 00DD                         l1007 0220                         l1025 03BC  
                       l1017 03B3                         l1041 012D                         l1033 00F4  
                       l1009 0389                         l1027 03BF                         l1019 03B7  
                       l1043 0148                         l1035 00FA                         l1051 0055  
                       l1029 03C0                         l1045 0164                         l1037 010D  
                       l1061 0085                         l1053 0060                         l1039 0122  
                       l1063 0095                         l1047 003C                         l1065 00B8  
                       l1049 0045                         l1067 00C6                         l1059 0062  
                       l1069 00CE                         l1097 03D2                         l1099 03D7  
                       ?_isr 0070                         _main 03D2                         btemp 007E  
                       start 0010            pic_loop@stepArray 0037                        ??_isr 0077  
                      ?_main 0070              __end_of___awdiv 01D3                        _ANSEL 0188  
            ___awdiv@divisor 0020              parse_rotary@max 0072              parse_rotary@min 0073  
                      i1l123 033F                        i1l139 0274              ___awdiv@counter 0024  
                      _PORTA 0005                        _PORTB 0006                        u80_20 024F  
                      u80_21 024E                        u81_20 025D                        u81_21 025C  
                      _TRISA 0085                        u82_20 026A                        u82_21 0269  
                      u83_20 031D                        u83_21 031C                        u84_24 0335  
                      u84_25 0333                        u85_27 0232                        u78_20 023F  
                      u78_21 023E                        u79_20 0244                        u79_21 0243  
        _populate_step_array 01D3                        _count 007D                        pclath 000A  
                      status 0003                        wtemp0 007E     read_potentiometer@result 0022  
       ?_populate_step_array 0028               pic_loop@result 003F              __initialization 0013  
               __end_of_main 03DF                       ??_main 0054                       _ADRESH 001E  
                     _ADRESL 009E             ___awdiv@dividend 0022                       _ANSELH 0189  
                     i1l1101 0319                       i1l1103 031D             parse_rotary@pinA 0075  
           parse_rotary@pinB 0070                       i1l1105 032F                       i1l1107 033D  
                     i1l1109 033E                       i1l1071 0230                       i1l1081 0249  
                     i1l1073 0235                       i1l1091 026A                       i1l1083 024F  
                     i1l1075 023A                       i1l1093 026E                       i1l1077 023F  
                     i1l1085 0255                       i1l1095 0270                       i1l1087 025D  
                     i1l1079 0244                       i1l1089 0262        ??_populate_step_array 002C  
                     ___wmul 034A                    ??___awdiv 0024             __end_of_init_adc 02AE  
           __end_of_init_int 02E6             __end_of_init_osc 0319             ___awdiv@quotient 0026  
           __end_of_pic_init 016A             __end_of_pic_loop 00DD                       saved_w 007E  
    __end_of__initialization 0038     populate_step_array@array 0030               __pcstackCOMMON 0070  
               __pidataBANK0 03C2                 __pidataBANK1 0371                ?_parse_rotary 0070  
             _OPTION_REGbits 0081                   __pbssBANK0 0064                   __pmaintext 03D2  
                    ?___wmul 0020                   __pintentry 0004               ??_parse_rotary 0074  
          parse_rotary@state 0076                    ?_init_adc 0020                    ?_init_int 0020  
                  ?_init_osc 0020                    ?_pic_init 0070                    ?_pic_loop 0070  
 __end_of_read_potentiometer 039D                      ___awdiv 016A                    _ANSELbits 0188  
                    __ptext1 003C                      __ptext2 0389                      __ptext3 01D3  
                    __ptext4 034A                      __ptext5 016A                      __ptext6 00DD  
                    __ptext7 02E6                      __ptext8 02AE                      __ptext9 03B0  
          __end_of_init_gpio 03C2          parse_rotary@counter 0071         end_of_initialization 0038  
                 ??_init_adc 0027                   ??_init_int 0026                   ??_init_osc 0023  
                 ??_pic_init 0028                   ??_pic_loop 0031                    _PORTBbits 0006  
                  _TRISBbits 0086                    _TRISEbits 0089  __end_of_populate_step_array 022F  
       __end_of_parse_rotary 0275               __end_of___wmul 0371          start_initialization 0013  
                __end_of_isr 034A                     ??___wmul 0024                   init_fetch0 039D  
             init_adc@config 0020                  __pdataBANK0 0054                  __pdataBANK1 00A0  
populate_step_array@potLimit 002A                  __pbssCOMMON 007C                    ___latbits 0002  
    populate_step_array@size 0028                __pcstackBANK0 0020                     ?___awdiv 0020  
         pic_init@adc_config 0044           _read_potentiometer 0389                    _init_gpio 03B0  
        ?_read_potentiometer 0020            interrupt_function 0004               ___wmul@product 0024  
                   _IOCBbits 0096         ??_read_potentiometer 0022                 _parse_rotary 022F  
                 _ADCON0bits 001F                   _ADCON1bits 009F            ___wmul@multiplier 0020  
             init_int@config 0020                   ?_init_gpio 0070        parse_rotary@prevState 007C  
             init_osc@config 0020                    pic_loop@i 0041           pic_init@int_config 004B  
                   __ptext10 0275                     __ptext11 0319                     __ptext12 022F  
                   _init_adc 0275                     _init_int 02AE                     _init_osc 02E6  
                   _pic_init 00DD                     _pic_loop 003C           pic_init@pin_config 002C  
         pic_init@osc_config 0051                   _INTCONbits 000B                     init_ram0 03A1  
                ??_init_gpio 0020                     intlevel1 0000                   _OSCCONbits 008F  
       populate_step_array@i 002E  
