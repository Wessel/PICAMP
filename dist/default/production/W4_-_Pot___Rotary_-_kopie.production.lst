

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Thu Nov 23 23:06:07 2023

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	inittext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2,group=1
    17                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    18                           	psect	text6,local,class=CODE,merge=1,delta=2
    19                           	psect	text7,local,class=CODE,merge=1,delta=2
    20                           	psect	text8,local,class=CODE,merge=1,delta=2
    21                           	psect	text9,local,class=CODE,merge=1,delta=2
    22                           	psect	text10,local,class=CODE,merge=1,delta=2
    23                           	psect	text11,local,class=CODE,merge=1,delta=2
    24                           	psect	intentry,global,class=CODE,delta=2
    25                           	psect	text12,local,class=CODE,merge=1,delta=2
    26                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    27                           	dabs	1,0x7E,2
    28     0000                     
    29                           ; Generated 22/03/2023 GMT
    30                           ; 
    31                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    32                           ; All rights reserved.
    33                           ; 
    34                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    35                           ; 
    36                           ; Redistribution and use in source and binary forms, with or without modification, are
    37                           ; permitted provided that the following conditions are met:
    38                           ; 
    39                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    40                           ;        conditions and the following disclaimer.
    41                           ; 
    42                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    43                           ;        of conditions and the following disclaimer in the documentation and/or other
    44                           ;        materials provided with the distribution. Publication is not required when
    45                           ;        this file is used in an embedded application.
    46                           ; 
    47                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    48                           ;        software without specific prior written permission.
    49                           ; 
    50                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    51                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    52                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    53                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    54                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    55                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    56                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    57                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    58                           ; 
    59                           ; 
    60                           ; Code-generator required, PIC16F887 Definitions
    61                           ; 
    62                           ; SFR Addresses
    63     0000                     	;# 
    64     0001                     	;# 
    65     0002                     	;# 
    66     0003                     	;# 
    67     0004                     	;# 
    68     0005                     	;# 
    69     0006                     	;# 
    70     0007                     	;# 
    71     0008                     	;# 
    72     0009                     	;# 
    73     000A                     	;# 
    74     000B                     	;# 
    75     000C                     	;# 
    76     000D                     	;# 
    77     000E                     	;# 
    78     000E                     	;# 
    79     000F                     	;# 
    80     0010                     	;# 
    81     0011                     	;# 
    82     0012                     	;# 
    83     0013                     	;# 
    84     0014                     	;# 
    85     0015                     	;# 
    86     0015                     	;# 
    87     0016                     	;# 
    88     0017                     	;# 
    89     0018                     	;# 
    90     0019                     	;# 
    91     001A                     	;# 
    92     001B                     	;# 
    93     001B                     	;# 
    94     001C                     	;# 
    95     001D                     	;# 
    96     001E                     	;# 
    97     001F                     	;# 
    98     0081                     	;# 
    99     0085                     	;# 
   100     0086                     	;# 
   101     0087                     	;# 
   102     0088                     	;# 
   103     0089                     	;# 
   104     008C                     	;# 
   105     008D                     	;# 
   106     008E                     	;# 
   107     008F                     	;# 
   108     0090                     	;# 
   109     0091                     	;# 
   110     0092                     	;# 
   111     0093                     	;# 
   112     0093                     	;# 
   113     0093                     	;# 
   114     0094                     	;# 
   115     0095                     	;# 
   116     0096                     	;# 
   117     0097                     	;# 
   118     0098                     	;# 
   119     0099                     	;# 
   120     009A                     	;# 
   121     009B                     	;# 
   122     009C                     	;# 
   123     009D                     	;# 
   124     009E                     	;# 
   125     009F                     	;# 
   126     0105                     	;# 
   127     0107                     	;# 
   128     0108                     	;# 
   129     0109                     	;# 
   130     010C                     	;# 
   131     010C                     	;# 
   132     010D                     	;# 
   133     010E                     	;# 
   134     010F                     	;# 
   135     0185                     	;# 
   136     0187                     	;# 
   137     0188                     	;# 
   138     0189                     	;# 
   139     018C                     	;# 
   140     018D                     	;# 
   141     0000                     	;# 
   142     0001                     	;# 
   143     0002                     	;# 
   144     0003                     	;# 
   145     0004                     	;# 
   146     0005                     	;# 
   147     0006                     	;# 
   148     0007                     	;# 
   149     0008                     	;# 
   150     0009                     	;# 
   151     000A                     	;# 
   152     000B                     	;# 
   153     000C                     	;# 
   154     000D                     	;# 
   155     000E                     	;# 
   156     000E                     	;# 
   157     000F                     	;# 
   158     0010                     	;# 
   159     0011                     	;# 
   160     0012                     	;# 
   161     0013                     	;# 
   162     0014                     	;# 
   163     0015                     	;# 
   164     0015                     	;# 
   165     0016                     	;# 
   166     0017                     	;# 
   167     0018                     	;# 
   168     0019                     	;# 
   169     001A                     	;# 
   170     001B                     	;# 
   171     001B                     	;# 
   172     001C                     	;# 
   173     001D                     	;# 
   174     001E                     	;# 
   175     001F                     	;# 
   176     0081                     	;# 
   177     0085                     	;# 
   178     0086                     	;# 
   179     0087                     	;# 
   180     0088                     	;# 
   181     0089                     	;# 
   182     008C                     	;# 
   183     008D                     	;# 
   184     008E                     	;# 
   185     008F                     	;# 
   186     0090                     	;# 
   187     0091                     	;# 
   188     0092                     	;# 
   189     0093                     	;# 
   190     0093                     	;# 
   191     0093                     	;# 
   192     0094                     	;# 
   193     0095                     	;# 
   194     0096                     	;# 
   195     0097                     	;# 
   196     0098                     	;# 
   197     0099                     	;# 
   198     009A                     	;# 
   199     009B                     	;# 
   200     009C                     	;# 
   201     009D                     	;# 
   202     009E                     	;# 
   203     009F                     	;# 
   204     0105                     	;# 
   205     0107                     	;# 
   206     0108                     	;# 
   207     0109                     	;# 
   208     010C                     	;# 
   209     010C                     	;# 
   210     010D                     	;# 
   211     010E                     	;# 
   212     010F                     	;# 
   213     0185                     	;# 
   214     0187                     	;# 
   215     0188                     	;# 
   216     0189                     	;# 
   217     018C                     	;# 
   218     018D                     	;# 
   219     0000                     	;# 
   220     0001                     	;# 
   221     0002                     	;# 
   222     0003                     	;# 
   223     0004                     	;# 
   224     0005                     	;# 
   225     0006                     	;# 
   226     0007                     	;# 
   227     0008                     	;# 
   228     0009                     	;# 
   229     000A                     	;# 
   230     000B                     	;# 
   231     000C                     	;# 
   232     000D                     	;# 
   233     000E                     	;# 
   234     000E                     	;# 
   235     000F                     	;# 
   236     0010                     	;# 
   237     0011                     	;# 
   238     0012                     	;# 
   239     0013                     	;# 
   240     0014                     	;# 
   241     0015                     	;# 
   242     0015                     	;# 
   243     0016                     	;# 
   244     0017                     	;# 
   245     0018                     	;# 
   246     0019                     	;# 
   247     001A                     	;# 
   248     001B                     	;# 
   249     001B                     	;# 
   250     001C                     	;# 
   251     001D                     	;# 
   252     001E                     	;# 
   253     001F                     	;# 
   254     0081                     	;# 
   255     0085                     	;# 
   256     0086                     	;# 
   257     0087                     	;# 
   258     0088                     	;# 
   259     0089                     	;# 
   260     008C                     	;# 
   261     008D                     	;# 
   262     008E                     	;# 
   263     008F                     	;# 
   264     0090                     	;# 
   265     0091                     	;# 
   266     0092                     	;# 
   267     0093                     	;# 
   268     0093                     	;# 
   269     0093                     	;# 
   270     0094                     	;# 
   271     0095                     	;# 
   272     0096                     	;# 
   273     0097                     	;# 
   274     0098                     	;# 
   275     0099                     	;# 
   276     009A                     	;# 
   277     009B                     	;# 
   278     009C                     	;# 
   279     009D                     	;# 
   280     009E                     	;# 
   281     009F                     	;# 
   282     0105                     	;# 
   283     0107                     	;# 
   284     0108                     	;# 
   285     0109                     	;# 
   286     010C                     	;# 
   287     010C                     	;# 
   288     010D                     	;# 
   289     010E                     	;# 
   290     010F                     	;# 
   291     0185                     	;# 
   292     0187                     	;# 
   293     0188                     	;# 
   294     0189                     	;# 
   295     018C                     	;# 
   296     018D                     	;# 
   297     0000                     	;# 
   298     0001                     	;# 
   299     0002                     	;# 
   300     0003                     	;# 
   301     0004                     	;# 
   302     0005                     	;# 
   303     0006                     	;# 
   304     0007                     	;# 
   305     0008                     	;# 
   306     0009                     	;# 
   307     000A                     	;# 
   308     000B                     	;# 
   309     000C                     	;# 
   310     000D                     	;# 
   311     000E                     	;# 
   312     000E                     	;# 
   313     000F                     	;# 
   314     0010                     	;# 
   315     0011                     	;# 
   316     0012                     	;# 
   317     0013                     	;# 
   318     0014                     	;# 
   319     0015                     	;# 
   320     0015                     	;# 
   321     0016                     	;# 
   322     0017                     	;# 
   323     0018                     	;# 
   324     0019                     	;# 
   325     001A                     	;# 
   326     001B                     	;# 
   327     001B                     	;# 
   328     001C                     	;# 
   329     001D                     	;# 
   330     001E                     	;# 
   331     001F                     	;# 
   332     0081                     	;# 
   333     0085                     	;# 
   334     0086                     	;# 
   335     0087                     	;# 
   336     0088                     	;# 
   337     0089                     	;# 
   338     008C                     	;# 
   339     008D                     	;# 
   340     008E                     	;# 
   341     008F                     	;# 
   342     0090                     	;# 
   343     0091                     	;# 
   344     0092                     	;# 
   345     0093                     	;# 
   346     0093                     	;# 
   347     0093                     	;# 
   348     0094                     	;# 
   349     0095                     	;# 
   350     0096                     	;# 
   351     0097                     	;# 
   352     0098                     	;# 
   353     0099                     	;# 
   354     009A                     	;# 
   355     009B                     	;# 
   356     009C                     	;# 
   357     009D                     	;# 
   358     009E                     	;# 
   359     009F                     	;# 
   360     0105                     	;# 
   361     0107                     	;# 
   362     0108                     	;# 
   363     0109                     	;# 
   364     010C                     	;# 
   365     010C                     	;# 
   366     010D                     	;# 
   367     010E                     	;# 
   368     010F                     	;# 
   369     0185                     	;# 
   370     0187                     	;# 
   371     0188                     	;# 
   372     0189                     	;# 
   373     018C                     	;# 
   374     018D                     	;# 
   375     0000                     	;# 
   376     0001                     	;# 
   377     0002                     	;# 
   378     0003                     	;# 
   379     0004                     	;# 
   380     0005                     	;# 
   381     0006                     	;# 
   382     0007                     	;# 
   383     0008                     	;# 
   384     0009                     	;# 
   385     000A                     	;# 
   386     000B                     	;# 
   387     000C                     	;# 
   388     000D                     	;# 
   389     000E                     	;# 
   390     000E                     	;# 
   391     000F                     	;# 
   392     0010                     	;# 
   393     0011                     	;# 
   394     0012                     	;# 
   395     0013                     	;# 
   396     0014                     	;# 
   397     0015                     	;# 
   398     0015                     	;# 
   399     0016                     	;# 
   400     0017                     	;# 
   401     0018                     	;# 
   402     0019                     	;# 
   403     001A                     	;# 
   404     001B                     	;# 
   405     001B                     	;# 
   406     001C                     	;# 
   407     001D                     	;# 
   408     001E                     	;# 
   409     001F                     	;# 
   410     0081                     	;# 
   411     0085                     	;# 
   412     0086                     	;# 
   413     0087                     	;# 
   414     0088                     	;# 
   415     0089                     	;# 
   416     008C                     	;# 
   417     008D                     	;# 
   418     008E                     	;# 
   419     008F                     	;# 
   420     0090                     	;# 
   421     0091                     	;# 
   422     0092                     	;# 
   423     0093                     	;# 
   424     0093                     	;# 
   425     0093                     	;# 
   426     0094                     	;# 
   427     0095                     	;# 
   428     0096                     	;# 
   429     0097                     	;# 
   430     0098                     	;# 
   431     0099                     	;# 
   432     009A                     	;# 
   433     009B                     	;# 
   434     009C                     	;# 
   435     009D                     	;# 
   436     009E                     	;# 
   437     009F                     	;# 
   438     0105                     	;# 
   439     0107                     	;# 
   440     0108                     	;# 
   441     0109                     	;# 
   442     010C                     	;# 
   443     010C                     	;# 
   444     010D                     	;# 
   445     010E                     	;# 
   446     010F                     	;# 
   447     0185                     	;# 
   448     0187                     	;# 
   449     0188                     	;# 
   450     0189                     	;# 
   451     018C                     	;# 
   452     018D                     	;# 
   453                           
   454                           	psect	idataBANK0
   455     0387                     __pidataBANK0:
   456                           
   457                           ;initializer for pic_init@F1593
   458     0387  3401               	retlw	1
   459     0388  3401               	retlw	1
   460     0389  3407               	retlw	7
   461     038A  3400               	retlw	0
   462     038B  3400               	retlw	0
   463     038C  3400               	retlw	0
   464     038D  3401               	retlw	1
   465                           
   466                           ;initializer for pic_init@F1597
   467     038E  3401               	retlw	1
   468     038F  3400               	retlw	0
   469     0390  3400               	retlw	0
   470     0391  3400               	retlw	0
   471     0392  3401               	retlw	1
   472     0393  3401               	retlw	1
   473                           
   474                           ;initializer for pic_init@F1595
   475     0394  3401               	retlw	1
   476     0395  3403               	retlw	3
   477     0396  3401               	retlw	1
   478     001E                     _ADRESH	set	30
   479     0006                     _PORTB	set	6
   480     0006                     _PORTBbits	set	6
   481     0005                     _PORTA	set	5
   482     001F                     _ADCON0bits	set	31
   483     000B                     _INTCONbits	set	11
   484     00F9                     _GO	set	249
   485     009E                     _ADRESL	set	158
   486     0089                     _TRISEbits	set	137
   487     0086                     _TRISBbits	set	134
   488     0085                     _TRISA	set	133
   489     009F                     _ADCON1bits	set	159
   490     0081                     _OPTION_REGbits	set	129
   491     0096                     _IOCBbits	set	150
   492     008F                     _OSCCONbits	set	143
   493     0188                     _ANSELbits	set	392
   494     0189                     _ANSELH	set	393
   495     0188                     _ANSEL	set	392
   496                           
   497                           	psect	cinit
   498     0013                     start_initialization:	
   499                           ; #config settings
   500                           
   501     0013                     __initialization:
   502                           
   503                           ; Initialize objects allocated to BANK0
   504     0013  1383               	bcf	3,7	;select IRP bank0
   505     0014  3053               	movlw	low (__pdataBANK0+16)
   506     0015  00FD               	movwf	btemp+-1
   507     0016  3003               	movlw	high __pidataBANK0
   508     0017  00FE               	movwf	btemp
   509     0018  3087               	movlw	low __pidataBANK0
   510     0019  00FF               	movwf	btemp+1
   511     001A  3043               	movlw	low __pdataBANK0
   512     001B  0084               	movwf	4
   513     001C  120A  118A  2366  120A  118A  	fcall	init_ram0
   514                           
   515                           ; Clear objects allocated to BANK0
   516     0021  01D3               	clrf	__pbssBANK0& (0+127)
   517     0022  01D4               	clrf	(__pbssBANK0+1)& (0+127)
   518     0023  01D5               	clrf	(__pbssBANK0+2)& (0+127)
   519     0024  01D6               	clrf	(__pbssBANK0+3)& (0+127)
   520     0025  01D7               	clrf	(__pbssBANK0+4)& (0+127)
   521     0026  01D8               	clrf	(__pbssBANK0+5)& (0+127)
   522     0027  01D9               	clrf	(__pbssBANK0+6)& (0+127)
   523     0028  01DA               	clrf	(__pbssBANK0+7)& (0+127)
   524                           
   525                           ; Clear objects allocated to COMMON
   526     0029  01FC               	clrf	__pbssCOMMON& (0+127)
   527     002A  01FD               	clrf	(__pbssCOMMON+1)& (0+127)
   528     002B                     end_of_initialization:	
   529                           ;End of C runtime variable initialization code
   530                           
   531     002B                     __end_of__initialization:
   532     002B  0183               	clrf	3
   533     002C  120A  118A  2B97   	ljmp	_main	;jump to C main() function
   534                           
   535                           	psect	bssCOMMON
   536     007C                     __pbssCOMMON:
   537     007C                     parse_rotary@prevState:
   538     007C                     	ds	1
   539     007D                     _count:
   540     007D                     	ds	1
   541                           
   542                           	psect	bssBANK0
   543     0053                     __pbssBANK0:
   544     0053                     pic_loop@F1588:
   545     0053                     	ds	8
   546                           
   547                           	psect	dataBANK0
   548     0043                     __pdataBANK0:
   549     0043                     pic_init@F1593:
   550     0043                     	ds	7
   551     004A                     pic_init@F1597:
   552     004A                     	ds	6
   553     0050                     pic_init@F1595:
   554     0050                     	ds	3
   555                           
   556                           	psect	inittext
   557     0362                     init_fetch0:	
   558                           ;	Called with low address in FSR and high address in W
   559                           
   560     0362  087E               	movf	btemp,w
   561     0363  008A               	movwf	10
   562     0364  087F               	movf	btemp+1,w
   563     0365  0082               	movwf	2
   564     0366                     init_ram0:	
   565                           ;Called with:
   566                           ;	high address of idata address in btemp 
   567                           ;	low address of idata address in btemp+1 
   568                           ;	low address of data in FSR
   569                           ;	high address + 1 of data in btemp-1
   570                           
   571     0366  120A  118A  2362  120A  118A  	fcall	init_fetch0
   572     036B  0080               	movwf	0
   573     036C  0A84               	incf	4,f
   574     036D  0804               	movf	4,w
   575     036E  067D               	xorwf	btemp+-1,w
   576     036F  1903               	btfsc	3,2
   577     0370  3400               	retlw	0
   578     0371  0AFF               	incf	btemp+1,f
   579     0372  1903               	btfsc	3,2
   580     0373  0AFE               	incf	btemp,f
   581     0374  2B66               	goto	init_ram0
   582                           
   583                           	psect	cstackCOMMON
   584     0070                     __pcstackCOMMON:
   585     0070                     ?_pic_init:
   586     0070                     ?_pic_loop:	
   587                           ; 1 bytes @ 0x0
   588                           
   589     0070                     ?_init_gpio:	
   590                           ; 1 bytes @ 0x0
   591                           
   592     0070                     ?_parse_rotary:	
   593                           ; 1 bytes @ 0x0
   594                           
   595     0070                     ?_main:	
   596                           ; 1 bytes @ 0x0
   597                           
   598     0070                     ?_isr:	
   599                           ; 1 bytes @ 0x0
   600                           
   601     0070                     parse_rotary@pinB:	
   602                           ; 1 bytes @ 0x0
   603                           
   604                           
   605                           ; 1 bytes @ 0x0
   606     0070                     	ds	1
   607     0071                     parse_rotary@counter:
   608                           
   609                           ; 1 bytes @ 0x1
   610     0071                     	ds	1
   611     0072                     parse_rotary@max:
   612                           
   613                           ; 1 bytes @ 0x2
   614     0072                     	ds	1
   615     0073                     parse_rotary@min:
   616                           
   617                           ; 1 bytes @ 0x3
   618     0073                     	ds	1
   619     0074                     ??_parse_rotary:
   620                           
   621                           ; 1 bytes @ 0x4
   622     0074                     	ds	1
   623     0075                     parse_rotary@pinA:
   624                           
   625                           ; 1 bytes @ 0x5
   626     0075                     	ds	1
   627     0076                     parse_rotary@state:
   628                           
   629                           ; 1 bytes @ 0x6
   630     0076                     	ds	1
   631     0077                     ??_isr:
   632                           
   633                           ; 1 bytes @ 0x7
   634     0077                     	ds	5
   635                           
   636                           	psect	cstackBANK0
   637     0020                     __pcstackBANK0:
   638     0020                     ??_init_gpio:
   639     0020                     ?_init_osc:	
   640                           ; 1 bytes @ 0x0
   641                           
   642     0020                     ?_init_int:	
   643                           ; 1 bytes @ 0x0
   644                           
   645     0020                     ?_init_adc:	
   646                           ; 1 bytes @ 0x0
   647                           
   648     0020                     ?_read_potentiometer:	
   649                           ; 1 bytes @ 0x0
   650                           
   651     0020                     ?___wmul:	
   652                           ; 2 bytes @ 0x0
   653                           
   654     0020                     ?___awdiv:	
   655                           ; 2 bytes @ 0x0
   656                           
   657     0020                     ___wmul@multiplier:	
   658                           ; 2 bytes @ 0x0
   659                           
   660     0020                     ___awdiv@divisor:	
   661                           ; 2 bytes @ 0x0
   662                           
   663     0020                     init_osc@config:	
   664                           ; 2 bytes @ 0x0
   665                           
   666     0020                     init_int@config:	
   667                           ; 3 bytes @ 0x0
   668                           
   669     0020                     init_adc@config:	
   670                           ; 6 bytes @ 0x0
   671                           
   672                           
   673                           ; 7 bytes @ 0x0
   674     0020                     	ds	2
   675     0022                     ??_read_potentiometer:
   676     0022                     read_potentiometer@result:	
   677                           ; 1 bytes @ 0x2
   678                           
   679     0022                     ___wmul@multiplicand:	
   680                           ; 2 bytes @ 0x2
   681                           
   682     0022                     ___awdiv@dividend:	
   683                           ; 2 bytes @ 0x2
   684                           
   685                           
   686                           ; 2 bytes @ 0x2
   687     0022                     	ds	1
   688     0023                     ??_init_osc:
   689                           
   690                           ; 1 bytes @ 0x3
   691     0023                     	ds	1
   692     0024                     ??___wmul:
   693     0024                     ??___awdiv:	
   694                           ; 1 bytes @ 0x4
   695                           
   696     0024                     ___awdiv@counter:	
   697                           ; 1 bytes @ 0x4
   698                           
   699     0024                     ___wmul@product:	
   700                           ; 1 bytes @ 0x4
   701                           
   702                           
   703                           ; 2 bytes @ 0x4
   704     0024                     	ds	1
   705     0025                     ___awdiv@sign:
   706                           
   707                           ; 1 bytes @ 0x5
   708     0025                     	ds	1
   709     0026                     ??_init_int:
   710     0026                     ___awdiv@quotient:	
   711                           ; 1 bytes @ 0x6
   712                           
   713                           
   714                           ; 2 bytes @ 0x6
   715     0026                     	ds	1
   716     0027                     ??_init_adc:
   717                           
   718                           ; 1 bytes @ 0x7
   719     0027                     	ds	1
   720     0028                     ??_pic_init:
   721     0028                     ?_populate_step_array:	
   722                           ; 1 bytes @ 0x8
   723                           
   724     0028                     populate_step_array@size:	
   725                           ; 1 bytes @ 0x8
   726                           
   727                           
   728                           ; 2 bytes @ 0x8
   729     0028                     	ds	2
   730     002A                     populate_step_array@potLimit:
   731                           
   732                           ; 2 bytes @ 0xA
   733     002A                     	ds	2
   734     002C                     ??_populate_step_array:
   735     002C                     pic_init@adc_config:	
   736                           ; 1 bytes @ 0xC
   737                           
   738                           
   739                           ; 7 bytes @ 0xC
   740     002C                     	ds	2
   741     002E                     populate_step_array@i:
   742                           
   743                           ; 2 bytes @ 0xE
   744     002E                     	ds	2
   745     0030                     populate_step_array@array:
   746                           
   747                           ; 1 bytes @ 0x10
   748     0030                     	ds	1
   749     0031                     ??_pic_loop:
   750                           
   751                           ; 1 bytes @ 0x11
   752     0031                     	ds	2
   753     0033                     pic_init@int_config:
   754                           
   755                           ; 6 bytes @ 0x13
   756     0033                     	ds	4
   757     0037                     pic_loop@stepArray:
   758                           
   759                           ; 8 bytes @ 0x17
   760     0037                     	ds	2
   761     0039                     pic_init@osc_config:
   762                           
   763                           ; 3 bytes @ 0x19
   764     0039                     	ds	6
   765     003F                     pic_loop@result:
   766                           
   767                           ; 2 bytes @ 0x1F
   768     003F                     	ds	2
   769     0041                     pic_loop@i:
   770                           
   771                           ; 2 bytes @ 0x21
   772     0041                     	ds	2
   773     0043                     ??_main:
   774                           
   775                           	psect	maintext
   776     0397                     __pmaintext:	
   777                           ; 1 bytes @ 0x23
   778 ;;
   779 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   780 ;;
   781 ;; *************** function _main *****************
   782 ;; Defined at:
   783 ;;		line 19 in file "src/main.c"
   784 ;; Parameters:    Size  Location     Type
   785 ;;		None
   786 ;; Auto vars:     Size  Location     Type
   787 ;;		None
   788 ;; Return value:  Size  Location     Type
   789 ;;                  1    wreg      void 
   790 ;; Registers used:
   791 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   792 ;; Tracked objects:
   793 ;;		On entry : B00/0
   794 ;;		On exit  : 0/0
   795 ;;		Unchanged: 0/0
   796 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   797 ;;      Params:         0       0       0       0       0
   798 ;;      Locals:         0       0       0       0       0
   799 ;;      Temps:          0       0       0       0       0
   800 ;;      Totals:         0       0       0       0       0
   801 ;;Total ram usage:        0 bytes
   802 ;; Hardware stack levels required when called: 5
   803 ;; This function calls:
   804 ;;		_pic_init
   805 ;;		_pic_loop
   806 ;; This function is called by:
   807 ;;		Startup code after reset
   808 ;; This function uses a non-reentrant model
   809 ;;
   810                           
   811     0397                     _main:	
   812                           ;psect for function _main
   813                           
   814     0397                     l1089:	
   815                           ;incstack = 0
   816                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   817                           
   818                           
   819                           ;src/main.c: 21:   pic_init();
   820     0397  120A  118A  20D0  120A  118A  	fcall	_pic_init
   821     039C                     l1091:
   822                           
   823                           ;src/main.c: 23:   pic_loop();
   824     039C  120A  118A  202F  120A  118A  	fcall	_pic_loop
   825     03A1                     l82:
   826     03A1  120A  118A  2810   	ljmp	start
   827     03A4                     __end_of_main:
   828                           
   829                           	psect	text1
   830     002F                     __ptext1:	
   831 ;; *************** function _pic_loop *****************
   832 ;; Defined at:
   833 ;;		line 26 in file "src/main.c"
   834 ;; Parameters:    Size  Location     Type
   835 ;;		None
   836 ;; Auto vars:     Size  Location     Type
   837 ;;  i               2   33[BANK0 ] int 
   838 ;;  result          2   31[BANK0 ] int 
   839 ;;  stepArray       8   23[BANK0 ] int [4]
   840 ;; Return value:  Size  Location     Type
   841 ;;                  1    wreg      void 
   842 ;; Registers used:
   843 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   844 ;; Tracked objects:
   845 ;;		On entry : 0/0
   846 ;;		On exit  : 0/0
   847 ;;		Unchanged: 0/0
   848 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   849 ;;      Params:         0       0       0       0       0
   850 ;;      Locals:         0      12       0       0       0
   851 ;;      Temps:          0       6       0       0       0
   852 ;;      Totals:         0      18       0       0       0
   853 ;;Total ram usage:       18 bytes
   854 ;; Hardware stack levels used: 1
   855 ;; Hardware stack levels required when called: 4
   856 ;; This function calls:
   857 ;;		_populate_step_array
   858 ;;		_read_potentiometer
   859 ;; This function is called by:
   860 ;;		_main
   861 ;; This function uses a non-reentrant model
   862 ;;
   863                           
   864     002F                     _pic_loop:	
   865                           ;psect for function _pic_loop
   866                           
   867     002F                     l1029:	
   868                           ;incstack = 0
   869                           ; Regs used in _pic_loop: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   870                           
   871                           
   872                           ;src/main.c: 28:   int stepArray[4] = {0};
   873     002F  3037               	movlw	pic_loop@stepArray& (0+255)
   874     0030  0084               	movwf	4
   875     0031  3008               	movlw	8
   876     0032  00FF               	movwf	btemp+1
   877     0033                     u640:
   878     0033  1383               	bcf	3,7	;select IRP bank0
   879     0034  0180               	clrf	0
   880     0035  0A84               	incf	4,f
   881     0036  0BFF               	decfsz	btemp+1,f
   882     0037  2833               	goto	u640
   883     0038                     l1031:
   884                           
   885                           ;src/main.c: 29:   populate_step_array(stepArray, 4, 1023);
   886     0038  3004               	movlw	4
   887     0039  1283               	bcf	3,5	;RP0=0, select bank0
   888     003A  1303               	bcf	3,6	;RP1=0, select bank0
   889     003B  00A8               	movwf	populate_step_array@size
   890     003C  3000               	movlw	0
   891     003D  00A9               	movwf	populate_step_array@size+1
   892     003E  30FF               	movlw	255
   893     003F  00AA               	movwf	populate_step_array@potLimit
   894     0040  3003               	movlw	3
   895     0041  00AB               	movwf	populate_step_array@potLimit+1
   896     0042  3037               	movlw	(low (pic_loop@stepArray| 0))& (0+255)
   897     0043  120A  118A  21B1  120A  118A  	fcall	_populate_step_array
   898     0048                     l1033:
   899                           
   900                           ;src/main.c: 33:     int result = read_potentiometer();
   901     0048  120A  118A  234E  120A  118A  	fcall	_read_potentiometer
   902     004D  1283               	bcf	3,5	;RP0=0, select bank0
   903     004E  1303               	bcf	3,6	;RP1=0, select bank0
   904     004F  0821               	movf	?_read_potentiometer+1,w
   905     0050  00C0               	movwf	pic_loop@result+1
   906     0051  0820               	movf	?_read_potentiometer,w
   907     0052  00BF               	movwf	pic_loop@result
   908     0053                     l1035:
   909                           
   910                           ;src/main.c: 39:     for (int i = 0; i < 4; i++) {
   911     0053  01C1               	clrf	pic_loop@i
   912     0054  01C2               	clrf	pic_loop@i+1
   913     0055                     l1041:
   914                           
   915                           ;src/main.c: 40:       if (result > (stepArray[i] - 2)) {
   916     0055  1283               	bcf	3,5	;RP0=0, select bank0
   917     0056  1303               	bcf	3,6	;RP1=0, select bank0
   918     0057  0841               	movf	pic_loop@i,w
   919     0058  00B1               	movwf	??_pic_loop
   920     0059  0731               	addwf	??_pic_loop,w
   921     005A  3E37               	addlw	(low (pic_loop@stepArray| 0))& (0+255)
   922     005B  0084               	movwf	4
   923     005C  1383               	bcf	3,7	;select IRP bank0
   924     005D  0800               	movf	0,w
   925     005E  00B2               	movwf	??_pic_loop+1
   926     005F  0A84               	incf	4,f
   927     0060  0800               	movf	0,w
   928     0061  00B3               	movwf	??_pic_loop+2
   929     0062  0832               	movf	??_pic_loop+1,w
   930     0063  3EFE               	addlw	254
   931     0064  00B4               	movwf	??_pic_loop+3
   932     0065  0833               	movf	??_pic_loop+2,w
   933     0066  1803               	skipnc
   934     0067  3E01               	addlw	1
   935     0068  3EFF               	addlw	255
   936     0069  00B5               	movwf	??_pic_loop+4
   937     006A  0835               	movf	??_pic_loop+4,w
   938     006B  3A80               	xorlw	128
   939     006C  00B6               	movwf	??_pic_loop+5
   940     006D  0840               	movf	pic_loop@result+1,w
   941     006E  3A80               	xorlw	128
   942     006F  0236               	subwf	??_pic_loop+5,w
   943     0070  1D03               	skipz
   944     0071  2874               	goto	u655
   945     0072  083F               	movf	pic_loop@result,w
   946     0073  0234               	subwf	??_pic_loop+3,w
   947     0074                     u655:
   948     0074  1803               	skipnc
   949     0075  2877               	goto	u651
   950     0076  2878               	goto	u650
   951     0077                     u651:
   952     0077  2888               	goto	l1045
   953     0078                     u650:
   954     0078                     l1043:
   955                           
   956                           ;src/main.c: 41:         PORTA = (unsigned char)(PORTA & ~(1 << i));
   957     0078  3001               	movlw	1
   958     0079  1283               	bcf	3,5	;RP0=0, select bank0
   959     007A  1303               	bcf	3,6	;RP1=0, select bank0
   960     007B  00B1               	movwf	??_pic_loop
   961     007C  0A41               	incf	pic_loop@i,w
   962     007D  2880               	goto	u664
   963     007E                     u665:
   964     007E  1003               	clrc
   965     007F  0DB1               	rlf	??_pic_loop,f
   966     0080                     u664:
   967     0080  3EFF               	addlw	-1
   968     0081  1D03               	skipz
   969     0082  287E               	goto	u665
   970     0083  0831               	movf	??_pic_loop,w
   971     0084  3AFF               	xorlw	255
   972     0085  0505               	andwf	5,w	;volatile
   973     0086  0085               	movwf	5	;volatile
   974                           
   975                           ;src/main.c: 42:       } else if (result <= (stepArray[i] - 2)) {
   976     0087  28B9               	goto	l1049
   977     0088                     l1045:
   978     0088  1283               	bcf	3,5	;RP0=0, select bank0
   979     0089  1303               	bcf	3,6	;RP1=0, select bank0
   980     008A  0841               	movf	pic_loop@i,w
   981     008B  00B1               	movwf	??_pic_loop
   982     008C  0731               	addwf	??_pic_loop,w
   983     008D  3E37               	addlw	(low (pic_loop@stepArray| 0))& (0+255)
   984     008E  0084               	movwf	4
   985     008F  1383               	bcf	3,7	;select IRP bank0
   986     0090  0800               	movf	0,w
   987     0091  00B2               	movwf	??_pic_loop+1
   988     0092  0A84               	incf	4,f
   989     0093  0800               	movf	0,w
   990     0094  00B3               	movwf	??_pic_loop+2
   991     0095  0832               	movf	??_pic_loop+1,w
   992     0096  3EFE               	addlw	254
   993     0097  00B4               	movwf	??_pic_loop+3
   994     0098  0833               	movf	??_pic_loop+2,w
   995     0099  1803               	skipnc
   996     009A  3E01               	addlw	1
   997     009B  3EFF               	addlw	255
   998     009C  00B5               	movwf	??_pic_loop+4
   999     009D  0835               	movf	??_pic_loop+4,w
  1000     009E  3A80               	xorlw	128
  1001     009F  00B6               	movwf	??_pic_loop+5
  1002     00A0  0840               	movf	pic_loop@result+1,w
  1003     00A1  3A80               	xorlw	128
  1004     00A2  0236               	subwf	??_pic_loop+5,w
  1005     00A3  1D03               	skipz
  1006     00A4  28A7               	goto	u675
  1007     00A5  083F               	movf	pic_loop@result,w
  1008     00A6  0234               	subwf	??_pic_loop+3,w
  1009     00A7                     u675:
  1010     00A7  1C03               	skipc
  1011     00A8  28AA               	goto	u671
  1012     00A9  28AB               	goto	u670
  1013     00AA                     u671:
  1014     00AA  28B9               	goto	l1049
  1015     00AB                     u670:
  1016     00AB                     l1047:
  1017                           
  1018                           ;src/main.c: 43:         PORTA = (unsigned char)(PORTA | (1 << i));
  1019     00AB  3001               	movlw	1
  1020     00AC  1283               	bcf	3,5	;RP0=0, select bank0
  1021     00AD  1303               	bcf	3,6	;RP1=0, select bank0
  1022     00AE  00B1               	movwf	??_pic_loop
  1023     00AF  0A41               	incf	pic_loop@i,w
  1024     00B0  28B3               	goto	u684
  1025     00B1                     u685:
  1026     00B1  1003               	clrc
  1027     00B2  0DB1               	rlf	??_pic_loop,f
  1028     00B3                     u684:
  1029     00B3  3EFF               	addlw	-1
  1030     00B4  1D03               	skipz
  1031     00B5  28B1               	goto	u685
  1032     00B6  0831               	movf	??_pic_loop,w
  1033     00B7  0405               	iorwf	5,w	;volatile
  1034     00B8  0085               	movwf	5	;volatile
  1035     00B9                     l1049:
  1036                           
  1037                           ;src/main.c: 45:     }
  1038     00B9  3001               	movlw	1
  1039     00BA  1283               	bcf	3,5	;RP0=0, select bank0
  1040     00BB  1303               	bcf	3,6	;RP1=0, select bank0
  1041     00BC  07C1               	addwf	pic_loop@i,f
  1042     00BD  1803               	skipnc
  1043     00BE  0AC2               	incf	pic_loop@i+1,f
  1044     00BF  3000               	movlw	0
  1045     00C0  07C2               	addwf	pic_loop@i+1,f
  1046     00C1                     l1051:
  1047     00C1  0842               	movf	pic_loop@i+1,w
  1048     00C2  3A80               	xorlw	128
  1049     00C3  00FF               	movwf	btemp+1
  1050     00C4  3080               	movlw	128
  1051     00C5  027F               	subwf	btemp+1,w
  1052     00C6  1D03               	skipz
  1053     00C7  28CA               	goto	u695
  1054     00C8  3004               	movlw	4
  1055     00C9  0241               	subwf	pic_loop@i,w
  1056     00CA                     u695:
  1057     00CA  1C03               	skipc
  1058     00CB  28CD               	goto	u691
  1059     00CC  28CE               	goto	u690
  1060     00CD                     u691:
  1061     00CD  2855               	goto	l1041
  1062     00CE                     u690:
  1063     00CE  2848               	goto	l1033
  1064     00CF  0008               	return
  1065     00D0                     __end_of_pic_loop:
  1066                           
  1067                           	psect	text2
  1068     034E                     __ptext2:	
  1069 ;; *************** function _read_potentiometer *****************
  1070 ;; Defined at:
  1071 ;;		line 10 in file "src/potentiometer.c"
  1072 ;; Parameters:    Size  Location     Type
  1073 ;;		None
  1074 ;; Auto vars:     Size  Location     Type
  1075 ;;  result          2    2[BANK0 ] int 
  1076 ;; Return value:  Size  Location     Type
  1077 ;;                  2    0[BANK0 ] int 
  1078 ;; Registers used:
  1079 ;;		wreg
  1080 ;; Tracked objects:
  1081 ;;		On entry : 0/0
  1082 ;;		On exit  : 0/0
  1083 ;;		Unchanged: 0/0
  1084 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1085 ;;      Params:         0       2       0       0       0
  1086 ;;      Locals:         0       2       0       0       0
  1087 ;;      Temps:          0       0       0       0       0
  1088 ;;      Totals:         0       4       0       0       0
  1089 ;;Total ram usage:        4 bytes
  1090 ;; Hardware stack levels used: 1
  1091 ;; Hardware stack levels required when called: 2
  1092 ;; This function calls:
  1093 ;;		Nothing
  1094 ;; This function is called by:
  1095 ;;		_pic_loop
  1096 ;; This function uses a non-reentrant model
  1097 ;;
  1098                           
  1099     034E                     _read_potentiometer:	
  1100                           ;psect for function _read_potentiometer
  1101                           
  1102     034E                     l993:	
  1103                           ;incstack = 0
  1104                           ; Regs used in _read_potentiometer: [wreg]
  1105                           
  1106                           
  1107                           ;src/potentiometer.c: 12:   _delay((unsigned long)((5)*(500000/4000000.0)));
  1108                           ;src/potentiometer.c: 16:   GO = 1;
  1109     034E  1283               	bcf	3,5	;RP0=0, select bank0
  1110     034F  1303               	bcf	3,6	;RP1=0, select bank0
  1111     0350  149F               	bsf	31,1	;volatile
  1112     0351                     l146:	
  1113                           ;src/potentiometer.c: 17:   while (GO) continue;
  1114                           
  1115     0351  189F               	btfsc	31,1	;volatile
  1116     0352  2B54               	goto	u611
  1117     0353  2B55               	goto	u610
  1118     0354                     u611:
  1119     0354  2B51               	goto	l146
  1120     0355                     u610:
  1121     0355                     l995:
  1122                           
  1123                           ;src/potentiometer.c: 21:   int result = (ADRESH * 256) + ADRESL;
  1124     0355  081E               	movf	30,w	;volatile
  1125     0356  00A3               	movwf	read_potentiometer@result+1
  1126     0357  1683               	bsf	3,5	;RP0=1, select bank1
  1127     0358  1303               	bcf	3,6	;RP1=0, select bank1
  1128     0359  081E               	movf	30,w	;volatile
  1129     035A  1283               	bcf	3,5	;RP0=0, select bank0
  1130     035B  1303               	bcf	3,6	;RP1=0, select bank0
  1131     035C  00A2               	movwf	read_potentiometer@result
  1132                           
  1133                           ;src/potentiometer.c: 23:   return result;
  1134     035D  0823               	movf	read_potentiometer@result+1,w
  1135     035E  00A1               	movwf	?_read_potentiometer+1
  1136     035F  0822               	movf	read_potentiometer@result,w
  1137     0360  00A0               	movwf	?_read_potentiometer
  1138     0361                     l149:
  1139     0361  0008               	return
  1140     0362                     __end_of_read_potentiometer:
  1141                           
  1142                           	psect	text3
  1143     01B1                     __ptext3:	
  1144 ;; *************** function _populate_step_array *****************
  1145 ;; Defined at:
  1146 ;;		line 3 in file "src/potentiometer.c"
  1147 ;; Parameters:    Size  Location     Type
  1148 ;;  array           1    wreg     PTR int 
  1149 ;;		 -> pic_loop@stepArray(8), 
  1150 ;;  size            2    8[BANK0 ] int 
  1151 ;;  potLimit        2   10[BANK0 ] int 
  1152 ;; Auto vars:     Size  Location     Type
  1153 ;;  array           1   16[BANK0 ] PTR int 
  1154 ;;		 -> pic_loop@stepArray(8), 
  1155 ;;  i               2   14[BANK0 ] int 
  1156 ;; Return value:  Size  Location     Type
  1157 ;;                  1    wreg      void 
  1158 ;; Registers used:
  1159 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1160 ;; Tracked objects:
  1161 ;;		On entry : 0/0
  1162 ;;		On exit  : 0/0
  1163 ;;		Unchanged: 0/0
  1164 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1165 ;;      Params:         0       4       0       0       0
  1166 ;;      Locals:         0       3       0       0       0
  1167 ;;      Temps:          0       2       0       0       0
  1168 ;;      Totals:         0       9       0       0       0
  1169 ;;Total ram usage:        9 bytes
  1170 ;; Hardware stack levels used: 1
  1171 ;; Hardware stack levels required when called: 3
  1172 ;; This function calls:
  1173 ;;		___awdiv
  1174 ;;		___wmul
  1175 ;; This function is called by:
  1176 ;;		_pic_loop
  1177 ;; This function uses a non-reentrant model
  1178 ;;
  1179                           
  1180     01B1                     _populate_step_array:	
  1181                           ;psect for function _populate_step_array
  1182                           
  1183                           
  1184                           ;incstack = 0
  1185                           ; Regs used in _populate_step_array: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack
      +                          ]
  1186                           ;populate_step_array@array stored from wreg
  1187     01B1  1283               	bcf	3,5	;RP0=0, select bank0
  1188     01B2  1303               	bcf	3,6	;RP1=0, select bank0
  1189     01B3  00B0               	movwf	populate_step_array@array
  1190     01B4                     l983:
  1191                           
  1192                           ;src/potentiometer.c: 4:   array[0] = potLimit / (size + 1);
  1193     01B4  0828               	movf	populate_step_array@size,w
  1194     01B5  3E01               	addlw	1
  1195     01B6  00A0               	movwf	___awdiv@divisor
  1196     01B7  0829               	movf	populate_step_array@size+1,w
  1197     01B8  1803               	skipnc
  1198     01B9  3E01               	addlw	1
  1199     01BA  3E00               	addlw	0
  1200     01BB  00A1               	movwf	___awdiv@divisor+1
  1201     01BC  082B               	movf	populate_step_array@potLimit+1,w
  1202     01BD  00A3               	movwf	___awdiv@dividend+1
  1203     01BE  082A               	movf	populate_step_array@potLimit,w
  1204     01BF  00A2               	movwf	___awdiv@dividend
  1205     01C0  120A  118A  2148  120A  118A  	fcall	___awdiv
  1206     01C5  1283               	bcf	3,5	;RP0=0, select bank0
  1207     01C6  1303               	bcf	3,6	;RP1=0, select bank0
  1208     01C7  0830               	movf	populate_step_array@array,w
  1209     01C8  0084               	movwf	4
  1210     01C9  0820               	movf	?___awdiv,w
  1211     01CA  1383               	bcf	3,7	;select IRP bank0
  1212     01CB  0080               	movwf	0
  1213     01CC  0A84               	incf	4,f
  1214     01CD  0821               	movf	?___awdiv+1,w
  1215     01CE  0080               	movwf	0
  1216     01CF                     l985:
  1217                           
  1218                           ;src/potentiometer.c: 5:   for (int i = 0; i < size; i++){
  1219     01CF  01AE               	clrf	populate_step_array@i
  1220     01D0  01AF               	clrf	populate_step_array@i+1
  1221     01D1  29FE               	goto	l991
  1222     01D2                     l987:
  1223                           
  1224                           ;src/potentiometer.c: 6:     array[i] = array[0] * (i + 1);
  1225     01D2  1283               	bcf	3,5	;RP0=0, select bank0
  1226     01D3  1303               	bcf	3,6	;RP1=0, select bank0
  1227     01D4  082E               	movf	populate_step_array@i,w
  1228     01D5  3E01               	addlw	1
  1229     01D6  00A0               	movwf	___wmul@multiplier
  1230     01D7  082F               	movf	populate_step_array@i+1,w
  1231     01D8  1803               	skipnc
  1232     01D9  3E01               	addlw	1
  1233     01DA  3E00               	addlw	0
  1234     01DB  00A1               	movwf	___wmul@multiplier+1
  1235     01DC  0830               	movf	populate_step_array@array,w
  1236     01DD  0084               	movwf	4
  1237     01DE  1383               	bcf	3,7	;select IRP bank0
  1238     01DF  0800               	movf	0,w
  1239     01E0  00A2               	movwf	___wmul@multiplicand
  1240     01E1  0A84               	incf	4,f
  1241     01E2  0800               	movf	0,w
  1242     01E3  00A3               	movwf	___wmul@multiplicand+1
  1243     01E4  120A  118A  2327  120A  118A  	fcall	___wmul
  1244     01E9  1283               	bcf	3,5	;RP0=0, select bank0
  1245     01EA  1303               	bcf	3,6	;RP1=0, select bank0
  1246     01EB  082E               	movf	populate_step_array@i,w
  1247     01EC  00AC               	movwf	??_populate_step_array
  1248     01ED  072C               	addwf	??_populate_step_array,w
  1249     01EE  0730               	addwf	populate_step_array@array,w
  1250     01EF  00AD               	movwf	??_populate_step_array+1
  1251     01F0  082D               	movf	??_populate_step_array+1,w
  1252     01F1  0084               	movwf	4
  1253     01F2  0820               	movf	?___wmul,w
  1254     01F3  1383               	bcf	3,7	;select IRP bank0
  1255     01F4  0080               	movwf	0
  1256     01F5  0A84               	incf	4,f
  1257     01F6  0821               	movf	?___wmul+1,w
  1258     01F7  0080               	movwf	0
  1259     01F8                     l989:
  1260                           
  1261                           ;src/potentiometer.c: 7:   }
  1262     01F8  3001               	movlw	1
  1263     01F9  07AE               	addwf	populate_step_array@i,f
  1264     01FA  1803               	skipnc
  1265     01FB  0AAF               	incf	populate_step_array@i+1,f
  1266     01FC  3000               	movlw	0
  1267     01FD  07AF               	addwf	populate_step_array@i+1,f
  1268     01FE                     l991:
  1269     01FE  082F               	movf	populate_step_array@i+1,w
  1270     01FF  3A80               	xorlw	128
  1271     0200  00AC               	movwf	??_populate_step_array
  1272     0201  0829               	movf	populate_step_array@size+1,w
  1273     0202  3A80               	xorlw	128
  1274     0203  022C               	subwf	??_populate_step_array,w
  1275     0204  1D03               	skipz
  1276     0205  2A08               	goto	u605
  1277     0206  0828               	movf	populate_step_array@size,w
  1278     0207  022E               	subwf	populate_step_array@i,w
  1279     0208                     u605:
  1280     0208  1C03               	skipc
  1281     0209  2A0B               	goto	u601
  1282     020A  2A0C               	goto	u600
  1283     020B                     u601:
  1284     020B  29D2               	goto	l987
  1285     020C                     u600:
  1286     020C                     l143:
  1287     020C  0008               	return
  1288     020D                     __end_of_populate_step_array:
  1289                           
  1290                           	psect	text4
  1291     0327                     __ptext4:	
  1292 ;; *************** function ___wmul *****************
  1293 ;; Defined at:
  1294 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\Umul16.c"
  1295 ;; Parameters:    Size  Location     Type
  1296 ;;  multiplier      2    0[BANK0 ] unsigned int 
  1297 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  1298 ;; Auto vars:     Size  Location     Type
  1299 ;;  product         2    4[BANK0 ] unsigned int 
  1300 ;; Return value:  Size  Location     Type
  1301 ;;                  2    0[BANK0 ] unsigned int 
  1302 ;; Registers used:
  1303 ;;		wreg, status,2, status,0
  1304 ;; Tracked objects:
  1305 ;;		On entry : 0/0
  1306 ;;		On exit  : 0/0
  1307 ;;		Unchanged: 0/0
  1308 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1309 ;;      Params:         0       4       0       0       0
  1310 ;;      Locals:         0       2       0       0       0
  1311 ;;      Temps:          0       0       0       0       0
  1312 ;;      Totals:         0       6       0       0       0
  1313 ;;Total ram usage:        6 bytes
  1314 ;; Hardware stack levels used: 1
  1315 ;; Hardware stack levels required when called: 2
  1316 ;; This function calls:
  1317 ;;		Nothing
  1318 ;; This function is called by:
  1319 ;;		_populate_step_array
  1320 ;; This function uses a non-reentrant model
  1321 ;;
  1322                           
  1323     0327                     ___wmul:	
  1324                           ;psect for function ___wmul
  1325                           
  1326     0327                     l897:	
  1327                           ;incstack = 0
  1328                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  1329                           
  1330     0327  1283               	bcf	3,5	;RP0=0, select bank0
  1331     0328  1303               	bcf	3,6	;RP1=0, select bank0
  1332     0329  01A4               	clrf	___wmul@product
  1333     032A  01A5               	clrf	___wmul@product+1
  1334     032B                     l899:
  1335     032B  1C20               	btfss	___wmul@multiplier,0
  1336     032C  2B2E               	goto	u401
  1337     032D  2B2F               	goto	u400
  1338     032E                     u401:
  1339     032E  2B35               	goto	l235
  1340     032F                     u400:
  1341     032F                     l901:
  1342     032F  0822               	movf	___wmul@multiplicand,w
  1343     0330  07A4               	addwf	___wmul@product,f
  1344     0331  1803               	skipnc
  1345     0332  0AA5               	incf	___wmul@product+1,f
  1346     0333  0823               	movf	___wmul@multiplicand+1,w
  1347     0334  07A5               	addwf	___wmul@product+1,f
  1348     0335                     l235:
  1349     0335  3001               	movlw	1
  1350     0336                     u415:
  1351     0336  1003               	clrc
  1352     0337  0DA2               	rlf	___wmul@multiplicand,f
  1353     0338  0DA3               	rlf	___wmul@multiplicand+1,f
  1354     0339  3EFF               	addlw	-1
  1355     033A  1D03               	skipz
  1356     033B  2B36               	goto	u415
  1357     033C                     l903:
  1358     033C  3001               	movlw	1
  1359     033D                     u425:
  1360     033D  1003               	clrc
  1361     033E  0CA1               	rrf	___wmul@multiplier+1,f
  1362     033F  0CA0               	rrf	___wmul@multiplier,f
  1363     0340  3EFF               	addlw	-1
  1364     0341  1D03               	skipz
  1365     0342  2B3D               	goto	u425
  1366     0343                     l905:
  1367     0343  0820               	movf	___wmul@multiplier,w
  1368     0344  0421               	iorwf	___wmul@multiplier+1,w
  1369     0345  1D03               	btfss	3,2
  1370     0346  2B48               	goto	u431
  1371     0347  2B49               	goto	u430
  1372     0348                     u431:
  1373     0348  2B2B               	goto	l899
  1374     0349                     u430:
  1375     0349                     l907:
  1376     0349  0825               	movf	___wmul@product+1,w
  1377     034A  00A1               	movwf	?___wmul+1
  1378     034B  0824               	movf	___wmul@product,w
  1379     034C  00A0               	movwf	?___wmul
  1380     034D                     l237:
  1381     034D  0008               	return
  1382     034E                     __end_of___wmul:
  1383                           
  1384                           	psect	text5
  1385     0148                     __ptext5:	
  1386 ;; *************** function ___awdiv *****************
  1387 ;; Defined at:
  1388 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\awdiv.c"
  1389 ;; Parameters:    Size  Location     Type
  1390 ;;  divisor         2    0[BANK0 ] int 
  1391 ;;  dividend        2    2[BANK0 ] int 
  1392 ;; Auto vars:     Size  Location     Type
  1393 ;;  quotient        2    6[BANK0 ] int 
  1394 ;;  sign            1    5[BANK0 ] unsigned char 
  1395 ;;  counter         1    4[BANK0 ] unsigned char 
  1396 ;; Return value:  Size  Location     Type
  1397 ;;                  2    0[BANK0 ] int 
  1398 ;; Registers used:
  1399 ;;		wreg, status,2, status,0, btemp+1
  1400 ;; Tracked objects:
  1401 ;;		On entry : 0/0
  1402 ;;		On exit  : 0/0
  1403 ;;		Unchanged: 0/0
  1404 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1405 ;;      Params:         0       4       0       0       0
  1406 ;;      Locals:         0       4       0       0       0
  1407 ;;      Temps:          0       0       0       0       0
  1408 ;;      Totals:         0       8       0       0       0
  1409 ;;Total ram usage:        8 bytes
  1410 ;; Hardware stack levels used: 1
  1411 ;; Hardware stack levels required when called: 2
  1412 ;; This function calls:
  1413 ;;		Nothing
  1414 ;; This function is called by:
  1415 ;;		_populate_step_array
  1416 ;; This function uses a non-reentrant model
  1417 ;;
  1418                           
  1419     0148                     ___awdiv:	
  1420                           ;psect for function ___awdiv
  1421                           
  1422     0148                     l911:	
  1423                           ;incstack = 0
  1424                           ; Regs used in ___awdiv: [wreg+status,2+status,0+btemp+1]
  1425                           
  1426     0148  1283               	bcf	3,5	;RP0=0, select bank0
  1427     0149  1303               	bcf	3,6	;RP1=0, select bank0
  1428     014A  01A5               	clrf	___awdiv@sign
  1429     014B                     l913:
  1430     014B  1FA1               	btfss	___awdiv@divisor+1,7
  1431     014C  294E               	goto	u441
  1432     014D  294F               	goto	u440
  1433     014E                     u441:
  1434     014E  2956               	goto	l919
  1435     014F                     u440:
  1436     014F                     l915:
  1437     014F  09A0               	comf	___awdiv@divisor,f
  1438     0150  09A1               	comf	___awdiv@divisor+1,f
  1439     0151  0AA0               	incf	___awdiv@divisor,f
  1440     0152  1903               	skipnz
  1441     0153  0AA1               	incf	___awdiv@divisor+1,f
  1442     0154                     l917:
  1443     0154  01A5               	clrf	___awdiv@sign
  1444     0155  0AA5               	incf	___awdiv@sign,f
  1445     0156                     l919:
  1446     0156  1FA3               	btfss	___awdiv@dividend+1,7
  1447     0157  2959               	goto	u451
  1448     0158  295A               	goto	u450
  1449     0159                     u451:
  1450     0159  2963               	goto	l925
  1451     015A                     u450:
  1452     015A                     l921:
  1453     015A  09A2               	comf	___awdiv@dividend,f
  1454     015B  09A3               	comf	___awdiv@dividend+1,f
  1455     015C  0AA2               	incf	___awdiv@dividend,f
  1456     015D  1903               	skipnz
  1457     015E  0AA3               	incf	___awdiv@dividend+1,f
  1458     015F                     l923:
  1459     015F  3001               	movlw	1
  1460     0160  00FF               	movwf	btemp+1
  1461     0161  087F               	movf	btemp+1,w
  1462     0162  06A5               	xorwf	___awdiv@sign,f
  1463     0163                     l925:
  1464     0163  01A6               	clrf	___awdiv@quotient
  1465     0164  01A7               	clrf	___awdiv@quotient+1
  1466     0165                     l927:
  1467     0165  0820               	movf	___awdiv@divisor,w
  1468     0166  0421               	iorwf	___awdiv@divisor+1,w
  1469     0167  1903               	btfsc	3,2
  1470     0168  296A               	goto	u461
  1471     0169  296B               	goto	u460
  1472     016A                     u461:
  1473     016A  29A2               	goto	l947
  1474     016B                     u460:
  1475     016B                     l929:
  1476     016B  01A4               	clrf	___awdiv@counter
  1477     016C  0AA4               	incf	___awdiv@counter,f
  1478     016D  2979               	goto	l935
  1479     016E                     l931:
  1480     016E  3001               	movlw	1
  1481     016F                     u475:
  1482     016F  1003               	clrc
  1483     0170  0DA0               	rlf	___awdiv@divisor,f
  1484     0171  0DA1               	rlf	___awdiv@divisor+1,f
  1485     0172  3EFF               	addlw	-1
  1486     0173  1D03               	skipz
  1487     0174  296F               	goto	u475
  1488     0175                     l933:
  1489     0175  3001               	movlw	1
  1490     0176  00FF               	movwf	btemp+1
  1491     0177  087F               	movf	btemp+1,w
  1492     0178  07A4               	addwf	___awdiv@counter,f
  1493     0179                     l935:
  1494     0179  1FA1               	btfss	___awdiv@divisor+1,7
  1495     017A  297C               	goto	u481
  1496     017B  297D               	goto	u480
  1497     017C                     u481:
  1498     017C  296E               	goto	l931
  1499     017D                     u480:
  1500     017D                     l937:
  1501     017D  3001               	movlw	1
  1502     017E                     u495:
  1503     017E  1003               	clrc
  1504     017F  0DA6               	rlf	___awdiv@quotient,f
  1505     0180  0DA7               	rlf	___awdiv@quotient+1,f
  1506     0181  3EFF               	addlw	-1
  1507     0182  1D03               	skipz
  1508     0183  297E               	goto	u495
  1509     0184  0821               	movf	___awdiv@divisor+1,w
  1510     0185  0223               	subwf	___awdiv@dividend+1,w
  1511     0186  1D03               	skipz
  1512     0187  298A               	goto	u505
  1513     0188  0820               	movf	___awdiv@divisor,w
  1514     0189  0222               	subwf	___awdiv@dividend,w
  1515     018A                     u505:
  1516     018A  1C03               	skipc
  1517     018B  298D               	goto	u501
  1518     018C  298E               	goto	u500
  1519     018D                     u501:
  1520     018D  2995               	goto	l943
  1521     018E                     u500:
  1522     018E                     l939:
  1523     018E  0820               	movf	___awdiv@divisor,w
  1524     018F  02A2               	subwf	___awdiv@dividend,f
  1525     0190  0821               	movf	___awdiv@divisor+1,w
  1526     0191  1C03               	skipc
  1527     0192  03A3               	decf	___awdiv@dividend+1,f
  1528     0193  02A3               	subwf	___awdiv@dividend+1,f
  1529     0194                     l941:
  1530     0194  1426               	bsf	___awdiv@quotient,0
  1531     0195                     l943:
  1532     0195  3001               	movlw	1
  1533     0196                     u515:
  1534     0196  1003               	clrc
  1535     0197  0CA1               	rrf	___awdiv@divisor+1,f
  1536     0198  0CA0               	rrf	___awdiv@divisor,f
  1537     0199  3EFF               	addlw	-1
  1538     019A  1D03               	skipz
  1539     019B  2996               	goto	u515
  1540     019C                     l945:
  1541     019C  3001               	movlw	1
  1542     019D  02A4               	subwf	___awdiv@counter,f
  1543     019E  1D03               	btfss	3,2
  1544     019F  29A1               	goto	u521
  1545     01A0  29A2               	goto	u520
  1546     01A1                     u521:
  1547     01A1  297D               	goto	l937
  1548     01A2                     u520:
  1549     01A2                     l947:
  1550     01A2  0825               	movf	___awdiv@sign,w
  1551     01A3  1903               	btfsc	3,2
  1552     01A4  29A6               	goto	u531
  1553     01A5  29A7               	goto	u530
  1554     01A6                     u531:
  1555     01A6  29AC               	goto	l951
  1556     01A7                     u530:
  1557     01A7                     l949:
  1558     01A7  09A6               	comf	___awdiv@quotient,f
  1559     01A8  09A7               	comf	___awdiv@quotient+1,f
  1560     01A9  0AA6               	incf	___awdiv@quotient,f
  1561     01AA  1903               	skipnz
  1562     01AB  0AA7               	incf	___awdiv@quotient+1,f
  1563     01AC                     l951:
  1564     01AC  0827               	movf	___awdiv@quotient+1,w
  1565     01AD  00A1               	movwf	?___awdiv+1
  1566     01AE  0826               	movf	___awdiv@quotient,w
  1567     01AF  00A0               	movwf	?___awdiv
  1568     01B0                     l388:
  1569     01B0  0008               	return
  1570     01B1                     __end_of___awdiv:
  1571                           
  1572                           	psect	text6
  1573     00D0                     __ptext6:	
  1574 ;; *************** function _pic_init *****************
  1575 ;; Defined at:
  1576 ;;		line 49 in file "src/main.c"
  1577 ;; Parameters:    Size  Location     Type
  1578 ;;		None
  1579 ;; Auto vars:     Size  Location     Type
  1580 ;;  adc_config      7   12[BANK0 ] struct .
  1581 ;;  int_config      6   19[BANK0 ] struct .
  1582 ;;  osc_config      3   25[BANK0 ] struct .
  1583 ;; Return value:  Size  Location     Type
  1584 ;;                  1    wreg      void 
  1585 ;; Registers used:
  1586 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1587 ;; Tracked objects:
  1588 ;;		On entry : 0/0
  1589 ;;		On exit  : 0/0
  1590 ;;		Unchanged: 0/0
  1591 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1592 ;;      Params:         0       0       0       0       0
  1593 ;;      Locals:         0      16       0       0       0
  1594 ;;      Temps:          0       4       0       0       0
  1595 ;;      Totals:         0      20       0       0       0
  1596 ;;Total ram usage:       20 bytes
  1597 ;; Hardware stack levels used: 1
  1598 ;; Hardware stack levels required when called: 3
  1599 ;; This function calls:
  1600 ;;		_init_adc
  1601 ;;		_init_gpio
  1602 ;;		_init_int
  1603 ;;		_init_osc
  1604 ;; This function is called by:
  1605 ;;		_main
  1606 ;; This function uses a non-reentrant model
  1607 ;;
  1608                           
  1609     00D0                     _pic_init:	
  1610                           ;psect for function _pic_init
  1611                           
  1612     00D0                     l1015:	
  1613                           ;incstack = 0
  1614                           ; Regs used in _pic_init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1615                           
  1616                           
  1617                           ;src/main.c: 50:   ADCConfig adc_config = { ADC_ON, ADC_RIGHT, ADC_AN07, ADC_FOSC02,
  1618     00D0  302C               	movlw	pic_init@adc_config& (0+255)
  1619     00D1  0084               	movwf	4
  1620     00D2  3043               	movlw	low pic_init@F1593
  1621     00D3  1283               	bcf	3,5	;RP0=0, select bank0
  1622     00D4  1303               	bcf	3,6	;RP1=0, select bank0
  1623     00D5  00A8               	movwf	??_pic_init
  1624     00D6  0804               	movf	4,w
  1625     00D7  00A9               	movwf	??_pic_init+1
  1626     00D8  3007               	movlw	7
  1627     00D9  00AA               	movwf	??_pic_init+2
  1628     00DA                     u620:
  1629     00DA  0828               	movf	??_pic_init,w
  1630     00DB  0084               	movwf	4
  1631     00DC  1383               	bcf	3,7	;select IRP bank0
  1632     00DD  0800               	movf	0,w
  1633     00DE  00AB               	movwf	??_pic_init+3
  1634     00DF  0AA8               	incf	??_pic_init,f
  1635     00E0  0829               	movf	??_pic_init+1,w
  1636     00E1  0084               	movwf	4
  1637     00E2  082B               	movf	??_pic_init+3,w
  1638     00E3  0080               	movwf	0
  1639     00E4  0AA9               	incf	??_pic_init+1,f
  1640     00E5  0BAA               	decfsz	??_pic_init+2,f
  1641     00E6  28DA               	goto	u620
  1642     00E7                     l1017:
  1643                           
  1644                           ;src/main.c: 52:   OscillatorConfig osc_config = { INTERNAL_CLK, KHZ500, INTERNAL_FOSC }
      +                          ;
  1645     00E7  0850               	movf	pic_init@F1595,w
  1646     00E8  00B9               	movwf	pic_init@osc_config
  1647     00E9  0851               	movf	pic_init@F1595+1,w
  1648     00EA  00BA               	movwf	pic_init@osc_config+1
  1649     00EB  0852               	movf	pic_init@F1595+2,w
  1650     00EC  00BB               	movwf	pic_init@osc_config+2
  1651     00ED                     l1019:
  1652                           
  1653                           ;src/main.c: 53:   InterruptConfig int_config = { GIE_ENABLED, EINT_DISABLED, PEIE_DISAB
      +                          LED,
  1654     00ED  3033               	movlw	pic_init@int_config& (0+255)
  1655     00EE  0084               	movwf	4
  1656     00EF  084A               	movf	pic_init@F1597,w
  1657     00F0  0080               	movwf	0
  1658     00F1  0A84               	incf	4,f
  1659     00F2  084B               	movf	pic_init@F1597+1,w
  1660     00F3  0080               	movwf	0
  1661     00F4  0A84               	incf	4,f
  1662     00F5  084C               	movf	pic_init@F1597+2,w
  1663     00F6  0080               	movwf	0
  1664     00F7  0A84               	incf	4,f
  1665     00F8  084D               	movf	pic_init@F1597+3,w
  1666     00F9  0080               	movwf	0
  1667     00FA  0A84               	incf	4,f
  1668     00FB  084E               	movf	pic_init@F1597+4,w
  1669     00FC  0080               	movwf	0
  1670     00FD  0A84               	incf	4,f
  1671     00FE  084F               	movf	pic_init@F1597+5,w
  1672     00FF  0080               	movwf	0
  1673     0100                     l1021:
  1674                           
  1675                           ;src/main.c: 64:   init_osc(osc_config);
  1676     0100  0839               	movf	pic_init@osc_config,w
  1677     0101  00A0               	movwf	init_osc@config
  1678     0102  083A               	movf	pic_init@osc_config+1,w
  1679     0103  00A1               	movwf	init_osc@config+1
  1680     0104  083B               	movf	pic_init@osc_config+2,w
  1681     0105  00A2               	movwf	init_osc@config+2
  1682     0106  120A  118A  22C4  120A  118A  	fcall	_init_osc
  1683     010B                     l1023:
  1684                           
  1685                           ;src/main.c: 65:   init_int(int_config);
  1686     010B  3020               	movlw	init_int@config& (0+255)
  1687     010C  0084               	movwf	4
  1688     010D  1283               	bcf	3,5	;RP0=0, select bank0
  1689     010E  1303               	bcf	3,6	;RP1=0, select bank0
  1690     010F  0833               	movf	pic_init@int_config,w
  1691     0110  1383               	bcf	3,7	;select IRP bank0
  1692     0111  0080               	movwf	0
  1693     0112  0A84               	incf	4,f
  1694     0113  0834               	movf	pic_init@int_config+1,w
  1695     0114  0080               	movwf	0
  1696     0115  0A84               	incf	4,f
  1697     0116  0835               	movf	pic_init@int_config+2,w
  1698     0117  0080               	movwf	0
  1699     0118  0A84               	incf	4,f
  1700     0119  0836               	movf	pic_init@int_config+3,w
  1701     011A  0080               	movwf	0
  1702     011B  0A84               	incf	4,f
  1703     011C  0837               	movf	pic_init@int_config+4,w
  1704     011D  0080               	movwf	0
  1705     011E  0A84               	incf	4,f
  1706     011F  0838               	movf	pic_init@int_config+5,w
  1707     0120  0080               	movwf	0
  1708     0121  120A  118A  228C  120A  118A  	fcall	_init_int
  1709     0126                     l1025:
  1710                           
  1711                           ;src/main.c: 66:   init_adc(adc_config);
  1712     0126  3020               	movlw	init_adc@config& (0+255)
  1713     0127  0084               	movwf	4
  1714     0128  302C               	movlw	low pic_init@adc_config
  1715     0129  1283               	bcf	3,5	;RP0=0, select bank0
  1716     012A  1303               	bcf	3,6	;RP1=0, select bank0
  1717     012B  00A8               	movwf	??_pic_init
  1718     012C  0804               	movf	4,w
  1719     012D  00A9               	movwf	??_pic_init+1
  1720     012E  3007               	movlw	7
  1721     012F  00AA               	movwf	??_pic_init+2
  1722     0130                     u630:
  1723     0130  0828               	movf	??_pic_init,w
  1724     0131  0084               	movwf	4
  1725     0132  1383               	bcf	3,7	;select IRP bank0
  1726     0133  0800               	movf	0,w
  1727     0134  00AB               	movwf	??_pic_init+3
  1728     0135  0AA8               	incf	??_pic_init,f
  1729     0136  0829               	movf	??_pic_init+1,w
  1730     0137  0084               	movwf	4
  1731     0138  082B               	movf	??_pic_init+3,w
  1732     0139  0080               	movwf	0
  1733     013A  0AA9               	incf	??_pic_init+1,f
  1734     013B  0BAA               	decfsz	??_pic_init+2,f
  1735     013C  2930               	goto	u630
  1736     013D  120A  118A  2253  120A  118A  	fcall	_init_adc
  1737     0142                     l1027:
  1738                           
  1739                           ;src/main.c: 67:   init_gpio();
  1740     0142  120A  118A  2375  120A  118A  	fcall	_init_gpio
  1741     0147                     l104:
  1742     0147  0008               	return
  1743     0148                     __end_of_pic_init:
  1744                           
  1745                           	psect	text7
  1746     02C4                     __ptext7:	
  1747 ;; *************** function _init_osc *****************
  1748 ;; Defined at:
  1749 ;;		line 48 in file "src/initialisation.c"
  1750 ;; Parameters:    Size  Location     Type
  1751 ;;  config          3    0[BANK0 ] struct .
  1752 ;; Auto vars:     Size  Location     Type
  1753 ;;		None
  1754 ;; Return value:  Size  Location     Type
  1755 ;;                  1    wreg      void 
  1756 ;; Registers used:
  1757 ;;		wreg, status,2, status,0
  1758 ;; Tracked objects:
  1759 ;;		On entry : 0/0
  1760 ;;		On exit  : 0/0
  1761 ;;		Unchanged: 0/0
  1762 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1763 ;;      Params:         0       3       0       0       0
  1764 ;;      Locals:         0       0       0       0       0
  1765 ;;      Temps:          0       1       0       0       0
  1766 ;;      Totals:         0       4       0       0       0
  1767 ;;Total ram usage:        4 bytes
  1768 ;; Hardware stack levels used: 1
  1769 ;; Hardware stack levels required when called: 2
  1770 ;; This function calls:
  1771 ;;		Nothing
  1772 ;; This function is called by:
  1773 ;;		_pic_init
  1774 ;; This function uses a non-reentrant model
  1775 ;;
  1776                           
  1777     02C4                     _init_osc:	
  1778                           ;psect for function _init_osc
  1779                           
  1780     02C4                     l955:	
  1781                           ;incstack = 0
  1782                           ; Regs used in _init_osc: [wreg+status,2+status,0]
  1783                           
  1784                           
  1785                           ;src/initialisation.c: 50:   OSCCONbits.SCS = config.SCS;
  1786     02C4  1283               	bcf	3,5	;RP0=0, select bank0
  1787     02C5  1303               	bcf	3,6	;RP1=0, select bank0
  1788     02C6  0C20               	rrf	init_osc@config,w
  1789     02C7  1683               	bsf	3,5	;RP0=1, select bank1
  1790     02C8  1303               	bcf	3,6	;RP1=0, select bank1
  1791     02C9  1C03               	skipc
  1792     02CA  100F               	bcf	15,0	;volatile
  1793     02CB  1803               	skipnc
  1794     02CC  140F               	bsf	15,0	;volatile
  1795     02CD                     l957:
  1796                           
  1797                           ;src/initialisation.c: 52:   OSCCONbits.IRCF = config.IRCF;
  1798     02CD  1283               	bcf	3,5	;RP0=0, select bank0
  1799     02CE  1303               	bcf	3,6	;RP1=0, select bank0
  1800     02CF  0821               	movf	init_osc@config+1,w
  1801     02D0  00A3               	movwf	??_init_osc
  1802     02D1  0EA3               	swapf	??_init_osc,f
  1803     02D2  1683               	bsf	3,5	;RP0=1, select bank1
  1804     02D3  1303               	bcf	3,6	;RP1=0, select bank1
  1805     02D4  080F               	movf	15,w	;volatile
  1806     02D5  1283               	bcf	3,5	;RP0=0, select bank0
  1807     02D6  1303               	bcf	3,6	;RP1=0, select bank0
  1808     02D7  0623               	xorwf	??_init_osc,w
  1809     02D8  398F               	andlw	-113
  1810     02D9  0623               	xorwf	??_init_osc,w
  1811     02DA  1683               	bsf	3,5	;RP0=1, select bank1
  1812     02DB  1303               	bcf	3,6	;RP1=0, select bank1
  1813     02DC  008F               	movwf	15	;volatile
  1814     02DD                     l959:
  1815                           
  1816                           ;src/initialisation.c: 54:   OSCCONbits.OSTS = config.OSTS;
  1817     02DD  1283               	bcf	3,5	;RP0=0, select bank0
  1818     02DE  1303               	bcf	3,6	;RP1=0, select bank0
  1819     02DF  0C22               	rrf	init_osc@config+2,w
  1820     02E0  1683               	bsf	3,5	;RP0=1, select bank1
  1821     02E1  1303               	bcf	3,6	;RP1=0, select bank1
  1822     02E2  1C03               	skipc
  1823     02E3  118F               	bcf	15,3	;volatile
  1824     02E4  1803               	skipnc
  1825     02E5  158F               	bsf	15,3	;volatile
  1826                           
  1827                           ;src/initialisation.c: 57:   if (OSCCONbits.IRCF == KHZ032) {
  1828     02E6  0E0F               	swapf	15,w	;volatile
  1829     02E7  3907               	andlw	7
  1830     02E8  3A00               	xorlw	0
  1831     02E9  1D03               	skipz
  1832     02EA  2AEC               	goto	u541
  1833     02EB  2AED               	goto	u540
  1834     02EC                     u541:
  1835     02EC  2AF2               	goto	l27
  1836     02ED                     u540:
  1837     02ED                     l23:
  1838     02ED  1C8F               	btfss	15,1	;volatile
  1839     02EE  2AF0               	goto	u551
  1840     02EF  2AF1               	goto	u550
  1841     02F0                     u551:
  1842     02F0  2AED               	goto	l23
  1843     02F1                     u550:
  1844     02F1  2AF6               	goto	l30
  1845     02F2                     l27:
  1846     02F2  1D0F               	btfss	15,2	;volatile
  1847     02F3  2AF5               	goto	u561
  1848     02F4  2AF6               	goto	u560
  1849     02F5                     u561:
  1850     02F5  2AF2               	goto	l27
  1851     02F6                     u560:
  1852     02F6                     l30:
  1853     02F6  0008               	return
  1854     02F7                     __end_of_init_osc:
  1855                           
  1856                           	psect	text8
  1857     028C                     __ptext8:	
  1858 ;; *************** function _init_int *****************
  1859 ;; Defined at:
  1860 ;;		line 75 in file "src/initialisation.c"
  1861 ;; Parameters:    Size  Location     Type
  1862 ;;  config          6    0[BANK0 ] struct .
  1863 ;; Auto vars:     Size  Location     Type
  1864 ;;		None
  1865 ;; Return value:  Size  Location     Type
  1866 ;;                  1    wreg      void 
  1867 ;; Registers used:
  1868 ;;		wreg, status,0
  1869 ;; Tracked objects:
  1870 ;;		On entry : 0/0
  1871 ;;		On exit  : 0/0
  1872 ;;		Unchanged: 0/0
  1873 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1874 ;;      Params:         0       6       0       0       0
  1875 ;;      Locals:         0       0       0       0       0
  1876 ;;      Temps:          0       0       0       0       0
  1877 ;;      Totals:         0       6       0       0       0
  1878 ;;Total ram usage:        6 bytes
  1879 ;; Hardware stack levels used: 1
  1880 ;; Hardware stack levels required when called: 2
  1881 ;; This function calls:
  1882 ;;		Nothing
  1883 ;; This function is called by:
  1884 ;;		_pic_init
  1885 ;; This function uses a non-reentrant model
  1886 ;;
  1887                           
  1888     028C                     _init_int:	
  1889                           ;psect for function _init_int
  1890                           
  1891     028C                     l963:	
  1892                           ;incstack = 0
  1893                           ; Regs used in _init_int: [wreg+status,0]
  1894                           
  1895                           
  1896                           ;src/initialisation.c: 77:   INTCONbits.GIE = config.GIE;
  1897     028C  1283               	bcf	3,5	;RP0=0, select bank0
  1898     028D  1303               	bcf	3,6	;RP1=0, select bank0
  1899     028E  0C20               	rrf	init_int@config,w
  1900     028F  1C03               	skipc
  1901     0290  138B               	bcf	11,7	;volatile
  1902     0291  1803               	skipnc
  1903     0292  178B               	bsf	11,7	;volatile
  1904                           
  1905                           ;src/initialisation.c: 79:   INTCONbits.INTE = config.EINT;
  1906     0293  0C21               	rrf	init_int@config+1,w
  1907     0294  1C03               	skipc
  1908     0295  120B               	bcf	11,4	;volatile
  1909     0296  1803               	skipnc
  1910     0297  160B               	bsf	11,4	;volatile
  1911                           
  1912                           ;src/initialisation.c: 82:   INTCONbits.PEIE = config.PEIE;
  1913     0298  0C22               	rrf	init_int@config+2,w
  1914     0299  1C03               	skipc
  1915     029A  130B               	bcf	11,6	;volatile
  1916     029B  1803               	skipnc
  1917     029C  170B               	bsf	11,6	;volatile
  1918                           
  1919                           ;src/initialisation.c: 84:   INTCONbits.T0IE = config.T0IE;
  1920     029D  0C23               	rrf	init_int@config+3,w
  1921     029E  1C03               	skipc
  1922     029F  128B               	bcf	11,5	;volatile
  1923     02A0  1803               	skipnc
  1924     02A1  168B               	bsf	11,5	;volatile
  1925                           
  1926                           ;src/initialisation.c: 87:   INTCONbits.RBIE = config.RBIE;
  1927     02A2  0C24               	rrf	init_int@config+4,w
  1928     02A3  1C03               	skipc
  1929     02A4  118B               	bcf	11,3	;volatile
  1930     02A5  1803               	skipnc
  1931     02A6  158B               	bsf	11,3	;volatile
  1932     02A7                     l965:
  1933                           
  1934                           ;src/initialisation.c: 90:   IOCBbits.IOCB4 = 1;
  1935     02A7  1683               	bsf	3,5	;RP0=1, select bank1
  1936     02A8  1303               	bcf	3,6	;RP1=0, select bank1
  1937     02A9  1616               	bsf	22,4	;volatile
  1938     02AA                     l967:
  1939                           
  1940                           ;src/initialisation.c: 91:   IOCBbits.IOCB5 = 1;
  1941     02AA  1696               	bsf	22,5	;volatile
  1942                           
  1943                           ;src/initialisation.c: 94:   OPTION_REGbits.INTEDG = config.INTEDG;
  1944     02AB  1283               	bcf	3,5	;RP0=0, select bank0
  1945     02AC  1303               	bcf	3,6	;RP1=0, select bank0
  1946     02AD  0C25               	rrf	init_int@config+5,w
  1947     02AE  1683               	bsf	3,5	;RP0=1, select bank1
  1948     02AF  1303               	bcf	3,6	;RP1=0, select bank1
  1949     02B0  1C03               	skipc
  1950     02B1  1301               	bcf	1,6	;volatile
  1951     02B2  1803               	skipnc
  1952     02B3  1701               	bsf	1,6	;volatile
  1953     02B4                     l969:
  1954                           
  1955                           ;src/initialisation.c: 97:   if (INTCONbits.INTE == EINT_ENABLED) {
  1956     02B4  1E0B               	btfss	11,4	;volatile
  1957     02B5  2AB7               	goto	u571
  1958     02B6  2AB8               	goto	u570
  1959     02B7                     u571:
  1960     02B7  2AB9               	goto	l33
  1961     02B8                     u570:
  1962     02B8                     l971:
  1963                           
  1964                           ;src/initialisation.c: 98:     INTCONbits.INTF = INT_AWAITING;
  1965     02B8  108B               	bcf	11,1	;volatile
  1966     02B9                     l33:	
  1967                           ;src/initialisation.c: 99:   }
  1968                           
  1969                           
  1970                           ;src/initialisation.c: 100:   if (INTCONbits.RBIE == RBINT_ENABLED) {
  1971     02B9  1D8B               	btfss	11,3	;volatile
  1972     02BA  2ABC               	goto	u581
  1973     02BB  2ABD               	goto	u580
  1974     02BC                     u581:
  1975     02BC  2ABE               	goto	l34
  1976     02BD                     u580:
  1977     02BD                     l973:
  1978                           
  1979                           ;src/initialisation.c: 101:     INTCONbits.RBIF = INT_AWAITING;
  1980     02BD  100B               	bcf	11,0	;volatile
  1981     02BE                     l34:	
  1982                           ;src/initialisation.c: 102:   }
  1983                           
  1984                           
  1985                           ;src/initialisation.c: 103:   if (INTCONbits.T0IE == T0INT_ENABLED) {
  1986     02BE  1E8B               	btfss	11,5	;volatile
  1987     02BF  2AC1               	goto	u591
  1988     02C0  2AC2               	goto	u590
  1989     02C1                     u591:
  1990     02C1  2AC3               	goto	l36
  1991     02C2                     u590:
  1992     02C2                     l975:
  1993                           
  1994                           ;src/initialisation.c: 104:     INTCONbits.T0IF = INT_AWAITING;
  1995     02C2  110B               	bcf	11,2	;volatile
  1996     02C3                     l36:
  1997     02C3  0008               	return
  1998     02C4                     __end_of_init_int:
  1999                           
  2000                           	psect	text9
  2001     0375                     __ptext9:	
  2002 ;; *************** function _init_gpio *****************
  2003 ;; Defined at:
  2004 ;;		line 72 in file "src/main.c"
  2005 ;; Parameters:    Size  Location     Type
  2006 ;;		None
  2007 ;; Auto vars:     Size  Location     Type
  2008 ;;		None
  2009 ;; Return value:  Size  Location     Type
  2010 ;;                  1    wreg      void 
  2011 ;; Registers used:
  2012 ;;		wreg, status,2
  2013 ;; Tracked objects:
  2014 ;;		On entry : 0/0
  2015 ;;		On exit  : 0/0
  2016 ;;		Unchanged: 0/0
  2017 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2018 ;;      Params:         0       0       0       0       0
  2019 ;;      Locals:         0       0       0       0       0
  2020 ;;      Temps:          0       0       0       0       0
  2021 ;;      Totals:         0       0       0       0       0
  2022 ;;Total ram usage:        0 bytes
  2023 ;; Hardware stack levels used: 1
  2024 ;; Hardware stack levels required when called: 2
  2025 ;; This function calls:
  2026 ;;		Nothing
  2027 ;; This function is called by:
  2028 ;;		_pic_init
  2029 ;; This function uses a non-reentrant model
  2030 ;;
  2031                           
  2032     0375                     _init_gpio:	
  2033                           ;psect for function _init_gpio
  2034                           
  2035     0375                     l999:	
  2036                           ;incstack = 0
  2037                           ; Regs used in _init_gpio: [wreg+status,2]
  2038                           
  2039                           
  2040                           ;src/main.c: 74:   TRISA = OUTPUT;
  2041     0375  1683               	bsf	3,5	;RP0=1, select bank1
  2042     0376  1303               	bcf	3,6	;RP1=0, select bank1
  2043     0377  0185               	clrf	5	;volatile
  2044     0378                     l1001:
  2045                           
  2046                           ;src/main.c: 75:   PORTA = OFF;
  2047     0378  3001               	movlw	1
  2048     0379  1283               	bcf	3,5	;RP0=0, select bank0
  2049     037A  1303               	bcf	3,6	;RP1=0, select bank0
  2050     037B  0085               	movwf	5	;volatile
  2051     037C                     l1003:
  2052                           
  2053                           ;src/main.c: 77:   TRISBbits.TRISB4 = INPUT;
  2054     037C  1683               	bsf	3,5	;RP0=1, select bank1
  2055     037D  1303               	bcf	3,6	;RP1=0, select bank1
  2056     037E  1606               	bsf	6,4	;volatile
  2057     037F                     l1005:
  2058                           
  2059                           ;src/main.c: 78:   TRISBbits.TRISB5 = INPUT;
  2060     037F  1686               	bsf	6,5	;volatile
  2061     0380                     l1007:
  2062                           
  2063                           ;src/main.c: 80:   TRISEbits.TRISE2 = INPUT;
  2064     0380  1509               	bsf	9,2	;volatile
  2065     0381                     l1009:
  2066                           
  2067                           ;src/main.c: 82:   ANSEL = 0;
  2068     0381  1683               	bsf	3,5	;RP0=1, select bank3
  2069     0382  1703               	bsf	3,6	;RP1=1, select bank3
  2070     0383  0188               	clrf	8	;volatile
  2071     0384                     l1011:
  2072                           
  2073                           ;src/main.c: 83:   ANSELH = 0;
  2074     0384  0189               	clrf	9	;volatile
  2075     0385                     l1013:
  2076                           
  2077                           ;src/main.c: 84:   ANSELbits.ANS7 = 1;
  2078     0385  1788               	bsf	8,7	;volatile
  2079     0386                     l107:
  2080     0386  0008               	return
  2081     0387                     __end_of_init_gpio:
  2082                           
  2083                           	psect	text10
  2084     0253                     __ptext10:	
  2085 ;; *************** function _init_adc *****************
  2086 ;; Defined at:
  2087 ;;		line 119 in file "src/initialisation.c"
  2088 ;; Parameters:    Size  Location     Type
  2089 ;;  config          7    0[BANK0 ] struct .
  2090 ;; Auto vars:     Size  Location     Type
  2091 ;;		None
  2092 ;; Return value:  Size  Location     Type
  2093 ;;                  1    wreg      void 
  2094 ;; Registers used:
  2095 ;;		wreg, status,2, status,0
  2096 ;; Tracked objects:
  2097 ;;		On entry : 0/0
  2098 ;;		On exit  : 0/0
  2099 ;;		Unchanged: 0/0
  2100 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2101 ;;      Params:         0       7       0       0       0
  2102 ;;      Locals:         0       0       0       0       0
  2103 ;;      Temps:          0       1       0       0       0
  2104 ;;      Totals:         0       8       0       0       0
  2105 ;;Total ram usage:        8 bytes
  2106 ;; Hardware stack levels used: 1
  2107 ;; Hardware stack levels required when called: 2
  2108 ;; This function calls:
  2109 ;;		Nothing
  2110 ;; This function is called by:
  2111 ;;		_pic_init
  2112 ;; This function uses a non-reentrant model
  2113 ;;
  2114                           
  2115     0253                     _init_adc:	
  2116                           ;psect for function _init_adc
  2117                           
  2118     0253                     l977:	
  2119                           ;incstack = 0
  2120                           ; Regs used in _init_adc: [wreg+status,2+status,0]
  2121                           
  2122                           
  2123                           ;src/initialisation.c: 121:   ADCON0bits.ADON = config.ADON;
  2124     0253  1283               	bcf	3,5	;RP0=0, select bank0
  2125     0254  1303               	bcf	3,6	;RP1=0, select bank0
  2126     0255  0C20               	rrf	init_adc@config,w
  2127     0256  1C03               	skipc
  2128     0257  101F               	bcf	31,0	;volatile
  2129     0258  1803               	skipnc
  2130     0259  141F               	bsf	31,0	;volatile
  2131                           
  2132                           ;src/initialisation.c: 123:   ADCON0bits.GO_nDONE = config.GO_nDONE;
  2133     025A  0C26               	rrf	init_adc@config+6,w
  2134     025B  1C03               	skipc
  2135     025C  109F               	bcf	31,1	;volatile
  2136     025D  1803               	skipnc
  2137     025E  149F               	bsf	31,1	;volatile
  2138     025F                     l979:
  2139                           
  2140                           ;src/initialisation.c: 125:   ADCON0bits.CHS = config.CHS;
  2141     025F  0822               	movf	init_adc@config+2,w
  2142     0260  00A7               	movwf	??_init_adc
  2143     0261  0DA7               	rlf	??_init_adc,f
  2144     0262  0DA7               	rlf	??_init_adc,f
  2145     0263  081F               	movf	31,w	;volatile
  2146     0264  0627               	xorwf	??_init_adc,w
  2147     0265  39C3               	andlw	-61
  2148     0266  0627               	xorwf	??_init_adc,w
  2149     0267  009F               	movwf	31	;volatile
  2150     0268                     l981:
  2151                           
  2152                           ;src/initialisation.c: 127:   ADCON0bits.ADCS = config.ADCS;
  2153     0268  0823               	movf	init_adc@config+3,w
  2154     0269  00A7               	movwf	??_init_adc
  2155     026A  0EA7               	swapf	??_init_adc,f
  2156     026B  0DA7               	rlf	??_init_adc,f
  2157     026C  0DA7               	rlf	??_init_adc,f
  2158     026D  081F               	movf	31,w	;volatile
  2159     026E  0627               	xorwf	??_init_adc,w
  2160     026F  393F               	andlw	-193
  2161     0270  0627               	xorwf	??_init_adc,w
  2162     0271  009F               	movwf	31	;volatile
  2163                           
  2164                           ;src/initialisation.c: 130:   ADCON1bits.ADFM = config.ADFM;
  2165     0272  0C21               	rrf	init_adc@config+1,w
  2166     0273  1683               	bsf	3,5	;RP0=1, select bank1
  2167     0274  1303               	bcf	3,6	;RP1=0, select bank1
  2168     0275  1C03               	skipc
  2169     0276  139F               	bcf	31,7	;volatile
  2170     0277  1803               	skipnc
  2171     0278  179F               	bsf	31,7	;volatile
  2172                           
  2173                           ;src/initialisation.c: 132:   ADCON1bits.VCFG1 = config.VCFG1;
  2174     0279  1283               	bcf	3,5	;RP0=0, select bank0
  2175     027A  1303               	bcf	3,6	;RP1=0, select bank0
  2176     027B  0C25               	rrf	init_adc@config+5,w
  2177     027C  1683               	bsf	3,5	;RP0=1, select bank1
  2178     027D  1303               	bcf	3,6	;RP1=0, select bank1
  2179     027E  1C03               	skipc
  2180     027F  129F               	bcf	31,5	;volatile
  2181     0280  1803               	skipnc
  2182     0281  169F               	bsf	31,5	;volatile
  2183                           
  2184                           ;src/initialisation.c: 133:   ADCON1bits.VCFG0 = config.VCFG0;
  2185     0282  1283               	bcf	3,5	;RP0=0, select bank0
  2186     0283  1303               	bcf	3,6	;RP1=0, select bank0
  2187     0284  0C24               	rrf	init_adc@config+4,w
  2188     0285  1683               	bsf	3,5	;RP0=1, select bank1
  2189     0286  1303               	bcf	3,6	;RP1=0, select bank1
  2190     0287  1C03               	skipc
  2191     0288  121F               	bcf	31,4	;volatile
  2192     0289  1803               	skipnc
  2193     028A  161F               	bsf	31,4	;volatile
  2194     028B                     l39:
  2195     028B  0008               	return
  2196     028C                     __end_of_init_adc:
  2197                           
  2198                           	psect	text11
  2199     02F7                     __ptext11:	
  2200 ;; *************** function _isr *****************
  2201 ;; Defined at:
  2202 ;;		line 88 in file "src/main.c"
  2203 ;; Parameters:    Size  Location     Type
  2204 ;;		None
  2205 ;; Auto vars:     Size  Location     Type
  2206 ;;		None
  2207 ;; Return value:  Size  Location     Type
  2208 ;;                  1    wreg      void 
  2209 ;; Registers used:
  2210 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2211 ;; Tracked objects:
  2212 ;;		On entry : 0/0
  2213 ;;		On exit  : 0/0
  2214 ;;		Unchanged: 0/0
  2215 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2216 ;;      Params:         0       0       0       0       0
  2217 ;;      Locals:         0       0       0       0       0
  2218 ;;      Temps:          5       0       0       0       0
  2219 ;;      Totals:         5       0       0       0       0
  2220 ;;Total ram usage:        5 bytes
  2221 ;; Hardware stack levels used: 1
  2222 ;; Hardware stack levels required when called: 1
  2223 ;; This function calls:
  2224 ;;		_parse_rotary
  2225 ;; This function is called by:
  2226 ;;		Interrupt level 1
  2227 ;; This function uses a non-reentrant model
  2228 ;;
  2229                           
  2230     02F7                     _isr:	
  2231                           ;psect for function _isr
  2232                           
  2233     02F7                     i1l1093:
  2234                           
  2235                           ;src/main.c: 89:   if (INTCONbits.RBIF == 1) {
  2236     02F7  1C0B               	btfss	11,0	;volatile
  2237     02F8  2AFA               	goto	u77_21
  2238     02F9  2AFB               	goto	u77_20
  2239     02FA                     u77_21:
  2240     02FA  2B1C               	goto	i1l113
  2241     02FB                     u77_20:
  2242     02FB                     i1l1095:
  2243                           
  2244                           ;src/main.c: 91:     parse_rotary(PORTBbits.RB4, PORTBbits.RB5, &count, 4, 0);
  2245     02FB  3000               	movlw	0
  2246     02FC  1283               	bcf	3,5	;RP0=0, select bank0
  2247     02FD  1303               	bcf	3,6	;RP1=0, select bank0
  2248     02FE  1A86               	btfsc	6,5	;volatile
  2249     02FF  3001               	movlw	1
  2250     0300  00F0               	movwf	parse_rotary@pinB
  2251     0301  307D               	movlw	(low (_count| 0))& (0+255)
  2252     0302  00F1               	movwf	parse_rotary@counter
  2253     0303  3004               	movlw	4
  2254     0304  00F2               	movwf	parse_rotary@max
  2255     0305  01F3               	clrf	parse_rotary@min
  2256     0306  0E06               	swapf	6,w	;volatile
  2257     0307  3901               	andlw	1
  2258     0308  120A  118A  220D  120A  118A  	fcall	_parse_rotary
  2259     030D                     i1l1097:
  2260                           
  2261                           ;src/main.c: 92:     PORTA = (unsigned char) (~(1 << count));
  2262     030D  3001               	movlw	1
  2263     030E  00F7               	movwf	??_isr
  2264     030F  0A7D               	incf	_count,w
  2265     0310  2B13               	goto	u78_24
  2266     0311                     u78_25:
  2267     0311  1003               	clrc
  2268     0312  0DF7               	rlf	??_isr,f
  2269     0313                     u78_24:
  2270     0313  3EFF               	addlw	-1
  2271     0314  1D03               	skipz
  2272     0315  2B11               	goto	u78_25
  2273     0316  0877               	movf	??_isr,w
  2274     0317  3AFF               	xorlw	255
  2275     0318  1283               	bcf	3,5	;RP0=0, select bank0
  2276     0319  1303               	bcf	3,6	;RP1=0, select bank0
  2277     031A  0085               	movwf	5	;volatile
  2278     031B                     i1l1099:
  2279                           
  2280                           ;src/main.c: 95:     INTCONbits.RBIF = INT_AWAITING;
  2281     031B  100B               	bcf	11,0	;volatile
  2282     031C                     i1l113:
  2283     031C  087B               	movf	??_isr+4,w
  2284     031D  00FF               	movwf	btemp+1
  2285     031E  087A               	movf	??_isr+3,w
  2286     031F  008A               	movwf	10
  2287     0320  0879               	movf	??_isr+2,w
  2288     0321  0084               	movwf	4
  2289     0322  0E78               	swapf	??_isr+1,w
  2290     0323  0083               	movwf	3
  2291     0324  0EFE               	swapf	btemp,f
  2292     0325  0E7E               	swapf	btemp,w
  2293     0326  0009               	retfie
  2294     0327                     __end_of_isr:
  2295                           
  2296                           	psect	intentry
  2297     0004                     __pintentry:	
  2298                           ;incstack = 0
  2299                           ; Regs used in _isr: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2300                           
  2301     0004                     interrupt_function:
  2302     007E                     saved_w	set	btemp
  2303     0004  00FE               	movwf	btemp
  2304     0005  0E03               	swapf	3,w
  2305     0006  00F8               	movwf	??_isr+1
  2306     0007  0804               	movf	4,w
  2307     0008  00F9               	movwf	??_isr+2
  2308     0009  080A               	movf	10,w
  2309     000A  00FA               	movwf	??_isr+3
  2310     000B  087F               	movf	btemp+1,w
  2311     000C  00FB               	movwf	??_isr+4
  2312     000D  120A  118A  2AF7   	ljmp	_isr
  2313                           
  2314                           	psect	text12
  2315     020D                     __ptext12:	
  2316 ;; *************** function _parse_rotary *****************
  2317 ;; Defined at:
  2318 ;;		line 7 in file "src/rotary_encoder.c"
  2319 ;; Parameters:    Size  Location     Type
  2320 ;;  pinA            1    wreg     unsigned char 
  2321 ;;  pinB            1    0[COMMON] unsigned char 
  2322 ;;  counter         1    1[COMMON] PTR unsigned char 
  2323 ;;		 -> count(1), 
  2324 ;;  max             1    2[COMMON] unsigned char 
  2325 ;;  min             1    3[COMMON] unsigned char 
  2326 ;; Auto vars:     Size  Location     Type
  2327 ;;  pinA            1    5[COMMON] unsigned char 
  2328 ;;  state           1    6[COMMON] unsigned char 
  2329 ;; Return value:  Size  Location     Type
  2330 ;;                  1    wreg      void 
  2331 ;; Registers used:
  2332 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  2333 ;; Tracked objects:
  2334 ;;		On entry : 0/0
  2335 ;;		On exit  : 0/0
  2336 ;;		Unchanged: 0/0
  2337 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2338 ;;      Params:         4       0       0       0       0
  2339 ;;      Locals:         2       0       0       0       0
  2340 ;;      Temps:          1       0       0       0       0
  2341 ;;      Totals:         7       0       0       0       0
  2342 ;;Total ram usage:        7 bytes
  2343 ;; Hardware stack levels used: 1
  2344 ;; This function calls:
  2345 ;;		Nothing
  2346 ;; This function is called by:
  2347 ;;		_isr
  2348 ;; This function uses a non-reentrant model
  2349 ;;
  2350                           
  2351     020D                     _parse_rotary:	
  2352                           ;psect for function _parse_rotary
  2353                           
  2354                           
  2355                           ;incstack = 0
  2356                           ; Regs used in _parse_rotary: [wreg-fsr0h+status,2+status,0+btemp+1]
  2357                           ;parse_rotary@pinA stored from wreg
  2358     020D  00F5               	movwf	parse_rotary@pinA
  2359     020E                     i1l1053:
  2360                           
  2361                           ;src/rotary_encoder.c: 9:   static unsigned char prevState;;src/rotary_encoder.c: 10:   
      +                          unsigned char state;;src/rotary_encoder.c: 13:   _delay((unsigned long)((1)*(500000/4000
      +                          .0)));
  2362     020E  3029               	movlw	41
  2363     020F  00F4               	movwf	??_parse_rotary
  2364     0210                     u81_27:
  2365     0210  0BF4               	decfsz	??_parse_rotary,f
  2366     0211  2A10               	goto	u81_27
  2367     0212  0000               	nop
  2368     0213                     i1l1055:
  2369                           
  2370                           ;src/rotary_encoder.c: 16:   state = (unsigned char)(pinB << 1 | pinA);
  2371     0213  0870               	movf	parse_rotary@pinB,w
  2372     0214  00F4               	movwf	??_parse_rotary
  2373     0215  0774               	addwf	??_parse_rotary,w
  2374     0216  0475               	iorwf	parse_rotary@pinA,w
  2375     0217  00F6               	movwf	parse_rotary@state
  2376     0218                     i1l1057:
  2377                           
  2378                           ;src/rotary_encoder.c: 19:   if (prevState == 0) {
  2379     0218  087C               	movf	parse_rotary@prevState,w
  2380     0219  1D03               	btfss	3,2
  2381     021A  2A1C               	goto	u70_21
  2382     021B  2A1D               	goto	u70_20
  2383     021C                     u70_21:
  2384     021C  2A33               	goto	i1l1067
  2385     021D                     u70_20:
  2386     021D                     i1l1059:
  2387                           
  2388                           ;src/rotary_encoder.c: 20:     if (state == ROTATE_LEFT) (*counter)--;
  2389     021D  0376               	decf	parse_rotary@state,w
  2390     021E  1D03               	btfss	3,2
  2391     021F  2A21               	goto	u71_21
  2392     0220  2A22               	goto	u71_20
  2393     0221                     u71_21:
  2394     0221  2A27               	goto	i1l1063
  2395     0222                     u71_20:
  2396     0222                     i1l1061:
  2397     0222  0871               	movf	parse_rotary@counter,w
  2398     0223  0084               	movwf	4
  2399     0224  3001               	movlw	1
  2400     0225  0280               	subwf	0,f
  2401     0226  2A33               	goto	i1l1067
  2402     0227                     i1l1063:
  2403     0227  3002               	movlw	2
  2404     0228  0676               	xorwf	parse_rotary@state,w
  2405     0229  1D03               	btfss	3,2
  2406     022A  2A2C               	goto	u72_21
  2407     022B  2A2D               	goto	u72_20
  2408     022C                     u72_21:
  2409     022C  2A33               	goto	i1l1067
  2410     022D                     u72_20:
  2411     022D                     i1l1065:
  2412     022D  3001               	movlw	1
  2413     022E  00FF               	movwf	btemp+1
  2414     022F  0871               	movf	parse_rotary@counter,w
  2415     0230  0084               	movwf	4
  2416     0231  087F               	movf	btemp+1,w
  2417     0232  0780               	addwf	0,f
  2418     0233                     i1l1067:
  2419                           
  2420                           ;src/rotary_encoder.c: 25:   if (*counter > max) *counter = min;
  2421     0233  0871               	movf	parse_rotary@counter,w
  2422     0234  0084               	movwf	4
  2423     0235  0800               	movf	0,w
  2424     0236  0272               	subwf	parse_rotary@max,w
  2425     0237  1803               	skipnc
  2426     0238  2A3A               	goto	u73_21
  2427     0239  2A3B               	goto	u73_20
  2428     023A                     u73_21:
  2429     023A  2A40               	goto	i1l1071
  2430     023B                     u73_20:
  2431     023B                     i1l1069:
  2432     023B  0871               	movf	parse_rotary@counter,w
  2433     023C  0084               	movwf	4
  2434     023D  0873               	movf	parse_rotary@min,w
  2435     023E  0080               	movwf	0
  2436     023F  2A4C               	goto	i1l1075
  2437     0240                     i1l1071:
  2438     0240  0871               	movf	parse_rotary@counter,w
  2439     0241  0084               	movwf	4
  2440     0242  0873               	movf	parse_rotary@min,w
  2441     0243  0200               	subwf	0,w
  2442     0244  1803               	skipnc
  2443     0245  2A47               	goto	u74_21
  2444     0246  2A48               	goto	u74_20
  2445     0247                     u74_21:
  2446     0247  2A4C               	goto	i1l1075
  2447     0248                     u74_20:
  2448     0248                     i1l1073:
  2449     0248  0871               	movf	parse_rotary@counter,w
  2450     0249  0084               	movwf	4
  2451     024A  0872               	movf	parse_rotary@max,w
  2452     024B  0080               	movwf	0
  2453     024C                     i1l1075:
  2454                           
  2455                           ;src/rotary_encoder.c: 30:   prevState = state;
  2456     024C  0876               	movf	parse_rotary@state,w
  2457     024D  00FC               	movwf	parse_rotary@prevState
  2458     024E                     i1l1077:
  2459                           
  2460                           ;src/rotary_encoder.c: 31:   PORTB = PORTB;
  2461     024E  1283               	bcf	3,5	;RP0=0, select bank0
  2462     024F  1303               	bcf	3,6	;RP1=0, select bank0
  2463     0250  0806               	movf	6,w	;volatile
  2464     0251  0086               	movwf	6	;volatile
  2465     0252                     i1l129:
  2466     0252  0008               	return
  2467     0253                     __end_of_parse_rotary:
  2468     007E                     btemp	set	126	;btemp
  2469     007E                     wtemp0	set	126
  2470                           
  2471                           	psect	config
  2472                           
  2473                           ;Config register CONFIG1 @ 0x2007
  2474                           ;	Oscillator Selection bits
  2475                           ;	FOSC = INTRC_NOCLKOUT, INTOSCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O f
      +                          unction on RA7/OSC1/CLKIN
  2476                           ;	Watchdog Timer Enable bit
  2477                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  2478                           ;	Power-up Timer Enable bit
  2479                           ;	PWRTE = ON, PWRT enabled
  2480                           ;	RE3/MCLR pin function select bit
  2481                           ;	MCLRE = OFF, RE3/MCLR pin function is digital input, MCLR internally tied to VDD
  2482                           ;	Code Protection bit
  2483                           ;	CP = OFF, Program memory code protection is disabled
  2484                           ;	Data Code Protection bit
  2485                           ;	CPD = OFF, Data memory code protection is disabled
  2486                           ;	Brown Out Reset Selection bits
  2487                           ;	BOREN = ON, BOR enabled
  2488                           ;	Internal External Switchover bit
  2489                           ;	IESO = OFF, Internal/External Switchover mode is disabled
  2490                           ;	Fail-Safe Clock Monitor Enabled bit
  2491                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
  2492                           ;	Low Voltage Programming Enable bit
  2493                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
  2494                           ;	In-Circuit Debugger Mode bit
  2495                           ;	DEBUG = 0x1, unprogrammed default
  2496     2007                     	org	8199
  2497     2007  23C4               	dw	9156
  2498                           
  2499                           ;Config register CONFIG2 @ 0x2008
  2500                           ;	Brown-out Reset Selection bit
  2501                           ;	BOR4V = BOR40V, Brown-out Reset set to 4.0V
  2502                           ;	Flash Program Memory Self Write Enable bits
  2503                           ;	WRT = OFF, Write protection off
  2504     2008                     	org	8200
  2505     2008  3FFF               	dw	16383

Data Sizes:
    Strings     0
    Constant    0
    Data        16
    BSS         10
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      14
    BANK0            80     35      59
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    init_gpio2@config$ansel	PTR volatile unsigned char  size(1) Largest target is 0

    init_gpio2@config$lat	PTR volatile unsigned char  size(1) Largest target is 0

    init_gpio2@config$tris	PTR volatile unsigned char  size(1) Largest target is 0

    init_gpio2@size$ansel	PTR volatile unsigned char  size(1) Largest target is 0

    init_gpio2@size$lat	PTR volatile unsigned char  size(1) Largest target is 0

    init_gpio2@size$tris	PTR volatile unsigned char  size(1) Largest target is 0

    parse_rotary@counter	PTR unsigned char  size(1) Largest target is 1
		 -> count(COMMON[1]), 

    populate_step_array@array	PTR int  size(1) Largest target is 8
		 -> pic_loop@stepArray(BANK0[8]), 

    S28$ansel	PTR volatile unsigned char  size(1) Largest target is 0

    S28$lat	PTR volatile unsigned char  size(1) Largest target is 0

    S28$tris	PTR volatile unsigned char  size(1) Largest target is 0


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _isr->_parse_rotary

Critical Paths under _main in BANK0

    _main->_pic_loop
    _pic_loop->_populate_step_array
    _populate_step_array->___awdiv
    _pic_init->_init_adc

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    2019
                           _pic_init
                           _pic_loop
 ---------------------------------------------------------------------------------
 (1) _pic_loop                                            18    18      0    1357
                                             17 BANK0     18    18      0
                _populate_step_array
                 _read_potentiometer
 ---------------------------------------------------------------------------------
 (2) _read_potentiometer                                   4     2      2      23
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (2) _populate_step_array                                  9     5      4    1081
                                              8 BANK0      9     5      4
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     244
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     452
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _pic_init                                            20    20      0     662
                                              8 BANK0     20    20      0
                           _init_adc
                          _init_gpio
                           _init_int
                           _init_osc
 ---------------------------------------------------------------------------------
 (2) _init_osc                                             4     1      3     144
                                              0 BANK0      4     1      3
 ---------------------------------------------------------------------------------
 (2) _init_int                                             6     0      6     213
                                              0 BANK0      6     0      6
 ---------------------------------------------------------------------------------
 (2) _init_gpio                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_adc                                             8     1      7     236
                                              0 BANK0      8     1      7
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _isr                                                  5     5      0     635
                                              7 COMMON     5     5      0
                       _parse_rotary
 ---------------------------------------------------------------------------------
 (5) _parse_rotary                                         7     3      4     635
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _pic_init
     _init_adc
     _init_gpio
     _init_int
     _init_osc
   _pic_loop
     _populate_step_array
       ___awdiv
       ___wmul
     _read_potentiometer

 _isr (ROOT)
   _parse_rotary

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     23      3B       5       73.8%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      C       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      49      12        0.0%
ABS                  0      0      49       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Thu Nov 23 23:06:07 2023

              pic_init@F1593 0043                pic_init@F1595 0050                pic_init@F1597 004A  
                          pc 0002                           l30 02F6                           l23 02ED  
                         l33 02B9                           l34 02BE                           l27 02F2  
                         l36 02C3                           l39 028B                           l82 03A1  
                         _GO 00F9                 ___awdiv@sign 0025                           fsr 0004  
        ___wmul@multiplicand 0022                          l104 0147                          l107 0386  
                        l143 020C                          l146 0351                          l235 0335  
                        l237 034D                          l149 0361                          l388 01B0  
                        l901 032F                          l911 0148                          l903 033C  
                        l921 015A                          l913 014B                          l905 0343  
                        l931 016E                          l923 015F                          l915 014F  
                        l907 0349                          l941 0194                          l933 0175  
                        l925 0163                          l917 0154                          l951 01AC  
                        l943 0195                          l935 0179                          l927 0165  
                        l919 0156                          l945 019C                          l937 017D  
                        l929 016B                          l971 02B8                          l963 028C  
                        l955 02C4                          l939 018E                          l947 01A2  
                        l981 0268                          l973 02BD                          l965 02A7  
                        l957 02CD                          l949 01A7                          l975 02C2  
                        l967 02AA                          l959 02DD                          l991 01FE  
                        l983 01B4                          l977 0253                          l969 02B4  
                        l897 0327                          l985 01CF                          l993 034E  
                        l979 025F                          l899 032B                          l987 01D2  
                        l995 0355                          l989 01F8                          l999 0375  
                        u400 032F                          u401 032E                          u500 018E  
                        u501 018D                          u430 0349                          u431 0348  
                        u415 0336                          u520 01A2                          u440 014F  
                        u600 020C                          u521 01A1                          u505 018A  
                        u441 014E                          u425 033D                          u601 020B  
                        u530 01A7                          u450 015A                          u610 0355  
                        u531 01A6                          u515 0196                          u451 0159  
                        u611 0354                          u540 02ED                          u620 00DA  
                        u460 016B                          u541 02EC                          u461 016A  
                        u605 0208                          u550 02F1                          u630 0130  
                        u551 02F0                          u560 02F6                          u480 017D  
                        u640 0033                          u561 02F5                          u481 017C  
                        u570 02B8                          u650 0078                          u571 02B7  
                        u475 016F                          u651 0077                          u580 02BD  
                        u581 02BC                          u590 02C2                          u670 00AB  
                        u591 02C1                          u495 017E                          u671 00AA  
                        u655 0074                          u664 0080                          u665 007E  
                        u690 00CE                          u691 00CD                          u675 00A7  
                        u684 00B3                          u685 00B1                          u695 00CA  
                        _isr 02F7                          fsr0 0004                          indf 0000  
              pic_loop@F1588 0053                         l1001 0378                         l1011 0384  
                       l1003 037C                         l1013 0385                         l1005 037F  
                       l1021 0100                         l1007 0380                         l1023 010B  
                       l1015 00D0                         l1031 0038                         l1009 0381  
                       l1025 0126                         l1017 00E7                         l1041 0055  
                       l1033 0048                         l1027 0142                         l1019 00ED  
                       l1051 00C1                         l1043 0078                         l1035 0053  
                       l1045 0088                         l1029 002F                         l1047 00AB  
                       l1049 00B9                         l1091 039C                         l1089 0397  
                       ?_isr 0070                         _main 0397                         btemp 007E  
                       start 0010            pic_loop@stepArray 0037                        ??_isr 0077  
                      ?_main 0070              __end_of___awdiv 01B1                        _ANSEL 0188  
            ___awdiv@divisor 0020              parse_rotary@max 0072              parse_rotary@min 0073  
                      i1l113 031C                        i1l129 0252              ___awdiv@counter 0024  
                      _PORTA 0005                        _PORTB 0006                        u70_20 021D  
                      u70_21 021C                        u71_20 0222                        u71_21 0221  
                      u72_20 022D                        u72_21 022C                        u73_20 023B  
                      u73_21 023A                        _TRISA 0085                        u81_27 0210  
                      u74_20 0248                        u74_21 0247                        u77_20 02FB  
                      u77_21 02FA                        u78_24 0313                        u78_25 0311  
        _populate_step_array 01B1                        _count 007D                        pclath 000A  
                      status 0003                        wtemp0 007E     read_potentiometer@result 0022  
       ?_populate_step_array 0028               pic_loop@result 003F              __initialization 0013  
               __end_of_main 03A4                       ??_main 0043                       _ADRESH 001E  
                     _ADRESL 009E             ___awdiv@dividend 0022                       _ANSELH 0189  
           parse_rotary@pinA 0075             parse_rotary@pinB 0070                       i1l1061 0222  
                     i1l1053 020E                       i1l1071 0240                       i1l1063 0227  
                     i1l1055 0213                       i1l1073 0248                       i1l1065 022D  
                     i1l1057 0218                       i1l1075 024C                       i1l1059 021D  
                     i1l1067 0233                       i1l1077 024E                       i1l1069 023B  
                     i1l1093 02F7                       i1l1095 02FB                       i1l1097 030D  
                     i1l1099 031B        ??_populate_step_array 002C                       ___wmul 0327  
                  ??___awdiv 0024             __end_of_init_adc 028C             __end_of_init_int 02C4  
           __end_of_init_osc 02F7             ___awdiv@quotient 0026             __end_of_pic_init 0148  
           __end_of_pic_loop 00D0                       saved_w 007E      __end_of__initialization 002B  
   populate_step_array@array 0030               __pcstackCOMMON 0070                 __pidataBANK0 0387  
              ?_parse_rotary 0070               _OPTION_REGbits 0081                   __pbssBANK0 0053  
                 __pmaintext 0397                      ?___wmul 0020                   __pintentry 0004  
             ??_parse_rotary 0074            parse_rotary@state 0076                    ?_init_adc 0020  
                  ?_init_int 0020                    ?_init_osc 0020                    ?_pic_init 0070  
                  ?_pic_loop 0070   __end_of_read_potentiometer 0362                      ___awdiv 0148  
                  _ANSELbits 0188                      __ptext1 002F                      __ptext2 034E  
                    __ptext3 01B1                      __ptext4 0327                      __ptext5 0148  
                    __ptext6 00D0                      __ptext7 02C4                      __ptext8 028C  
                    __ptext9 0375            __end_of_init_gpio 0387          parse_rotary@counter 0071  
       end_of_initialization 002B                   ??_init_adc 0027                   ??_init_int 0026  
                 ??_init_osc 0023                   ??_pic_init 0028                   ??_pic_loop 0031  
                  _PORTBbits 0006                    _TRISBbits 0086                    _TRISEbits 0089  
__end_of_populate_step_array 020D         __end_of_parse_rotary 0253               __end_of___wmul 034E  
        start_initialization 0013                  __end_of_isr 0327                     ??___wmul 0024  
                 init_fetch0 0362               init_adc@config 0020                  __pdataBANK0 0043  
populate_step_array@potLimit 002A                  __pbssCOMMON 007C                    ___latbits 0002  
    populate_step_array@size 0028                __pcstackBANK0 0020                     ?___awdiv 0020  
         pic_init@adc_config 002C           _read_potentiometer 034E                    _init_gpio 0375  
        ?_read_potentiometer 0020            interrupt_function 0004               ___wmul@product 0024  
                   _IOCBbits 0096         ??_read_potentiometer 0022                 _parse_rotary 020D  
                 _ADCON0bits 001F                   _ADCON1bits 009F            ___wmul@multiplier 0020  
             init_int@config 0020                   ?_init_gpio 0070        parse_rotary@prevState 007C  
             init_osc@config 0020                    pic_loop@i 0041           pic_init@int_config 0033  
                   __ptext10 0253                     __ptext11 02F7                     __ptext12 020D  
                   _init_adc 0253                     _init_int 028C                     _init_osc 02C4  
                   _pic_init 00D0                     _pic_loop 002F           pic_init@osc_config 0039  
                 _INTCONbits 000B                     init_ram0 0366                  ??_init_gpio 0020  
                   intlevel1 0000                   _OSCCONbits 008F         populate_step_array@i 002E  
