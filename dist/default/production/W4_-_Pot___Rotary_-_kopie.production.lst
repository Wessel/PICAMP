

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Fri Nov 24 13:39:56 2023

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	inittext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2,group=1
    17                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    18                           	psect	text6,local,class=CODE,merge=1,delta=2
    19                           	psect	text7,local,class=CODE,merge=1,delta=2
    20                           	psect	text8,local,class=CODE,merge=1,delta=2
    21                           	psect	text9,local,class=CODE,merge=1,delta=2
    22                           	psect	text10,local,class=CODE,merge=1,delta=2
    23                           	psect	text11,local,class=CODE,merge=1,delta=2
    24                           	psect	intentry,global,class=CODE,delta=2
    25                           	psect	text12,local,class=CODE,merge=1,delta=2
    26                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    27                           	dabs	1,0x7E,2
    28     0000                     
    29                           ; Generated 22/03/2023 GMT
    30                           ; 
    31                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    32                           ; All rights reserved.
    33                           ; 
    34                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    35                           ; 
    36                           ; Redistribution and use in source and binary forms, with or without modification, are
    37                           ; permitted provided that the following conditions are met:
    38                           ; 
    39                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    40                           ;        conditions and the following disclaimer.
    41                           ; 
    42                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    43                           ;        of conditions and the following disclaimer in the documentation and/or other
    44                           ;        materials provided with the distribution. Publication is not required when
    45                           ;        this file is used in an embedded application.
    46                           ; 
    47                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    48                           ;        software without specific prior written permission.
    49                           ; 
    50                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    51                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    52                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    53                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    54                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    55                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    56                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    57                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    58                           ; 
    59                           ; 
    60                           ; Code-generator required, PIC16F887 Definitions
    61                           ; 
    62                           ; SFR Addresses
    63     0000                     	;# 
    64     0001                     	;# 
    65     0002                     	;# 
    66     0003                     	;# 
    67     0004                     	;# 
    68     0005                     	;# 
    69     0006                     	;# 
    70     0007                     	;# 
    71     0008                     	;# 
    72     0009                     	;# 
    73     000A                     	;# 
    74     000B                     	;# 
    75     000C                     	;# 
    76     000D                     	;# 
    77     000E                     	;# 
    78     000E                     	;# 
    79     000F                     	;# 
    80     0010                     	;# 
    81     0011                     	;# 
    82     0012                     	;# 
    83     0013                     	;# 
    84     0014                     	;# 
    85     0015                     	;# 
    86     0015                     	;# 
    87     0016                     	;# 
    88     0017                     	;# 
    89     0018                     	;# 
    90     0019                     	;# 
    91     001A                     	;# 
    92     001B                     	;# 
    93     001B                     	;# 
    94     001C                     	;# 
    95     001D                     	;# 
    96     001E                     	;# 
    97     001F                     	;# 
    98     0081                     	;# 
    99     0085                     	;# 
   100     0086                     	;# 
   101     0087                     	;# 
   102     0088                     	;# 
   103     0089                     	;# 
   104     008C                     	;# 
   105     008D                     	;# 
   106     008E                     	;# 
   107     008F                     	;# 
   108     0090                     	;# 
   109     0091                     	;# 
   110     0092                     	;# 
   111     0093                     	;# 
   112     0093                     	;# 
   113     0093                     	;# 
   114     0094                     	;# 
   115     0095                     	;# 
   116     0096                     	;# 
   117     0097                     	;# 
   118     0098                     	;# 
   119     0099                     	;# 
   120     009A                     	;# 
   121     009B                     	;# 
   122     009C                     	;# 
   123     009D                     	;# 
   124     009E                     	;# 
   125     009F                     	;# 
   126     0105                     	;# 
   127     0107                     	;# 
   128     0108                     	;# 
   129     0109                     	;# 
   130     010C                     	;# 
   131     010C                     	;# 
   132     010D                     	;# 
   133     010E                     	;# 
   134     010F                     	;# 
   135     0185                     	;# 
   136     0187                     	;# 
   137     0188                     	;# 
   138     0189                     	;# 
   139     018C                     	;# 
   140     018D                     	;# 
   141     0000                     	;# 
   142     0001                     	;# 
   143     0002                     	;# 
   144     0003                     	;# 
   145     0004                     	;# 
   146     0005                     	;# 
   147     0006                     	;# 
   148     0007                     	;# 
   149     0008                     	;# 
   150     0009                     	;# 
   151     000A                     	;# 
   152     000B                     	;# 
   153     000C                     	;# 
   154     000D                     	;# 
   155     000E                     	;# 
   156     000E                     	;# 
   157     000F                     	;# 
   158     0010                     	;# 
   159     0011                     	;# 
   160     0012                     	;# 
   161     0013                     	;# 
   162     0014                     	;# 
   163     0015                     	;# 
   164     0015                     	;# 
   165     0016                     	;# 
   166     0017                     	;# 
   167     0018                     	;# 
   168     0019                     	;# 
   169     001A                     	;# 
   170     001B                     	;# 
   171     001B                     	;# 
   172     001C                     	;# 
   173     001D                     	;# 
   174     001E                     	;# 
   175     001F                     	;# 
   176     0081                     	;# 
   177     0085                     	;# 
   178     0086                     	;# 
   179     0087                     	;# 
   180     0088                     	;# 
   181     0089                     	;# 
   182     008C                     	;# 
   183     008D                     	;# 
   184     008E                     	;# 
   185     008F                     	;# 
   186     0090                     	;# 
   187     0091                     	;# 
   188     0092                     	;# 
   189     0093                     	;# 
   190     0093                     	;# 
   191     0093                     	;# 
   192     0094                     	;# 
   193     0095                     	;# 
   194     0096                     	;# 
   195     0097                     	;# 
   196     0098                     	;# 
   197     0099                     	;# 
   198     009A                     	;# 
   199     009B                     	;# 
   200     009C                     	;# 
   201     009D                     	;# 
   202     009E                     	;# 
   203     009F                     	;# 
   204     0105                     	;# 
   205     0107                     	;# 
   206     0108                     	;# 
   207     0109                     	;# 
   208     010C                     	;# 
   209     010C                     	;# 
   210     010D                     	;# 
   211     010E                     	;# 
   212     010F                     	;# 
   213     0185                     	;# 
   214     0187                     	;# 
   215     0188                     	;# 
   216     0189                     	;# 
   217     018C                     	;# 
   218     018D                     	;# 
   219     0000                     	;# 
   220     0001                     	;# 
   221     0002                     	;# 
   222     0003                     	;# 
   223     0004                     	;# 
   224     0005                     	;# 
   225     0006                     	;# 
   226     0007                     	;# 
   227     0008                     	;# 
   228     0009                     	;# 
   229     000A                     	;# 
   230     000B                     	;# 
   231     000C                     	;# 
   232     000D                     	;# 
   233     000E                     	;# 
   234     000E                     	;# 
   235     000F                     	;# 
   236     0010                     	;# 
   237     0011                     	;# 
   238     0012                     	;# 
   239     0013                     	;# 
   240     0014                     	;# 
   241     0015                     	;# 
   242     0015                     	;# 
   243     0016                     	;# 
   244     0017                     	;# 
   245     0018                     	;# 
   246     0019                     	;# 
   247     001A                     	;# 
   248     001B                     	;# 
   249     001B                     	;# 
   250     001C                     	;# 
   251     001D                     	;# 
   252     001E                     	;# 
   253     001F                     	;# 
   254     0081                     	;# 
   255     0085                     	;# 
   256     0086                     	;# 
   257     0087                     	;# 
   258     0088                     	;# 
   259     0089                     	;# 
   260     008C                     	;# 
   261     008D                     	;# 
   262     008E                     	;# 
   263     008F                     	;# 
   264     0090                     	;# 
   265     0091                     	;# 
   266     0092                     	;# 
   267     0093                     	;# 
   268     0093                     	;# 
   269     0093                     	;# 
   270     0094                     	;# 
   271     0095                     	;# 
   272     0096                     	;# 
   273     0097                     	;# 
   274     0098                     	;# 
   275     0099                     	;# 
   276     009A                     	;# 
   277     009B                     	;# 
   278     009C                     	;# 
   279     009D                     	;# 
   280     009E                     	;# 
   281     009F                     	;# 
   282     0105                     	;# 
   283     0107                     	;# 
   284     0108                     	;# 
   285     0109                     	;# 
   286     010C                     	;# 
   287     010C                     	;# 
   288     010D                     	;# 
   289     010E                     	;# 
   290     010F                     	;# 
   291     0185                     	;# 
   292     0187                     	;# 
   293     0188                     	;# 
   294     0189                     	;# 
   295     018C                     	;# 
   296     018D                     	;# 
   297     0000                     	;# 
   298     0001                     	;# 
   299     0002                     	;# 
   300     0003                     	;# 
   301     0004                     	;# 
   302     0005                     	;# 
   303     0006                     	;# 
   304     0007                     	;# 
   305     0008                     	;# 
   306     0009                     	;# 
   307     000A                     	;# 
   308     000B                     	;# 
   309     000C                     	;# 
   310     000D                     	;# 
   311     000E                     	;# 
   312     000E                     	;# 
   313     000F                     	;# 
   314     0010                     	;# 
   315     0011                     	;# 
   316     0012                     	;# 
   317     0013                     	;# 
   318     0014                     	;# 
   319     0015                     	;# 
   320     0015                     	;# 
   321     0016                     	;# 
   322     0017                     	;# 
   323     0018                     	;# 
   324     0019                     	;# 
   325     001A                     	;# 
   326     001B                     	;# 
   327     001B                     	;# 
   328     001C                     	;# 
   329     001D                     	;# 
   330     001E                     	;# 
   331     001F                     	;# 
   332     0081                     	;# 
   333     0085                     	;# 
   334     0086                     	;# 
   335     0087                     	;# 
   336     0088                     	;# 
   337     0089                     	;# 
   338     008C                     	;# 
   339     008D                     	;# 
   340     008E                     	;# 
   341     008F                     	;# 
   342     0090                     	;# 
   343     0091                     	;# 
   344     0092                     	;# 
   345     0093                     	;# 
   346     0093                     	;# 
   347     0093                     	;# 
   348     0094                     	;# 
   349     0095                     	;# 
   350     0096                     	;# 
   351     0097                     	;# 
   352     0098                     	;# 
   353     0099                     	;# 
   354     009A                     	;# 
   355     009B                     	;# 
   356     009C                     	;# 
   357     009D                     	;# 
   358     009E                     	;# 
   359     009F                     	;# 
   360     0105                     	;# 
   361     0107                     	;# 
   362     0108                     	;# 
   363     0109                     	;# 
   364     010C                     	;# 
   365     010C                     	;# 
   366     010D                     	;# 
   367     010E                     	;# 
   368     010F                     	;# 
   369     0185                     	;# 
   370     0187                     	;# 
   371     0188                     	;# 
   372     0189                     	;# 
   373     018C                     	;# 
   374     018D                     	;# 
   375     0000                     	;# 
   376     0001                     	;# 
   377     0002                     	;# 
   378     0003                     	;# 
   379     0004                     	;# 
   380     0005                     	;# 
   381     0006                     	;# 
   382     0007                     	;# 
   383     0008                     	;# 
   384     0009                     	;# 
   385     000A                     	;# 
   386     000B                     	;# 
   387     000C                     	;# 
   388     000D                     	;# 
   389     000E                     	;# 
   390     000E                     	;# 
   391     000F                     	;# 
   392     0010                     	;# 
   393     0011                     	;# 
   394     0012                     	;# 
   395     0013                     	;# 
   396     0014                     	;# 
   397     0015                     	;# 
   398     0015                     	;# 
   399     0016                     	;# 
   400     0017                     	;# 
   401     0018                     	;# 
   402     0019                     	;# 
   403     001A                     	;# 
   404     001B                     	;# 
   405     001B                     	;# 
   406     001C                     	;# 
   407     001D                     	;# 
   408     001E                     	;# 
   409     001F                     	;# 
   410     0081                     	;# 
   411     0085                     	;# 
   412     0086                     	;# 
   413     0087                     	;# 
   414     0088                     	;# 
   415     0089                     	;# 
   416     008C                     	;# 
   417     008D                     	;# 
   418     008E                     	;# 
   419     008F                     	;# 
   420     0090                     	;# 
   421     0091                     	;# 
   422     0092                     	;# 
   423     0093                     	;# 
   424     0093                     	;# 
   425     0093                     	;# 
   426     0094                     	;# 
   427     0095                     	;# 
   428     0096                     	;# 
   429     0097                     	;# 
   430     0098                     	;# 
   431     0099                     	;# 
   432     009A                     	;# 
   433     009B                     	;# 
   434     009C                     	;# 
   435     009D                     	;# 
   436     009E                     	;# 
   437     009F                     	;# 
   438     0105                     	;# 
   439     0107                     	;# 
   440     0108                     	;# 
   441     0109                     	;# 
   442     010C                     	;# 
   443     010C                     	;# 
   444     010D                     	;# 
   445     010E                     	;# 
   446     010F                     	;# 
   447     0185                     	;# 
   448     0187                     	;# 
   449     0188                     	;# 
   450     0189                     	;# 
   451     018C                     	;# 
   452     018D                     	;# 
   453                           
   454                           	psect	idataBANK0
   455     0391                     __pidataBANK0:
   456                           
   457                           ;initializer for pic_init@F1593
   458     0391  3401               	retlw	1
   459     0392  3401               	retlw	1
   460     0393  3407               	retlw	7
   461     0394  3400               	retlw	0
   462     0395  3400               	retlw	0
   463     0396  3400               	retlw	0
   464     0397  3401               	retlw	1
   465                           
   466                           ;initializer for pic_init@F1597
   467     0398  3401               	retlw	1
   468     0399  3400               	retlw	0
   469     039A  3400               	retlw	0
   470     039B  3400               	retlw	0
   471     039C  3401               	retlw	1
   472     039D  3401               	retlw	1
   473                           
   474                           ;initializer for pic_init@F1595
   475     039E  3401               	retlw	1
   476     039F  3403               	retlw	3
   477     03A0  3401               	retlw	1
   478     001E                     _ADRESH	set	30
   479     0006                     _PORTB	set	6
   480     0006                     _PORTBbits	set	6
   481     0005                     _PORTA	set	5
   482     001F                     _ADCON0bits	set	31
   483     000B                     _INTCONbits	set	11
   484     00F9                     _GO	set	249
   485     009E                     _ADRESL	set	158
   486     0089                     _TRISEbits	set	137
   487     0086                     _TRISBbits	set	134
   488     0085                     _TRISA	set	133
   489     009F                     _ADCON1bits	set	159
   490     0081                     _OPTION_REGbits	set	129
   491     0096                     _IOCBbits	set	150
   492     008F                     _OSCCONbits	set	143
   493     0188                     _ANSELbits	set	392
   494     0189                     _ANSELH	set	393
   495     0188                     _ANSEL	set	392
   496                           
   497                           	psect	cinit
   498     0013                     start_initialization:	
   499                           ; #config settings
   500                           
   501     0013                     __initialization:
   502                           
   503                           ; Initialize objects allocated to BANK0
   504     0013  1383               	bcf	3,7	;select IRP bank0
   505     0014  3053               	movlw	low (__pdataBANK0+16)
   506     0015  00FD               	movwf	btemp+-1
   507     0016  3003               	movlw	high __pidataBANK0
   508     0017  00FE               	movwf	btemp
   509     0018  3091               	movlw	low __pidataBANK0
   510     0019  00FF               	movwf	btemp+1
   511     001A  3043               	movlw	low __pdataBANK0
   512     001B  0084               	movwf	4
   513     001C  120A  118A  2370  120A  118A  	fcall	init_ram0
   514                           
   515                           ; Clear objects allocated to BANK0
   516     0021  01D3               	clrf	__pbssBANK0& (0+127)
   517     0022  01D4               	clrf	(__pbssBANK0+1)& (0+127)
   518     0023  01D5               	clrf	(__pbssBANK0+2)& (0+127)
   519     0024  01D6               	clrf	(__pbssBANK0+3)& (0+127)
   520     0025  01D7               	clrf	(__pbssBANK0+4)& (0+127)
   521     0026  01D8               	clrf	(__pbssBANK0+5)& (0+127)
   522     0027  01D9               	clrf	(__pbssBANK0+6)& (0+127)
   523     0028  01DA               	clrf	(__pbssBANK0+7)& (0+127)
   524     0029  01DB               	clrf	(__pbssBANK0+8)& (0+127)
   525                           
   526                           ; Clear objects allocated to COMMON
   527     002A  01FC               	clrf	__pbssCOMMON& (0+127)
   528     002B                     end_of_initialization:	
   529                           ;End of C runtime variable initialization code
   530                           
   531     002B                     __end_of__initialization:
   532     002B  0183               	clrf	3
   533     002C  120A  118A  2BA1   	ljmp	_main	;jump to C main() function
   534                           
   535                           	psect	bssCOMMON
   536     007C                     __pbssCOMMON:
   537     007C                     parse_rotary@prevState:
   538     007C                     	ds	1
   539                           
   540                           	psect	bssBANK0
   541     0053                     __pbssBANK0:
   542     0053                     pic_loop@F1588:
   543     0053                     	ds	8
   544     005B                     _count:
   545     005B                     	ds	1
   546                           
   547                           	psect	dataBANK0
   548     0043                     __pdataBANK0:
   549     0043                     pic_init@F1593:
   550     0043                     	ds	7
   551     004A                     pic_init@F1597:
   552     004A                     	ds	6
   553     0050                     pic_init@F1595:
   554     0050                     	ds	3
   555                           
   556                           	psect	inittext
   557     036C                     init_fetch0:	
   558                           ;	Called with low address in FSR and high address in W
   559                           
   560     036C  087E               	movf	btemp,w
   561     036D  008A               	movwf	10
   562     036E  087F               	movf	btemp+1,w
   563     036F  0082               	movwf	2
   564     0370                     init_ram0:	
   565                           ;Called with:
   566                           ;	high address of idata address in btemp 
   567                           ;	low address of idata address in btemp+1 
   568                           ;	low address of data in FSR
   569                           ;	high address + 1 of data in btemp-1
   570                           
   571     0370  120A  118A  236C  120A  118A  	fcall	init_fetch0
   572     0375  0080               	movwf	0
   573     0376  0A84               	incf	4,f
   574     0377  0804               	movf	4,w
   575     0378  067D               	xorwf	btemp+-1,w
   576     0379  1903               	btfsc	3,2
   577     037A  3400               	retlw	0
   578     037B  0AFF               	incf	btemp+1,f
   579     037C  1903               	btfsc	3,2
   580     037D  0AFE               	incf	btemp,f
   581     037E  2B70               	goto	init_ram0
   582                           
   583                           	psect	cstackCOMMON
   584     0070                     __pcstackCOMMON:
   585     0070                     ?_pic_init:
   586     0070                     ?_pic_loop:	
   587                           ; 1 bytes @ 0x0
   588                           
   589     0070                     ?_init_gpio:	
   590                           ; 1 bytes @ 0x0
   591                           
   592     0070                     ?_parse_rotary:	
   593                           ; 1 bytes @ 0x0
   594                           
   595     0070                     ?_main:	
   596                           ; 1 bytes @ 0x0
   597                           
   598     0070                     ?_isr:	
   599                           ; 1 bytes @ 0x0
   600                           
   601     0070                     parse_rotary@pinB:	
   602                           ; 1 bytes @ 0x0
   603                           
   604                           
   605                           ; 1 bytes @ 0x0
   606     0070                     	ds	1
   607     0071                     parse_rotary@counter:
   608                           
   609                           ; 1 bytes @ 0x1
   610     0071                     	ds	1
   611     0072                     parse_rotary@max:
   612                           
   613                           ; 1 bytes @ 0x2
   614     0072                     	ds	1
   615     0073                     parse_rotary@min:
   616                           
   617                           ; 1 bytes @ 0x3
   618     0073                     	ds	1
   619     0074                     ??_parse_rotary:
   620                           
   621                           ; 1 bytes @ 0x4
   622     0074                     	ds	1
   623     0075                     parse_rotary@pinA:
   624                           
   625                           ; 1 bytes @ 0x5
   626     0075                     	ds	1
   627     0076                     parse_rotary@state:
   628                           
   629                           ; 1 bytes @ 0x6
   630     0076                     	ds	1
   631     0077                     ??_isr:
   632                           
   633                           ; 1 bytes @ 0x7
   634     0077                     	ds	5
   635                           
   636                           	psect	cstackBANK0
   637     0020                     __pcstackBANK0:
   638     0020                     ??_init_gpio:
   639     0020                     ?_init_osc:	
   640                           ; 1 bytes @ 0x0
   641                           
   642     0020                     ?_init_int:	
   643                           ; 1 bytes @ 0x0
   644                           
   645     0020                     ?_init_adc:	
   646                           ; 1 bytes @ 0x0
   647                           
   648     0020                     ?_read_potentiometer:	
   649                           ; 1 bytes @ 0x0
   650                           
   651     0020                     ?___wmul:	
   652                           ; 2 bytes @ 0x0
   653                           
   654     0020                     ?___awdiv:	
   655                           ; 2 bytes @ 0x0
   656                           
   657     0020                     ___wmul@multiplier:	
   658                           ; 2 bytes @ 0x0
   659                           
   660     0020                     ___awdiv@divisor:	
   661                           ; 2 bytes @ 0x0
   662                           
   663     0020                     init_osc@config:	
   664                           ; 2 bytes @ 0x0
   665                           
   666     0020                     init_int@config:	
   667                           ; 3 bytes @ 0x0
   668                           
   669     0020                     init_adc@config:	
   670                           ; 6 bytes @ 0x0
   671                           
   672                           
   673                           ; 7 bytes @ 0x0
   674     0020                     	ds	2
   675     0022                     ??_read_potentiometer:
   676     0022                     read_potentiometer@result:	
   677                           ; 1 bytes @ 0x2
   678                           
   679     0022                     ___wmul@multiplicand:	
   680                           ; 2 bytes @ 0x2
   681                           
   682     0022                     ___awdiv@dividend:	
   683                           ; 2 bytes @ 0x2
   684                           
   685                           
   686                           ; 2 bytes @ 0x2
   687     0022                     	ds	1
   688     0023                     ??_init_osc:
   689                           
   690                           ; 1 bytes @ 0x3
   691     0023                     	ds	1
   692     0024                     ??___wmul:
   693     0024                     ??___awdiv:	
   694                           ; 1 bytes @ 0x4
   695                           
   696     0024                     ___awdiv@counter:	
   697                           ; 1 bytes @ 0x4
   698                           
   699     0024                     ___wmul@product:	
   700                           ; 1 bytes @ 0x4
   701                           
   702                           
   703                           ; 2 bytes @ 0x4
   704     0024                     	ds	1
   705     0025                     ___awdiv@sign:
   706                           
   707                           ; 1 bytes @ 0x5
   708     0025                     	ds	1
   709     0026                     ??_init_int:
   710     0026                     ___awdiv@quotient:	
   711                           ; 1 bytes @ 0x6
   712                           
   713                           
   714                           ; 2 bytes @ 0x6
   715     0026                     	ds	1
   716     0027                     ??_init_adc:
   717                           
   718                           ; 1 bytes @ 0x7
   719     0027                     	ds	1
   720     0028                     ??_pic_init:
   721     0028                     ?_populate_step_array:	
   722                           ; 1 bytes @ 0x8
   723                           
   724     0028                     populate_step_array@size:	
   725                           ; 1 bytes @ 0x8
   726                           
   727                           
   728                           ; 2 bytes @ 0x8
   729     0028                     	ds	2
   730     002A                     populate_step_array@potLimit:
   731                           
   732                           ; 2 bytes @ 0xA
   733     002A                     	ds	2
   734     002C                     ??_populate_step_array:
   735     002C                     pic_init@adc_config:	
   736                           ; 1 bytes @ 0xC
   737                           
   738                           
   739                           ; 7 bytes @ 0xC
   740     002C                     	ds	2
   741     002E                     populate_step_array@i:
   742                           
   743                           ; 2 bytes @ 0xE
   744     002E                     	ds	2
   745     0030                     populate_step_array@array:
   746                           
   747                           ; 1 bytes @ 0x10
   748     0030                     	ds	1
   749     0031                     ??_pic_loop:
   750                           
   751                           ; 1 bytes @ 0x11
   752     0031                     	ds	2
   753     0033                     pic_init@int_config:
   754                           
   755                           ; 6 bytes @ 0x13
   756     0033                     	ds	4
   757     0037                     pic_loop@stepArray:
   758                           
   759                           ; 8 bytes @ 0x17
   760     0037                     	ds	2
   761     0039                     pic_init@osc_config:
   762                           
   763                           ; 3 bytes @ 0x19
   764     0039                     	ds	6
   765     003F                     pic_loop@result:
   766                           
   767                           ; 2 bytes @ 0x1F
   768     003F                     	ds	2
   769     0041                     pic_loop@i:
   770                           
   771                           ; 2 bytes @ 0x21
   772     0041                     	ds	2
   773     0043                     ??_main:
   774                           
   775                           	psect	maintext
   776     03A1                     __pmaintext:	
   777                           ; 1 bytes @ 0x23
   778 ;;
   779 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   780 ;;
   781 ;; *************** function _main *****************
   782 ;; Defined at:
   783 ;;		line 19 in file "src/main.c"
   784 ;; Parameters:    Size  Location     Type
   785 ;;		None
   786 ;; Auto vars:     Size  Location     Type
   787 ;;		None
   788 ;; Return value:  Size  Location     Type
   789 ;;                  1    wreg      void 
   790 ;; Registers used:
   791 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   792 ;; Tracked objects:
   793 ;;		On entry : B00/0
   794 ;;		On exit  : 0/0
   795 ;;		Unchanged: 0/0
   796 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   797 ;;      Params:         0       0       0       0       0
   798 ;;      Locals:         0       0       0       0       0
   799 ;;      Temps:          0       0       0       0       0
   800 ;;      Totals:         0       0       0       0       0
   801 ;;Total ram usage:        0 bytes
   802 ;; Hardware stack levels required when called: 5
   803 ;; This function calls:
   804 ;;		_pic_init
   805 ;;		_pic_loop
   806 ;; This function is called by:
   807 ;;		Startup code after reset
   808 ;; This function uses a non-reentrant model
   809 ;;
   810                           
   811     03A1                     _main:	
   812                           ;psect for function _main
   813                           
   814     03A1                     l1094:	
   815                           ;incstack = 0
   816                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   817                           
   818                           
   819                           ;src/main.c: 21:   pic_init();
   820     03A1  120A  118A  20D7  120A  118A  	fcall	_pic_init
   821     03A6                     l1096:
   822                           
   823                           ;src/main.c: 23:   pic_loop();
   824     03A6  120A  118A  202F  120A  118A  	fcall	_pic_loop
   825     03AB                     l82:
   826     03AB  120A  118A  2810   	ljmp	start
   827     03AE                     __end_of_main:
   828                           
   829                           	psect	text1
   830     002F                     __ptext1:	
   831 ;; *************** function _pic_loop *****************
   832 ;; Defined at:
   833 ;;		line 26 in file "src/main.c"
   834 ;; Parameters:    Size  Location     Type
   835 ;;		None
   836 ;; Auto vars:     Size  Location     Type
   837 ;;  i               2   33[BANK0 ] int 
   838 ;;  result          2   31[BANK0 ] int 
   839 ;;  stepArray       8   23[BANK0 ] int [4]
   840 ;; Return value:  Size  Location     Type
   841 ;;                  1    wreg      void 
   842 ;; Registers used:
   843 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   844 ;; Tracked objects:
   845 ;;		On entry : 0/0
   846 ;;		On exit  : 0/0
   847 ;;		Unchanged: 0/0
   848 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   849 ;;      Params:         0       0       0       0       0
   850 ;;      Locals:         0      12       0       0       0
   851 ;;      Temps:          0       6       0       0       0
   852 ;;      Totals:         0      18       0       0       0
   853 ;;Total ram usage:       18 bytes
   854 ;; Hardware stack levels used: 1
   855 ;; Hardware stack levels required when called: 4
   856 ;; This function calls:
   857 ;;		_populate_step_array
   858 ;;		_read_potentiometer
   859 ;; This function is called by:
   860 ;;		_main
   861 ;; This function uses a non-reentrant model
   862 ;;
   863                           
   864     002F                     _pic_loop:	
   865                           ;psect for function _pic_loop
   866                           
   867     002F                     l1032:	
   868                           ;incstack = 0
   869                           ; Regs used in _pic_loop: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   870                           
   871                           
   872                           ;src/main.c: 28:   int stepArray[4] = {0};
   873     002F  3037               	movlw	pic_loop@stepArray& (0+255)
   874     0030  0084               	movwf	4
   875     0031  3008               	movlw	8
   876     0032  00FF               	movwf	btemp+1
   877     0033                     u650:
   878     0033  1383               	bcf	3,7	;select IRP bank0
   879     0034  0180               	clrf	0
   880     0035  0A84               	incf	4,f
   881     0036  0BFF               	decfsz	btemp+1,f
   882     0037  2833               	goto	u650
   883     0038                     l1034:
   884                           
   885                           ;src/main.c: 29:   populate_step_array(stepArray, 4, 1023);
   886     0038  3004               	movlw	4
   887     0039  1283               	bcf	3,5	;RP0=0, select bank0
   888     003A  1303               	bcf	3,6	;RP1=0, select bank0
   889     003B  00A8               	movwf	populate_step_array@size
   890     003C  3000               	movlw	0
   891     003D  00A9               	movwf	populate_step_array@size+1
   892     003E  30FF               	movlw	255
   893     003F  00AA               	movwf	populate_step_array@potLimit
   894     0040  3003               	movlw	3
   895     0041  00AB               	movwf	populate_step_array@potLimit+1
   896     0042  3037               	movlw	(low (pic_loop@stepArray| 0))& (0+255)
   897     0043  120A  118A  21B8  120A  118A  	fcall	_populate_step_array
   898     0048                     l1036:
   899                           
   900                           ;src/main.c: 32:     if (count == 0) {
   901     0048  1283               	bcf	3,5	;RP0=0, select bank0
   902     0049  1303               	bcf	3,6	;RP1=0, select bank0
   903     004A  085B               	movf	_count,w
   904     004B  1D03               	btfss	3,2
   905     004C  284E               	goto	u661
   906     004D  284F               	goto	u660
   907     004E                     u661:
   908     004E  2848               	goto	l1036
   909     004F                     u660:
   910     004F                     l1038:
   911                           
   912                           ;src/main.c: 34:       int result = read_potentiometer();
   913     004F  120A  118A  2358  120A  118A  	fcall	_read_potentiometer
   914     0054  1283               	bcf	3,5	;RP0=0, select bank0
   915     0055  1303               	bcf	3,6	;RP1=0, select bank0
   916     0056  0821               	movf	?_read_potentiometer+1,w
   917     0057  00C0               	movwf	pic_loop@result+1
   918     0058  0820               	movf	?_read_potentiometer,w
   919     0059  00BF               	movwf	pic_loop@result
   920     005A                     l1040:
   921                           
   922                           ;src/main.c: 40:       for (int i = 0; i < 4; i++) {
   923     005A  01C1               	clrf	pic_loop@i
   924     005B  01C2               	clrf	pic_loop@i+1
   925     005C                     l1046:
   926                           
   927                           ;src/main.c: 41:         if (result > (stepArray[i] - 2)) {
   928     005C  1283               	bcf	3,5	;RP0=0, select bank0
   929     005D  1303               	bcf	3,6	;RP1=0, select bank0
   930     005E  0841               	movf	pic_loop@i,w
   931     005F  00B1               	movwf	??_pic_loop
   932     0060  0731               	addwf	??_pic_loop,w
   933     0061  3E37               	addlw	(low (pic_loop@stepArray| 0))& (0+255)
   934     0062  0084               	movwf	4
   935     0063  1383               	bcf	3,7	;select IRP bank0
   936     0064  0800               	movf	0,w
   937     0065  00B2               	movwf	??_pic_loop+1
   938     0066  0A84               	incf	4,f
   939     0067  0800               	movf	0,w
   940     0068  00B3               	movwf	??_pic_loop+2
   941     0069  0832               	movf	??_pic_loop+1,w
   942     006A  3EFE               	addlw	254
   943     006B  00B4               	movwf	??_pic_loop+3
   944     006C  0833               	movf	??_pic_loop+2,w
   945     006D  1803               	skipnc
   946     006E  3E01               	addlw	1
   947     006F  3EFF               	addlw	255
   948     0070  00B5               	movwf	??_pic_loop+4
   949     0071  0835               	movf	??_pic_loop+4,w
   950     0072  3A80               	xorlw	128
   951     0073  00B6               	movwf	??_pic_loop+5
   952     0074  0840               	movf	pic_loop@result+1,w
   953     0075  3A80               	xorlw	128
   954     0076  0236               	subwf	??_pic_loop+5,w
   955     0077  1D03               	skipz
   956     0078  287B               	goto	u675
   957     0079  083F               	movf	pic_loop@result,w
   958     007A  0234               	subwf	??_pic_loop+3,w
   959     007B                     u675:
   960     007B  1803               	skipnc
   961     007C  287E               	goto	u671
   962     007D  287F               	goto	u670
   963     007E                     u671:
   964     007E  288F               	goto	l1050
   965     007F                     u670:
   966     007F                     l1048:
   967                           
   968                           ;src/main.c: 42:           PORTA = (unsigned char)(PORTA & ~(1 << i));
   969     007F  3001               	movlw	1
   970     0080  1283               	bcf	3,5	;RP0=0, select bank0
   971     0081  1303               	bcf	3,6	;RP1=0, select bank0
   972     0082  00B1               	movwf	??_pic_loop
   973     0083  0A41               	incf	pic_loop@i,w
   974     0084  2887               	goto	u684
   975     0085                     u685:
   976     0085  1003               	clrc
   977     0086  0DB1               	rlf	??_pic_loop,f
   978     0087                     u684:
   979     0087  3EFF               	addlw	-1
   980     0088  1D03               	skipz
   981     0089  2885               	goto	u685
   982     008A  0831               	movf	??_pic_loop,w
   983     008B  3AFF               	xorlw	255
   984     008C  0505               	andwf	5,w	;volatile
   985     008D  0085               	movwf	5	;volatile
   986                           
   987                           ;src/main.c: 43:         } else if (result <= (stepArray[i] - 2)) {
   988     008E  28C0               	goto	l1054
   989     008F                     l1050:
   990     008F  1283               	bcf	3,5	;RP0=0, select bank0
   991     0090  1303               	bcf	3,6	;RP1=0, select bank0
   992     0091  0841               	movf	pic_loop@i,w
   993     0092  00B1               	movwf	??_pic_loop
   994     0093  0731               	addwf	??_pic_loop,w
   995     0094  3E37               	addlw	(low (pic_loop@stepArray| 0))& (0+255)
   996     0095  0084               	movwf	4
   997     0096  1383               	bcf	3,7	;select IRP bank0
   998     0097  0800               	movf	0,w
   999     0098  00B2               	movwf	??_pic_loop+1
  1000     0099  0A84               	incf	4,f
  1001     009A  0800               	movf	0,w
  1002     009B  00B3               	movwf	??_pic_loop+2
  1003     009C  0832               	movf	??_pic_loop+1,w
  1004     009D  3EFE               	addlw	254
  1005     009E  00B4               	movwf	??_pic_loop+3
  1006     009F  0833               	movf	??_pic_loop+2,w
  1007     00A0  1803               	skipnc
  1008     00A1  3E01               	addlw	1
  1009     00A2  3EFF               	addlw	255
  1010     00A3  00B5               	movwf	??_pic_loop+4
  1011     00A4  0835               	movf	??_pic_loop+4,w
  1012     00A5  3A80               	xorlw	128
  1013     00A6  00B6               	movwf	??_pic_loop+5
  1014     00A7  0840               	movf	pic_loop@result+1,w
  1015     00A8  3A80               	xorlw	128
  1016     00A9  0236               	subwf	??_pic_loop+5,w
  1017     00AA  1D03               	skipz
  1018     00AB  28AE               	goto	u695
  1019     00AC  083F               	movf	pic_loop@result,w
  1020     00AD  0234               	subwf	??_pic_loop+3,w
  1021     00AE                     u695:
  1022     00AE  1C03               	skipc
  1023     00AF  28B1               	goto	u691
  1024     00B0  28B2               	goto	u690
  1025     00B1                     u691:
  1026     00B1  28C0               	goto	l1054
  1027     00B2                     u690:
  1028     00B2                     l1052:
  1029                           
  1030                           ;src/main.c: 44:           PORTA = (unsigned char)(PORTA | (1 << i));
  1031     00B2  3001               	movlw	1
  1032     00B3  1283               	bcf	3,5	;RP0=0, select bank0
  1033     00B4  1303               	bcf	3,6	;RP1=0, select bank0
  1034     00B5  00B1               	movwf	??_pic_loop
  1035     00B6  0A41               	incf	pic_loop@i,w
  1036     00B7  28BA               	goto	u704
  1037     00B8                     u705:
  1038     00B8  1003               	clrc
  1039     00B9  0DB1               	rlf	??_pic_loop,f
  1040     00BA                     u704:
  1041     00BA  3EFF               	addlw	-1
  1042     00BB  1D03               	skipz
  1043     00BC  28B8               	goto	u705
  1044     00BD  0831               	movf	??_pic_loop,w
  1045     00BE  0405               	iorwf	5,w	;volatile
  1046     00BF  0085               	movwf	5	;volatile
  1047     00C0                     l1054:
  1048                           
  1049                           ;src/main.c: 46:       }
  1050     00C0  3001               	movlw	1
  1051     00C1  1283               	bcf	3,5	;RP0=0, select bank0
  1052     00C2  1303               	bcf	3,6	;RP1=0, select bank0
  1053     00C3  07C1               	addwf	pic_loop@i,f
  1054     00C4  1803               	skipnc
  1055     00C5  0AC2               	incf	pic_loop@i+1,f
  1056     00C6  3000               	movlw	0
  1057     00C7  07C2               	addwf	pic_loop@i+1,f
  1058     00C8                     l1056:
  1059     00C8  0842               	movf	pic_loop@i+1,w
  1060     00C9  3A80               	xorlw	128
  1061     00CA  00FF               	movwf	btemp+1
  1062     00CB  3080               	movlw	128
  1063     00CC  027F               	subwf	btemp+1,w
  1064     00CD  1D03               	skipz
  1065     00CE  28D1               	goto	u715
  1066     00CF  3004               	movlw	4
  1067     00D0  0241               	subwf	pic_loop@i,w
  1068     00D1                     u715:
  1069     00D1  1C03               	skipc
  1070     00D2  28D4               	goto	u711
  1071     00D3  28D5               	goto	u710
  1072     00D4                     u711:
  1073     00D4  285C               	goto	l1046
  1074     00D5                     u710:
  1075     00D5  2848               	goto	l1036
  1076     00D6  0008               	return
  1077     00D7                     __end_of_pic_loop:
  1078                           
  1079                           	psect	text2
  1080     0358                     __ptext2:	
  1081 ;; *************** function _read_potentiometer *****************
  1082 ;; Defined at:
  1083 ;;		line 10 in file "src/potentiometer.c"
  1084 ;; Parameters:    Size  Location     Type
  1085 ;;		None
  1086 ;; Auto vars:     Size  Location     Type
  1087 ;;  result          2    2[BANK0 ] int 
  1088 ;; Return value:  Size  Location     Type
  1089 ;;                  2    0[BANK0 ] int 
  1090 ;; Registers used:
  1091 ;;		wreg
  1092 ;; Tracked objects:
  1093 ;;		On entry : 0/0
  1094 ;;		On exit  : 0/0
  1095 ;;		Unchanged: 0/0
  1096 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1097 ;;      Params:         0       2       0       0       0
  1098 ;;      Locals:         0       2       0       0       0
  1099 ;;      Temps:          0       0       0       0       0
  1100 ;;      Totals:         0       4       0       0       0
  1101 ;;Total ram usage:        4 bytes
  1102 ;; Hardware stack levels used: 1
  1103 ;; Hardware stack levels required when called: 2
  1104 ;; This function calls:
  1105 ;;		Nothing
  1106 ;; This function is called by:
  1107 ;;		_pic_loop
  1108 ;; This function uses a non-reentrant model
  1109 ;;
  1110                           
  1111     0358                     _read_potentiometer:	
  1112                           ;psect for function _read_potentiometer
  1113                           
  1114     0358                     l996:	
  1115                           ;incstack = 0
  1116                           ; Regs used in _read_potentiometer: [wreg]
  1117                           
  1118                           
  1119                           ;src/potentiometer.c: 12:   _delay((unsigned long)((5)*(500000/4000000.0)));
  1120                           ;src/potentiometer.c: 16:   GO = 1;
  1121     0358  1283               	bcf	3,5	;RP0=0, select bank0
  1122     0359  1303               	bcf	3,6	;RP1=0, select bank0
  1123     035A  149F               	bsf	31,1	;volatile
  1124     035B                     l147:	
  1125                           ;src/potentiometer.c: 17:   while (GO) continue;
  1126                           
  1127     035B  189F               	btfsc	31,1	;volatile
  1128     035C  2B5E               	goto	u621
  1129     035D  2B5F               	goto	u620
  1130     035E                     u621:
  1131     035E  2B5B               	goto	l147
  1132     035F                     u620:
  1133     035F                     l998:
  1134                           
  1135                           ;src/potentiometer.c: 21:   int result = (ADRESH * 256) + ADRESL;
  1136     035F  081E               	movf	30,w	;volatile
  1137     0360  00A3               	movwf	read_potentiometer@result+1
  1138     0361  1683               	bsf	3,5	;RP0=1, select bank1
  1139     0362  1303               	bcf	3,6	;RP1=0, select bank1
  1140     0363  081E               	movf	30,w	;volatile
  1141     0364  1283               	bcf	3,5	;RP0=0, select bank0
  1142     0365  1303               	bcf	3,6	;RP1=0, select bank0
  1143     0366  00A2               	movwf	read_potentiometer@result
  1144                           
  1145                           ;src/potentiometer.c: 23:   return result;
  1146     0367  0823               	movf	read_potentiometer@result+1,w
  1147     0368  00A1               	movwf	?_read_potentiometer+1
  1148     0369  0822               	movf	read_potentiometer@result,w
  1149     036A  00A0               	movwf	?_read_potentiometer
  1150     036B                     l150:
  1151     036B  0008               	return
  1152     036C                     __end_of_read_potentiometer:
  1153                           
  1154                           	psect	text3
  1155     01B8                     __ptext3:	
  1156 ;; *************** function _populate_step_array *****************
  1157 ;; Defined at:
  1158 ;;		line 3 in file "src/potentiometer.c"
  1159 ;; Parameters:    Size  Location     Type
  1160 ;;  array           1    wreg     PTR int 
  1161 ;;		 -> pic_loop@stepArray(8), 
  1162 ;;  size            2    8[BANK0 ] int 
  1163 ;;  potLimit        2   10[BANK0 ] int 
  1164 ;; Auto vars:     Size  Location     Type
  1165 ;;  array           1   16[BANK0 ] PTR int 
  1166 ;;		 -> pic_loop@stepArray(8), 
  1167 ;;  i               2   14[BANK0 ] int 
  1168 ;; Return value:  Size  Location     Type
  1169 ;;                  1    wreg      void 
  1170 ;; Registers used:
  1171 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1172 ;; Tracked objects:
  1173 ;;		On entry : 0/0
  1174 ;;		On exit  : 0/0
  1175 ;;		Unchanged: 0/0
  1176 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1177 ;;      Params:         0       4       0       0       0
  1178 ;;      Locals:         0       3       0       0       0
  1179 ;;      Temps:          0       2       0       0       0
  1180 ;;      Totals:         0       9       0       0       0
  1181 ;;Total ram usage:        9 bytes
  1182 ;; Hardware stack levels used: 1
  1183 ;; Hardware stack levels required when called: 3
  1184 ;; This function calls:
  1185 ;;		___awdiv
  1186 ;;		___wmul
  1187 ;; This function is called by:
  1188 ;;		_pic_loop
  1189 ;; This function uses a non-reentrant model
  1190 ;;
  1191                           
  1192     01B8                     _populate_step_array:	
  1193                           ;psect for function _populate_step_array
  1194                           
  1195                           
  1196                           ;incstack = 0
  1197                           ; Regs used in _populate_step_array: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack
      +                          ]
  1198                           ;populate_step_array@array stored from wreg
  1199     01B8  1283               	bcf	3,5	;RP0=0, select bank0
  1200     01B9  1303               	bcf	3,6	;RP1=0, select bank0
  1201     01BA  00B0               	movwf	populate_step_array@array
  1202     01BB                     l986:
  1203                           
  1204                           ;src/potentiometer.c: 4:   array[0] = potLimit / (size + 1);
  1205     01BB  0828               	movf	populate_step_array@size,w
  1206     01BC  3E01               	addlw	1
  1207     01BD  00A0               	movwf	___awdiv@divisor
  1208     01BE  0829               	movf	populate_step_array@size+1,w
  1209     01BF  1803               	skipnc
  1210     01C0  3E01               	addlw	1
  1211     01C1  3E00               	addlw	0
  1212     01C2  00A1               	movwf	___awdiv@divisor+1
  1213     01C3  082B               	movf	populate_step_array@potLimit+1,w
  1214     01C4  00A3               	movwf	___awdiv@dividend+1
  1215     01C5  082A               	movf	populate_step_array@potLimit,w
  1216     01C6  00A2               	movwf	___awdiv@dividend
  1217     01C7  120A  118A  214F  120A  118A  	fcall	___awdiv
  1218     01CC  1283               	bcf	3,5	;RP0=0, select bank0
  1219     01CD  1303               	bcf	3,6	;RP1=0, select bank0
  1220     01CE  0830               	movf	populate_step_array@array,w
  1221     01CF  0084               	movwf	4
  1222     01D0  0820               	movf	?___awdiv,w
  1223     01D1  1383               	bcf	3,7	;select IRP bank0
  1224     01D2  0080               	movwf	0
  1225     01D3  0A84               	incf	4,f
  1226     01D4  0821               	movf	?___awdiv+1,w
  1227     01D5  0080               	movwf	0
  1228     01D6                     l988:
  1229                           
  1230                           ;src/potentiometer.c: 5:   for (int i = 0; i < size; i++){
  1231     01D6  01AE               	clrf	populate_step_array@i
  1232     01D7  01AF               	clrf	populate_step_array@i+1
  1233     01D8  2A05               	goto	l994
  1234     01D9                     l990:
  1235                           
  1236                           ;src/potentiometer.c: 6:     array[i] = array[0] * (i + 1);
  1237     01D9  1283               	bcf	3,5	;RP0=0, select bank0
  1238     01DA  1303               	bcf	3,6	;RP1=0, select bank0
  1239     01DB  082E               	movf	populate_step_array@i,w
  1240     01DC  3E01               	addlw	1
  1241     01DD  00A0               	movwf	___wmul@multiplier
  1242     01DE  082F               	movf	populate_step_array@i+1,w
  1243     01DF  1803               	skipnc
  1244     01E0  3E01               	addlw	1
  1245     01E1  3E00               	addlw	0
  1246     01E2  00A1               	movwf	___wmul@multiplier+1
  1247     01E3  0830               	movf	populate_step_array@array,w
  1248     01E4  0084               	movwf	4
  1249     01E5  1383               	bcf	3,7	;select IRP bank0
  1250     01E6  0800               	movf	0,w
  1251     01E7  00A2               	movwf	___wmul@multiplicand
  1252     01E8  0A84               	incf	4,f
  1253     01E9  0800               	movf	0,w
  1254     01EA  00A3               	movwf	___wmul@multiplicand+1
  1255     01EB  120A  118A  2331  120A  118A  	fcall	___wmul
  1256     01F0  1283               	bcf	3,5	;RP0=0, select bank0
  1257     01F1  1303               	bcf	3,6	;RP1=0, select bank0
  1258     01F2  082E               	movf	populate_step_array@i,w
  1259     01F3  00AC               	movwf	??_populate_step_array
  1260     01F4  072C               	addwf	??_populate_step_array,w
  1261     01F5  0730               	addwf	populate_step_array@array,w
  1262     01F6  00AD               	movwf	??_populate_step_array+1
  1263     01F7  082D               	movf	??_populate_step_array+1,w
  1264     01F8  0084               	movwf	4
  1265     01F9  0820               	movf	?___wmul,w
  1266     01FA  1383               	bcf	3,7	;select IRP bank0
  1267     01FB  0080               	movwf	0
  1268     01FC  0A84               	incf	4,f
  1269     01FD  0821               	movf	?___wmul+1,w
  1270     01FE  0080               	movwf	0
  1271     01FF                     l992:
  1272                           
  1273                           ;src/potentiometer.c: 7:   }
  1274     01FF  3001               	movlw	1
  1275     0200  07AE               	addwf	populate_step_array@i,f
  1276     0201  1803               	skipnc
  1277     0202  0AAF               	incf	populate_step_array@i+1,f
  1278     0203  3000               	movlw	0
  1279     0204  07AF               	addwf	populate_step_array@i+1,f
  1280     0205                     l994:
  1281     0205  082F               	movf	populate_step_array@i+1,w
  1282     0206  3A80               	xorlw	128
  1283     0207  00AC               	movwf	??_populate_step_array
  1284     0208  0829               	movf	populate_step_array@size+1,w
  1285     0209  3A80               	xorlw	128
  1286     020A  022C               	subwf	??_populate_step_array,w
  1287     020B  1D03               	skipz
  1288     020C  2A0F               	goto	u615
  1289     020D  0828               	movf	populate_step_array@size,w
  1290     020E  022E               	subwf	populate_step_array@i,w
  1291     020F                     u615:
  1292     020F  1C03               	skipc
  1293     0210  2A12               	goto	u611
  1294     0211  2A13               	goto	u610
  1295     0212                     u611:
  1296     0212  29D9               	goto	l990
  1297     0213                     u610:
  1298     0213                     l144:
  1299     0213  0008               	return
  1300     0214                     __end_of_populate_step_array:
  1301                           
  1302                           	psect	text4
  1303     0331                     __ptext4:	
  1304 ;; *************** function ___wmul *****************
  1305 ;; Defined at:
  1306 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\Umul16.c"
  1307 ;; Parameters:    Size  Location     Type
  1308 ;;  multiplier      2    0[BANK0 ] unsigned int 
  1309 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  1310 ;; Auto vars:     Size  Location     Type
  1311 ;;  product         2    4[BANK0 ] unsigned int 
  1312 ;; Return value:  Size  Location     Type
  1313 ;;                  2    0[BANK0 ] unsigned int 
  1314 ;; Registers used:
  1315 ;;		wreg, status,2, status,0
  1316 ;; Tracked objects:
  1317 ;;		On entry : 0/0
  1318 ;;		On exit  : 0/0
  1319 ;;		Unchanged: 0/0
  1320 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1321 ;;      Params:         0       4       0       0       0
  1322 ;;      Locals:         0       2       0       0       0
  1323 ;;      Temps:          0       0       0       0       0
  1324 ;;      Totals:         0       6       0       0       0
  1325 ;;Total ram usage:        6 bytes
  1326 ;; Hardware stack levels used: 1
  1327 ;; Hardware stack levels required when called: 2
  1328 ;; This function calls:
  1329 ;;		Nothing
  1330 ;; This function is called by:
  1331 ;;		_populate_step_array
  1332 ;; This function uses a non-reentrant model
  1333 ;;
  1334                           
  1335     0331                     ___wmul:	
  1336                           ;psect for function ___wmul
  1337                           
  1338     0331                     l900:	
  1339                           ;incstack = 0
  1340                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  1341                           
  1342     0331  1283               	bcf	3,5	;RP0=0, select bank0
  1343     0332  1303               	bcf	3,6	;RP1=0, select bank0
  1344     0333  01A4               	clrf	___wmul@product
  1345     0334  01A5               	clrf	___wmul@product+1
  1346     0335                     l902:
  1347     0335  1C20               	btfss	___wmul@multiplier,0
  1348     0336  2B38               	goto	u411
  1349     0337  2B39               	goto	u410
  1350     0338                     u411:
  1351     0338  2B3F               	goto	l236
  1352     0339                     u410:
  1353     0339                     l904:
  1354     0339  0822               	movf	___wmul@multiplicand,w
  1355     033A  07A4               	addwf	___wmul@product,f
  1356     033B  1803               	skipnc
  1357     033C  0AA5               	incf	___wmul@product+1,f
  1358     033D  0823               	movf	___wmul@multiplicand+1,w
  1359     033E  07A5               	addwf	___wmul@product+1,f
  1360     033F                     l236:
  1361     033F  3001               	movlw	1
  1362     0340                     u425:
  1363     0340  1003               	clrc
  1364     0341  0DA2               	rlf	___wmul@multiplicand,f
  1365     0342  0DA3               	rlf	___wmul@multiplicand+1,f
  1366     0343  3EFF               	addlw	-1
  1367     0344  1D03               	skipz
  1368     0345  2B40               	goto	u425
  1369     0346                     l906:
  1370     0346  3001               	movlw	1
  1371     0347                     u435:
  1372     0347  1003               	clrc
  1373     0348  0CA1               	rrf	___wmul@multiplier+1,f
  1374     0349  0CA0               	rrf	___wmul@multiplier,f
  1375     034A  3EFF               	addlw	-1
  1376     034B  1D03               	skipz
  1377     034C  2B47               	goto	u435
  1378     034D                     l908:
  1379     034D  0820               	movf	___wmul@multiplier,w
  1380     034E  0421               	iorwf	___wmul@multiplier+1,w
  1381     034F  1D03               	btfss	3,2
  1382     0350  2B52               	goto	u441
  1383     0351  2B53               	goto	u440
  1384     0352                     u441:
  1385     0352  2B35               	goto	l902
  1386     0353                     u440:
  1387     0353                     l910:
  1388     0353  0825               	movf	___wmul@product+1,w
  1389     0354  00A1               	movwf	?___wmul+1
  1390     0355  0824               	movf	___wmul@product,w
  1391     0356  00A0               	movwf	?___wmul
  1392     0357                     l238:
  1393     0357  0008               	return
  1394     0358                     __end_of___wmul:
  1395                           
  1396                           	psect	text5
  1397     014F                     __ptext5:	
  1398 ;; *************** function ___awdiv *****************
  1399 ;; Defined at:
  1400 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\awdiv.c"
  1401 ;; Parameters:    Size  Location     Type
  1402 ;;  divisor         2    0[BANK0 ] int 
  1403 ;;  dividend        2    2[BANK0 ] int 
  1404 ;; Auto vars:     Size  Location     Type
  1405 ;;  quotient        2    6[BANK0 ] int 
  1406 ;;  sign            1    5[BANK0 ] unsigned char 
  1407 ;;  counter         1    4[BANK0 ] unsigned char 
  1408 ;; Return value:  Size  Location     Type
  1409 ;;                  2    0[BANK0 ] int 
  1410 ;; Registers used:
  1411 ;;		wreg, status,2, status,0, btemp+1
  1412 ;; Tracked objects:
  1413 ;;		On entry : 0/0
  1414 ;;		On exit  : 0/0
  1415 ;;		Unchanged: 0/0
  1416 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1417 ;;      Params:         0       4       0       0       0
  1418 ;;      Locals:         0       4       0       0       0
  1419 ;;      Temps:          0       0       0       0       0
  1420 ;;      Totals:         0       8       0       0       0
  1421 ;;Total ram usage:        8 bytes
  1422 ;; Hardware stack levels used: 1
  1423 ;; Hardware stack levels required when called: 2
  1424 ;; This function calls:
  1425 ;;		Nothing
  1426 ;; This function is called by:
  1427 ;;		_populate_step_array
  1428 ;; This function uses a non-reentrant model
  1429 ;;
  1430                           
  1431     014F                     ___awdiv:	
  1432                           ;psect for function ___awdiv
  1433                           
  1434     014F                     l914:	
  1435                           ;incstack = 0
  1436                           ; Regs used in ___awdiv: [wreg+status,2+status,0+btemp+1]
  1437                           
  1438     014F  1283               	bcf	3,5	;RP0=0, select bank0
  1439     0150  1303               	bcf	3,6	;RP1=0, select bank0
  1440     0151  01A5               	clrf	___awdiv@sign
  1441     0152                     l916:
  1442     0152  1FA1               	btfss	___awdiv@divisor+1,7
  1443     0153  2955               	goto	u451
  1444     0154  2956               	goto	u450
  1445     0155                     u451:
  1446     0155  295D               	goto	l922
  1447     0156                     u450:
  1448     0156                     l918:
  1449     0156  09A0               	comf	___awdiv@divisor,f
  1450     0157  09A1               	comf	___awdiv@divisor+1,f
  1451     0158  0AA0               	incf	___awdiv@divisor,f
  1452     0159  1903               	skipnz
  1453     015A  0AA1               	incf	___awdiv@divisor+1,f
  1454     015B                     l920:
  1455     015B  01A5               	clrf	___awdiv@sign
  1456     015C  0AA5               	incf	___awdiv@sign,f
  1457     015D                     l922:
  1458     015D  1FA3               	btfss	___awdiv@dividend+1,7
  1459     015E  2960               	goto	u461
  1460     015F  2961               	goto	u460
  1461     0160                     u461:
  1462     0160  296A               	goto	l928
  1463     0161                     u460:
  1464     0161                     l924:
  1465     0161  09A2               	comf	___awdiv@dividend,f
  1466     0162  09A3               	comf	___awdiv@dividend+1,f
  1467     0163  0AA2               	incf	___awdiv@dividend,f
  1468     0164  1903               	skipnz
  1469     0165  0AA3               	incf	___awdiv@dividend+1,f
  1470     0166                     l926:
  1471     0166  3001               	movlw	1
  1472     0167  00FF               	movwf	btemp+1
  1473     0168  087F               	movf	btemp+1,w
  1474     0169  06A5               	xorwf	___awdiv@sign,f
  1475     016A                     l928:
  1476     016A  01A6               	clrf	___awdiv@quotient
  1477     016B  01A7               	clrf	___awdiv@quotient+1
  1478     016C                     l930:
  1479     016C  0820               	movf	___awdiv@divisor,w
  1480     016D  0421               	iorwf	___awdiv@divisor+1,w
  1481     016E  1903               	btfsc	3,2
  1482     016F  2971               	goto	u471
  1483     0170  2972               	goto	u470
  1484     0171                     u471:
  1485     0171  29A9               	goto	l950
  1486     0172                     u470:
  1487     0172                     l932:
  1488     0172  01A4               	clrf	___awdiv@counter
  1489     0173  0AA4               	incf	___awdiv@counter,f
  1490     0174  2980               	goto	l938
  1491     0175                     l934:
  1492     0175  3001               	movlw	1
  1493     0176                     u485:
  1494     0176  1003               	clrc
  1495     0177  0DA0               	rlf	___awdiv@divisor,f
  1496     0178  0DA1               	rlf	___awdiv@divisor+1,f
  1497     0179  3EFF               	addlw	-1
  1498     017A  1D03               	skipz
  1499     017B  2976               	goto	u485
  1500     017C                     l936:
  1501     017C  3001               	movlw	1
  1502     017D  00FF               	movwf	btemp+1
  1503     017E  087F               	movf	btemp+1,w
  1504     017F  07A4               	addwf	___awdiv@counter,f
  1505     0180                     l938:
  1506     0180  1FA1               	btfss	___awdiv@divisor+1,7
  1507     0181  2983               	goto	u491
  1508     0182  2984               	goto	u490
  1509     0183                     u491:
  1510     0183  2975               	goto	l934
  1511     0184                     u490:
  1512     0184                     l940:
  1513     0184  3001               	movlw	1
  1514     0185                     u505:
  1515     0185  1003               	clrc
  1516     0186  0DA6               	rlf	___awdiv@quotient,f
  1517     0187  0DA7               	rlf	___awdiv@quotient+1,f
  1518     0188  3EFF               	addlw	-1
  1519     0189  1D03               	skipz
  1520     018A  2985               	goto	u505
  1521     018B  0821               	movf	___awdiv@divisor+1,w
  1522     018C  0223               	subwf	___awdiv@dividend+1,w
  1523     018D  1D03               	skipz
  1524     018E  2991               	goto	u515
  1525     018F  0820               	movf	___awdiv@divisor,w
  1526     0190  0222               	subwf	___awdiv@dividend,w
  1527     0191                     u515:
  1528     0191  1C03               	skipc
  1529     0192  2994               	goto	u511
  1530     0193  2995               	goto	u510
  1531     0194                     u511:
  1532     0194  299C               	goto	l946
  1533     0195                     u510:
  1534     0195                     l942:
  1535     0195  0820               	movf	___awdiv@divisor,w
  1536     0196  02A2               	subwf	___awdiv@dividend,f
  1537     0197  0821               	movf	___awdiv@divisor+1,w
  1538     0198  1C03               	skipc
  1539     0199  03A3               	decf	___awdiv@dividend+1,f
  1540     019A  02A3               	subwf	___awdiv@dividend+1,f
  1541     019B                     l944:
  1542     019B  1426               	bsf	___awdiv@quotient,0
  1543     019C                     l946:
  1544     019C  3001               	movlw	1
  1545     019D                     u525:
  1546     019D  1003               	clrc
  1547     019E  0CA1               	rrf	___awdiv@divisor+1,f
  1548     019F  0CA0               	rrf	___awdiv@divisor,f
  1549     01A0  3EFF               	addlw	-1
  1550     01A1  1D03               	skipz
  1551     01A2  299D               	goto	u525
  1552     01A3                     l948:
  1553     01A3  3001               	movlw	1
  1554     01A4  02A4               	subwf	___awdiv@counter,f
  1555     01A5  1D03               	btfss	3,2
  1556     01A6  29A8               	goto	u531
  1557     01A7  29A9               	goto	u530
  1558     01A8                     u531:
  1559     01A8  2984               	goto	l940
  1560     01A9                     u530:
  1561     01A9                     l950:
  1562     01A9  0825               	movf	___awdiv@sign,w
  1563     01AA  1903               	btfsc	3,2
  1564     01AB  29AD               	goto	u541
  1565     01AC  29AE               	goto	u540
  1566     01AD                     u541:
  1567     01AD  29B3               	goto	l954
  1568     01AE                     u540:
  1569     01AE                     l952:
  1570     01AE  09A6               	comf	___awdiv@quotient,f
  1571     01AF  09A7               	comf	___awdiv@quotient+1,f
  1572     01B0  0AA6               	incf	___awdiv@quotient,f
  1573     01B1  1903               	skipnz
  1574     01B2  0AA7               	incf	___awdiv@quotient+1,f
  1575     01B3                     l954:
  1576     01B3  0827               	movf	___awdiv@quotient+1,w
  1577     01B4  00A1               	movwf	?___awdiv+1
  1578     01B5  0826               	movf	___awdiv@quotient,w
  1579     01B6  00A0               	movwf	?___awdiv
  1580     01B7                     l389:
  1581     01B7  0008               	return
  1582     01B8                     __end_of___awdiv:
  1583                           
  1584                           	psect	text6
  1585     00D7                     __ptext6:	
  1586 ;; *************** function _pic_init *****************
  1587 ;; Defined at:
  1588 ;;		line 51 in file "src/main.c"
  1589 ;; Parameters:    Size  Location     Type
  1590 ;;		None
  1591 ;; Auto vars:     Size  Location     Type
  1592 ;;  adc_config      7   12[BANK0 ] struct .
  1593 ;;  int_config      6   19[BANK0 ] struct .
  1594 ;;  osc_config      3   25[BANK0 ] struct .
  1595 ;; Return value:  Size  Location     Type
  1596 ;;                  1    wreg      void 
  1597 ;; Registers used:
  1598 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1599 ;; Tracked objects:
  1600 ;;		On entry : 0/0
  1601 ;;		On exit  : 0/0
  1602 ;;		Unchanged: 0/0
  1603 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1604 ;;      Params:         0       0       0       0       0
  1605 ;;      Locals:         0      16       0       0       0
  1606 ;;      Temps:          0       4       0       0       0
  1607 ;;      Totals:         0      20       0       0       0
  1608 ;;Total ram usage:       20 bytes
  1609 ;; Hardware stack levels used: 1
  1610 ;; Hardware stack levels required when called: 3
  1611 ;; This function calls:
  1612 ;;		_init_adc
  1613 ;;		_init_gpio
  1614 ;;		_init_int
  1615 ;;		_init_osc
  1616 ;; This function is called by:
  1617 ;;		_main
  1618 ;; This function uses a non-reentrant model
  1619 ;;
  1620                           
  1621     00D7                     _pic_init:	
  1622                           ;psect for function _pic_init
  1623                           
  1624     00D7                     l1018:	
  1625                           ;incstack = 0
  1626                           ; Regs used in _pic_init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1627                           
  1628                           
  1629                           ;src/main.c: 52:   ADCConfig adc_config = { ADC_ON, ADC_RIGHT, ADC_AN07, ADC_FOSC02,
  1630     00D7  302C               	movlw	pic_init@adc_config& (0+255)
  1631     00D8  0084               	movwf	4
  1632     00D9  3043               	movlw	low pic_init@F1593
  1633     00DA  1283               	bcf	3,5	;RP0=0, select bank0
  1634     00DB  1303               	bcf	3,6	;RP1=0, select bank0
  1635     00DC  00A8               	movwf	??_pic_init
  1636     00DD  0804               	movf	4,w
  1637     00DE  00A9               	movwf	??_pic_init+1
  1638     00DF  3007               	movlw	7
  1639     00E0  00AA               	movwf	??_pic_init+2
  1640     00E1                     u630:
  1641     00E1  0828               	movf	??_pic_init,w
  1642     00E2  0084               	movwf	4
  1643     00E3  1383               	bcf	3,7	;select IRP bank0
  1644     00E4  0800               	movf	0,w
  1645     00E5  00AB               	movwf	??_pic_init+3
  1646     00E6  0AA8               	incf	??_pic_init,f
  1647     00E7  0829               	movf	??_pic_init+1,w
  1648     00E8  0084               	movwf	4
  1649     00E9  082B               	movf	??_pic_init+3,w
  1650     00EA  0080               	movwf	0
  1651     00EB  0AA9               	incf	??_pic_init+1,f
  1652     00EC  0BAA               	decfsz	??_pic_init+2,f
  1653     00ED  28E1               	goto	u630
  1654     00EE                     l1020:
  1655                           
  1656                           ;src/main.c: 54:   OscillatorConfig osc_config = { INTERNAL_CLK, KHZ500, INTERNAL_FOSC }
      +                          ;
  1657     00EE  0850               	movf	pic_init@F1595,w
  1658     00EF  00B9               	movwf	pic_init@osc_config
  1659     00F0  0851               	movf	pic_init@F1595+1,w
  1660     00F1  00BA               	movwf	pic_init@osc_config+1
  1661     00F2  0852               	movf	pic_init@F1595+2,w
  1662     00F3  00BB               	movwf	pic_init@osc_config+2
  1663     00F4                     l1022:
  1664                           
  1665                           ;src/main.c: 55:   InterruptConfig int_config = { GIE_ENABLED, EINT_DISABLED, PEIE_DISAB
      +                          LED,
  1666     00F4  3033               	movlw	pic_init@int_config& (0+255)
  1667     00F5  0084               	movwf	4
  1668     00F6  084A               	movf	pic_init@F1597,w
  1669     00F7  0080               	movwf	0
  1670     00F8  0A84               	incf	4,f
  1671     00F9  084B               	movf	pic_init@F1597+1,w
  1672     00FA  0080               	movwf	0
  1673     00FB  0A84               	incf	4,f
  1674     00FC  084C               	movf	pic_init@F1597+2,w
  1675     00FD  0080               	movwf	0
  1676     00FE  0A84               	incf	4,f
  1677     00FF  084D               	movf	pic_init@F1597+3,w
  1678     0100  0080               	movwf	0
  1679     0101  0A84               	incf	4,f
  1680     0102  084E               	movf	pic_init@F1597+4,w
  1681     0103  0080               	movwf	0
  1682     0104  0A84               	incf	4,f
  1683     0105  084F               	movf	pic_init@F1597+5,w
  1684     0106  0080               	movwf	0
  1685     0107                     l1024:
  1686                           
  1687                           ;src/main.c: 66:   init_osc(osc_config);
  1688     0107  0839               	movf	pic_init@osc_config,w
  1689     0108  00A0               	movwf	init_osc@config
  1690     0109  083A               	movf	pic_init@osc_config+1,w
  1691     010A  00A1               	movwf	init_osc@config+1
  1692     010B  083B               	movf	pic_init@osc_config+2,w
  1693     010C  00A2               	movwf	init_osc@config+2
  1694     010D  120A  118A  22CE  120A  118A  	fcall	_init_osc
  1695     0112                     l1026:
  1696                           
  1697                           ;src/main.c: 67:   init_int(int_config);
  1698     0112  3020               	movlw	init_int@config& (0+255)
  1699     0113  0084               	movwf	4
  1700     0114  1283               	bcf	3,5	;RP0=0, select bank0
  1701     0115  1303               	bcf	3,6	;RP1=0, select bank0
  1702     0116  0833               	movf	pic_init@int_config,w
  1703     0117  1383               	bcf	3,7	;select IRP bank0
  1704     0118  0080               	movwf	0
  1705     0119  0A84               	incf	4,f
  1706     011A  0834               	movf	pic_init@int_config+1,w
  1707     011B  0080               	movwf	0
  1708     011C  0A84               	incf	4,f
  1709     011D  0835               	movf	pic_init@int_config+2,w
  1710     011E  0080               	movwf	0
  1711     011F  0A84               	incf	4,f
  1712     0120  0836               	movf	pic_init@int_config+3,w
  1713     0121  0080               	movwf	0
  1714     0122  0A84               	incf	4,f
  1715     0123  0837               	movf	pic_init@int_config+4,w
  1716     0124  0080               	movwf	0
  1717     0125  0A84               	incf	4,f
  1718     0126  0838               	movf	pic_init@int_config+5,w
  1719     0127  0080               	movwf	0
  1720     0128  120A  118A  2296  120A  118A  	fcall	_init_int
  1721     012D                     l1028:
  1722                           
  1723                           ;src/main.c: 68:   init_adc(adc_config);
  1724     012D  3020               	movlw	init_adc@config& (0+255)
  1725     012E  0084               	movwf	4
  1726     012F  302C               	movlw	low pic_init@adc_config
  1727     0130  1283               	bcf	3,5	;RP0=0, select bank0
  1728     0131  1303               	bcf	3,6	;RP1=0, select bank0
  1729     0132  00A8               	movwf	??_pic_init
  1730     0133  0804               	movf	4,w
  1731     0134  00A9               	movwf	??_pic_init+1
  1732     0135  3007               	movlw	7
  1733     0136  00AA               	movwf	??_pic_init+2
  1734     0137                     u640:
  1735     0137  0828               	movf	??_pic_init,w
  1736     0138  0084               	movwf	4
  1737     0139  1383               	bcf	3,7	;select IRP bank0
  1738     013A  0800               	movf	0,w
  1739     013B  00AB               	movwf	??_pic_init+3
  1740     013C  0AA8               	incf	??_pic_init,f
  1741     013D  0829               	movf	??_pic_init+1,w
  1742     013E  0084               	movwf	4
  1743     013F  082B               	movf	??_pic_init+3,w
  1744     0140  0080               	movwf	0
  1745     0141  0AA9               	incf	??_pic_init+1,f
  1746     0142  0BAA               	decfsz	??_pic_init+2,f
  1747     0143  2937               	goto	u640
  1748     0144  120A  118A  225D  120A  118A  	fcall	_init_adc
  1749     0149                     l1030:
  1750                           
  1751                           ;src/main.c: 69:   init_gpio();
  1752     0149  120A  118A  237F  120A  118A  	fcall	_init_gpio
  1753     014E                     l105:
  1754     014E  0008               	return
  1755     014F                     __end_of_pic_init:
  1756                           
  1757                           	psect	text7
  1758     02CE                     __ptext7:	
  1759 ;; *************** function _init_osc *****************
  1760 ;; Defined at:
  1761 ;;		line 48 in file "src/initialisation.c"
  1762 ;; Parameters:    Size  Location     Type
  1763 ;;  config          3    0[BANK0 ] struct .
  1764 ;; Auto vars:     Size  Location     Type
  1765 ;;		None
  1766 ;; Return value:  Size  Location     Type
  1767 ;;                  1    wreg      void 
  1768 ;; Registers used:
  1769 ;;		wreg, status,2, status,0
  1770 ;; Tracked objects:
  1771 ;;		On entry : 0/0
  1772 ;;		On exit  : 0/0
  1773 ;;		Unchanged: 0/0
  1774 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1775 ;;      Params:         0       3       0       0       0
  1776 ;;      Locals:         0       0       0       0       0
  1777 ;;      Temps:          0       1       0       0       0
  1778 ;;      Totals:         0       4       0       0       0
  1779 ;;Total ram usage:        4 bytes
  1780 ;; Hardware stack levels used: 1
  1781 ;; Hardware stack levels required when called: 2
  1782 ;; This function calls:
  1783 ;;		Nothing
  1784 ;; This function is called by:
  1785 ;;		_pic_init
  1786 ;; This function uses a non-reentrant model
  1787 ;;
  1788                           
  1789     02CE                     _init_osc:	
  1790                           ;psect for function _init_osc
  1791                           
  1792     02CE                     l958:	
  1793                           ;incstack = 0
  1794                           ; Regs used in _init_osc: [wreg+status,2+status,0]
  1795                           
  1796                           
  1797                           ;src/initialisation.c: 50:   OSCCONbits.SCS = config.SCS;
  1798     02CE  1283               	bcf	3,5	;RP0=0, select bank0
  1799     02CF  1303               	bcf	3,6	;RP1=0, select bank0
  1800     02D0  0C20               	rrf	init_osc@config,w
  1801     02D1  1683               	bsf	3,5	;RP0=1, select bank1
  1802     02D2  1303               	bcf	3,6	;RP1=0, select bank1
  1803     02D3  1C03               	skipc
  1804     02D4  100F               	bcf	15,0	;volatile
  1805     02D5  1803               	skipnc
  1806     02D6  140F               	bsf	15,0	;volatile
  1807     02D7                     l960:
  1808                           
  1809                           ;src/initialisation.c: 52:   OSCCONbits.IRCF = config.IRCF;
  1810     02D7  1283               	bcf	3,5	;RP0=0, select bank0
  1811     02D8  1303               	bcf	3,6	;RP1=0, select bank0
  1812     02D9  0821               	movf	init_osc@config+1,w
  1813     02DA  00A3               	movwf	??_init_osc
  1814     02DB  0EA3               	swapf	??_init_osc,f
  1815     02DC  1683               	bsf	3,5	;RP0=1, select bank1
  1816     02DD  1303               	bcf	3,6	;RP1=0, select bank1
  1817     02DE  080F               	movf	15,w	;volatile
  1818     02DF  1283               	bcf	3,5	;RP0=0, select bank0
  1819     02E0  1303               	bcf	3,6	;RP1=0, select bank0
  1820     02E1  0623               	xorwf	??_init_osc,w
  1821     02E2  398F               	andlw	-113
  1822     02E3  0623               	xorwf	??_init_osc,w
  1823     02E4  1683               	bsf	3,5	;RP0=1, select bank1
  1824     02E5  1303               	bcf	3,6	;RP1=0, select bank1
  1825     02E6  008F               	movwf	15	;volatile
  1826     02E7                     l962:
  1827                           
  1828                           ;src/initialisation.c: 54:   OSCCONbits.OSTS = config.OSTS;
  1829     02E7  1283               	bcf	3,5	;RP0=0, select bank0
  1830     02E8  1303               	bcf	3,6	;RP1=0, select bank0
  1831     02E9  0C22               	rrf	init_osc@config+2,w
  1832     02EA  1683               	bsf	3,5	;RP0=1, select bank1
  1833     02EB  1303               	bcf	3,6	;RP1=0, select bank1
  1834     02EC  1C03               	skipc
  1835     02ED  118F               	bcf	15,3	;volatile
  1836     02EE  1803               	skipnc
  1837     02EF  158F               	bsf	15,3	;volatile
  1838                           
  1839                           ;src/initialisation.c: 57:   if (OSCCONbits.IRCF == KHZ032) {
  1840     02F0  0E0F               	swapf	15,w	;volatile
  1841     02F1  3907               	andlw	7
  1842     02F2  3A00               	xorlw	0
  1843     02F3  1D03               	skipz
  1844     02F4  2AF6               	goto	u551
  1845     02F5  2AF7               	goto	u550
  1846     02F6                     u551:
  1847     02F6  2AFC               	goto	l27
  1848     02F7                     u550:
  1849     02F7                     l23:
  1850     02F7  1C8F               	btfss	15,1	;volatile
  1851     02F8  2AFA               	goto	u561
  1852     02F9  2AFB               	goto	u560
  1853     02FA                     u561:
  1854     02FA  2AF7               	goto	l23
  1855     02FB                     u560:
  1856     02FB  2B00               	goto	l30
  1857     02FC                     l27:
  1858     02FC  1D0F               	btfss	15,2	;volatile
  1859     02FD  2AFF               	goto	u571
  1860     02FE  2B00               	goto	u570
  1861     02FF                     u571:
  1862     02FF  2AFC               	goto	l27
  1863     0300                     u570:
  1864     0300                     l30:
  1865     0300  0008               	return
  1866     0301                     __end_of_init_osc:
  1867                           
  1868                           	psect	text8
  1869     0296                     __ptext8:	
  1870 ;; *************** function _init_int *****************
  1871 ;; Defined at:
  1872 ;;		line 75 in file "src/initialisation.c"
  1873 ;; Parameters:    Size  Location     Type
  1874 ;;  config          6    0[BANK0 ] struct .
  1875 ;; Auto vars:     Size  Location     Type
  1876 ;;		None
  1877 ;; Return value:  Size  Location     Type
  1878 ;;                  1    wreg      void 
  1879 ;; Registers used:
  1880 ;;		wreg, status,0
  1881 ;; Tracked objects:
  1882 ;;		On entry : 0/0
  1883 ;;		On exit  : 0/0
  1884 ;;		Unchanged: 0/0
  1885 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1886 ;;      Params:         0       6       0       0       0
  1887 ;;      Locals:         0       0       0       0       0
  1888 ;;      Temps:          0       0       0       0       0
  1889 ;;      Totals:         0       6       0       0       0
  1890 ;;Total ram usage:        6 bytes
  1891 ;; Hardware stack levels used: 1
  1892 ;; Hardware stack levels required when called: 2
  1893 ;; This function calls:
  1894 ;;		Nothing
  1895 ;; This function is called by:
  1896 ;;		_pic_init
  1897 ;; This function uses a non-reentrant model
  1898 ;;
  1899                           
  1900     0296                     _init_int:	
  1901                           ;psect for function _init_int
  1902                           
  1903     0296                     l966:	
  1904                           ;incstack = 0
  1905                           ; Regs used in _init_int: [wreg+status,0]
  1906                           
  1907                           
  1908                           ;src/initialisation.c: 77:   INTCONbits.GIE = config.GIE;
  1909     0296  1283               	bcf	3,5	;RP0=0, select bank0
  1910     0297  1303               	bcf	3,6	;RP1=0, select bank0
  1911     0298  0C20               	rrf	init_int@config,w
  1912     0299  1C03               	skipc
  1913     029A  138B               	bcf	11,7	;volatile
  1914     029B  1803               	skipnc
  1915     029C  178B               	bsf	11,7	;volatile
  1916                           
  1917                           ;src/initialisation.c: 79:   INTCONbits.INTE = config.EINT;
  1918     029D  0C21               	rrf	init_int@config+1,w
  1919     029E  1C03               	skipc
  1920     029F  120B               	bcf	11,4	;volatile
  1921     02A0  1803               	skipnc
  1922     02A1  160B               	bsf	11,4	;volatile
  1923                           
  1924                           ;src/initialisation.c: 82:   INTCONbits.PEIE = config.PEIE;
  1925     02A2  0C22               	rrf	init_int@config+2,w
  1926     02A3  1C03               	skipc
  1927     02A4  130B               	bcf	11,6	;volatile
  1928     02A5  1803               	skipnc
  1929     02A6  170B               	bsf	11,6	;volatile
  1930                           
  1931                           ;src/initialisation.c: 84:   INTCONbits.T0IE = config.T0IE;
  1932     02A7  0C23               	rrf	init_int@config+3,w
  1933     02A8  1C03               	skipc
  1934     02A9  128B               	bcf	11,5	;volatile
  1935     02AA  1803               	skipnc
  1936     02AB  168B               	bsf	11,5	;volatile
  1937                           
  1938                           ;src/initialisation.c: 87:   INTCONbits.RBIE = config.RBIE;
  1939     02AC  0C24               	rrf	init_int@config+4,w
  1940     02AD  1C03               	skipc
  1941     02AE  118B               	bcf	11,3	;volatile
  1942     02AF  1803               	skipnc
  1943     02B0  158B               	bsf	11,3	;volatile
  1944     02B1                     l968:
  1945                           
  1946                           ;src/initialisation.c: 90:   IOCBbits.IOCB4 = 1;
  1947     02B1  1683               	bsf	3,5	;RP0=1, select bank1
  1948     02B2  1303               	bcf	3,6	;RP1=0, select bank1
  1949     02B3  1616               	bsf	22,4	;volatile
  1950     02B4                     l970:
  1951                           
  1952                           ;src/initialisation.c: 91:   IOCBbits.IOCB5 = 1;
  1953     02B4  1696               	bsf	22,5	;volatile
  1954                           
  1955                           ;src/initialisation.c: 94:   OPTION_REGbits.INTEDG = config.INTEDG;
  1956     02B5  1283               	bcf	3,5	;RP0=0, select bank0
  1957     02B6  1303               	bcf	3,6	;RP1=0, select bank0
  1958     02B7  0C25               	rrf	init_int@config+5,w
  1959     02B8  1683               	bsf	3,5	;RP0=1, select bank1
  1960     02B9  1303               	bcf	3,6	;RP1=0, select bank1
  1961     02BA  1C03               	skipc
  1962     02BB  1301               	bcf	1,6	;volatile
  1963     02BC  1803               	skipnc
  1964     02BD  1701               	bsf	1,6	;volatile
  1965     02BE                     l972:
  1966                           
  1967                           ;src/initialisation.c: 97:   if (INTCONbits.INTE == EINT_ENABLED) {
  1968     02BE  1E0B               	btfss	11,4	;volatile
  1969     02BF  2AC1               	goto	u581
  1970     02C0  2AC2               	goto	u580
  1971     02C1                     u581:
  1972     02C1  2AC3               	goto	l33
  1973     02C2                     u580:
  1974     02C2                     l974:
  1975                           
  1976                           ;src/initialisation.c: 98:     INTCONbits.INTF = INT_AWAITING;
  1977     02C2  108B               	bcf	11,1	;volatile
  1978     02C3                     l33:	
  1979                           ;src/initialisation.c: 99:   }
  1980                           
  1981                           
  1982                           ;src/initialisation.c: 100:   if (INTCONbits.RBIE == RBINT_ENABLED) {
  1983     02C3  1D8B               	btfss	11,3	;volatile
  1984     02C4  2AC6               	goto	u591
  1985     02C5  2AC7               	goto	u590
  1986     02C6                     u591:
  1987     02C6  2AC8               	goto	l34
  1988     02C7                     u590:
  1989     02C7                     l976:
  1990                           
  1991                           ;src/initialisation.c: 101:     INTCONbits.RBIF = INT_AWAITING;
  1992     02C7  100B               	bcf	11,0	;volatile
  1993     02C8                     l34:	
  1994                           ;src/initialisation.c: 102:   }
  1995                           
  1996                           
  1997                           ;src/initialisation.c: 103:   if (INTCONbits.T0IE == T0INT_ENABLED) {
  1998     02C8  1E8B               	btfss	11,5	;volatile
  1999     02C9  2ACB               	goto	u601
  2000     02CA  2ACC               	goto	u600
  2001     02CB                     u601:
  2002     02CB  2ACD               	goto	l36
  2003     02CC                     u600:
  2004     02CC                     l978:
  2005                           
  2006                           ;src/initialisation.c: 104:     INTCONbits.T0IF = INT_AWAITING;
  2007     02CC  110B               	bcf	11,2	;volatile
  2008     02CD                     l36:
  2009     02CD  0008               	return
  2010     02CE                     __end_of_init_int:
  2011                           
  2012                           	psect	text9
  2013     037F                     __ptext9:	
  2014 ;; *************** function _init_gpio *****************
  2015 ;; Defined at:
  2016 ;;		line 74 in file "src/main.c"
  2017 ;; Parameters:    Size  Location     Type
  2018 ;;		None
  2019 ;; Auto vars:     Size  Location     Type
  2020 ;;		None
  2021 ;; Return value:  Size  Location     Type
  2022 ;;                  1    wreg      void 
  2023 ;; Registers used:
  2024 ;;		wreg, status,2
  2025 ;; Tracked objects:
  2026 ;;		On entry : 0/0
  2027 ;;		On exit  : 0/0
  2028 ;;		Unchanged: 0/0
  2029 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2030 ;;      Params:         0       0       0       0       0
  2031 ;;      Locals:         0       0       0       0       0
  2032 ;;      Temps:          0       0       0       0       0
  2033 ;;      Totals:         0       0       0       0       0
  2034 ;;Total ram usage:        0 bytes
  2035 ;; Hardware stack levels used: 1
  2036 ;; Hardware stack levels required when called: 2
  2037 ;; This function calls:
  2038 ;;		Nothing
  2039 ;; This function is called by:
  2040 ;;		_pic_init
  2041 ;; This function uses a non-reentrant model
  2042 ;;
  2043                           
  2044     037F                     _init_gpio:	
  2045                           ;psect for function _init_gpio
  2046                           
  2047     037F                     l1002:	
  2048                           ;incstack = 0
  2049                           ; Regs used in _init_gpio: [wreg+status,2]
  2050                           
  2051                           
  2052                           ;src/main.c: 76:   TRISA = OUTPUT;
  2053     037F  1683               	bsf	3,5	;RP0=1, select bank1
  2054     0380  1303               	bcf	3,6	;RP1=0, select bank1
  2055     0381  0185               	clrf	5	;volatile
  2056     0382                     l1004:
  2057                           
  2058                           ;src/main.c: 77:   PORTA = OFF;
  2059     0382  3001               	movlw	1
  2060     0383  1283               	bcf	3,5	;RP0=0, select bank0
  2061     0384  1303               	bcf	3,6	;RP1=0, select bank0
  2062     0385  0085               	movwf	5	;volatile
  2063     0386                     l1006:
  2064                           
  2065                           ;src/main.c: 79:   TRISBbits.TRISB4 = INPUT;
  2066     0386  1683               	bsf	3,5	;RP0=1, select bank1
  2067     0387  1303               	bcf	3,6	;RP1=0, select bank1
  2068     0388  1606               	bsf	6,4	;volatile
  2069     0389                     l1008:
  2070                           
  2071                           ;src/main.c: 80:   TRISBbits.TRISB5 = INPUT;
  2072     0389  1686               	bsf	6,5	;volatile
  2073     038A                     l1010:
  2074                           
  2075                           ;src/main.c: 82:   TRISEbits.TRISE2 = INPUT;
  2076     038A  1509               	bsf	9,2	;volatile
  2077     038B                     l1012:
  2078                           
  2079                           ;src/main.c: 84:   ANSEL = 0;
  2080     038B  1683               	bsf	3,5	;RP0=1, select bank3
  2081     038C  1703               	bsf	3,6	;RP1=1, select bank3
  2082     038D  0188               	clrf	8	;volatile
  2083     038E                     l1014:
  2084                           
  2085                           ;src/main.c: 85:   ANSELH = 0;
  2086     038E  0189               	clrf	9	;volatile
  2087     038F                     l1016:
  2088                           
  2089                           ;src/main.c: 86:   ANSELbits.ANS7 = 1;
  2090     038F  1788               	bsf	8,7	;volatile
  2091     0390                     l108:
  2092     0390  0008               	return
  2093     0391                     __end_of_init_gpio:
  2094                           
  2095                           	psect	text10
  2096     025D                     __ptext10:	
  2097 ;; *************** function _init_adc *****************
  2098 ;; Defined at:
  2099 ;;		line 119 in file "src/initialisation.c"
  2100 ;; Parameters:    Size  Location     Type
  2101 ;;  config          7    0[BANK0 ] struct .
  2102 ;; Auto vars:     Size  Location     Type
  2103 ;;		None
  2104 ;; Return value:  Size  Location     Type
  2105 ;;                  1    wreg      void 
  2106 ;; Registers used:
  2107 ;;		wreg, status,2, status,0
  2108 ;; Tracked objects:
  2109 ;;		On entry : 0/0
  2110 ;;		On exit  : 0/0
  2111 ;;		Unchanged: 0/0
  2112 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2113 ;;      Params:         0       7       0       0       0
  2114 ;;      Locals:         0       0       0       0       0
  2115 ;;      Temps:          0       1       0       0       0
  2116 ;;      Totals:         0       8       0       0       0
  2117 ;;Total ram usage:        8 bytes
  2118 ;; Hardware stack levels used: 1
  2119 ;; Hardware stack levels required when called: 2
  2120 ;; This function calls:
  2121 ;;		Nothing
  2122 ;; This function is called by:
  2123 ;;		_pic_init
  2124 ;; This function uses a non-reentrant model
  2125 ;;
  2126                           
  2127     025D                     _init_adc:	
  2128                           ;psect for function _init_adc
  2129                           
  2130     025D                     l980:	
  2131                           ;incstack = 0
  2132                           ; Regs used in _init_adc: [wreg+status,2+status,0]
  2133                           
  2134                           
  2135                           ;src/initialisation.c: 121:   ADCON0bits.ADON = config.ADON;
  2136     025D  1283               	bcf	3,5	;RP0=0, select bank0
  2137     025E  1303               	bcf	3,6	;RP1=0, select bank0
  2138     025F  0C20               	rrf	init_adc@config,w
  2139     0260  1C03               	skipc
  2140     0261  101F               	bcf	31,0	;volatile
  2141     0262  1803               	skipnc
  2142     0263  141F               	bsf	31,0	;volatile
  2143                           
  2144                           ;src/initialisation.c: 123:   ADCON0bits.GO_nDONE = config.GO_nDONE;
  2145     0264  0C26               	rrf	init_adc@config+6,w
  2146     0265  1C03               	skipc
  2147     0266  109F               	bcf	31,1	;volatile
  2148     0267  1803               	skipnc
  2149     0268  149F               	bsf	31,1	;volatile
  2150     0269                     l982:
  2151                           
  2152                           ;src/initialisation.c: 125:   ADCON0bits.CHS = config.CHS;
  2153     0269  0822               	movf	init_adc@config+2,w
  2154     026A  00A7               	movwf	??_init_adc
  2155     026B  0DA7               	rlf	??_init_adc,f
  2156     026C  0DA7               	rlf	??_init_adc,f
  2157     026D  081F               	movf	31,w	;volatile
  2158     026E  0627               	xorwf	??_init_adc,w
  2159     026F  39C3               	andlw	-61
  2160     0270  0627               	xorwf	??_init_adc,w
  2161     0271  009F               	movwf	31	;volatile
  2162     0272                     l984:
  2163                           
  2164                           ;src/initialisation.c: 127:   ADCON0bits.ADCS = config.ADCS;
  2165     0272  0823               	movf	init_adc@config+3,w
  2166     0273  00A7               	movwf	??_init_adc
  2167     0274  0EA7               	swapf	??_init_adc,f
  2168     0275  0DA7               	rlf	??_init_adc,f
  2169     0276  0DA7               	rlf	??_init_adc,f
  2170     0277  081F               	movf	31,w	;volatile
  2171     0278  0627               	xorwf	??_init_adc,w
  2172     0279  393F               	andlw	-193
  2173     027A  0627               	xorwf	??_init_adc,w
  2174     027B  009F               	movwf	31	;volatile
  2175                           
  2176                           ;src/initialisation.c: 130:   ADCON1bits.ADFM = config.ADFM;
  2177     027C  0C21               	rrf	init_adc@config+1,w
  2178     027D  1683               	bsf	3,5	;RP0=1, select bank1
  2179     027E  1303               	bcf	3,6	;RP1=0, select bank1
  2180     027F  1C03               	skipc
  2181     0280  139F               	bcf	31,7	;volatile
  2182     0281  1803               	skipnc
  2183     0282  179F               	bsf	31,7	;volatile
  2184                           
  2185                           ;src/initialisation.c: 132:   ADCON1bits.VCFG1 = config.VCFG1;
  2186     0283  1283               	bcf	3,5	;RP0=0, select bank0
  2187     0284  1303               	bcf	3,6	;RP1=0, select bank0
  2188     0285  0C25               	rrf	init_adc@config+5,w
  2189     0286  1683               	bsf	3,5	;RP0=1, select bank1
  2190     0287  1303               	bcf	3,6	;RP1=0, select bank1
  2191     0288  1C03               	skipc
  2192     0289  129F               	bcf	31,5	;volatile
  2193     028A  1803               	skipnc
  2194     028B  169F               	bsf	31,5	;volatile
  2195                           
  2196                           ;src/initialisation.c: 133:   ADCON1bits.VCFG0 = config.VCFG0;
  2197     028C  1283               	bcf	3,5	;RP0=0, select bank0
  2198     028D  1303               	bcf	3,6	;RP1=0, select bank0
  2199     028E  0C24               	rrf	init_adc@config+4,w
  2200     028F  1683               	bsf	3,5	;RP0=1, select bank1
  2201     0290  1303               	bcf	3,6	;RP1=0, select bank1
  2202     0291  1C03               	skipc
  2203     0292  121F               	bcf	31,4	;volatile
  2204     0293  1803               	skipnc
  2205     0294  161F               	bsf	31,4	;volatile
  2206     0295                     l39:
  2207     0295  0008               	return
  2208     0296                     __end_of_init_adc:
  2209                           
  2210                           	psect	text11
  2211     0301                     __ptext11:	
  2212 ;; *************** function _isr *****************
  2213 ;; Defined at:
  2214 ;;		line 90 in file "src/main.c"
  2215 ;; Parameters:    Size  Location     Type
  2216 ;;		None
  2217 ;; Auto vars:     Size  Location     Type
  2218 ;;		None
  2219 ;; Return value:  Size  Location     Type
  2220 ;;                  1    wreg      void 
  2221 ;; Registers used:
  2222 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2223 ;; Tracked objects:
  2224 ;;		On entry : 0/0
  2225 ;;		On exit  : 0/0
  2226 ;;		Unchanged: 0/0
  2227 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2228 ;;      Params:         0       0       0       0       0
  2229 ;;      Locals:         0       0       0       0       0
  2230 ;;      Temps:          5       0       0       0       0
  2231 ;;      Totals:         5       0       0       0       0
  2232 ;;Total ram usage:        5 bytes
  2233 ;; Hardware stack levels used: 1
  2234 ;; Hardware stack levels required when called: 1
  2235 ;; This function calls:
  2236 ;;		_parse_rotary
  2237 ;; This function is called by:
  2238 ;;		Interrupt level 1
  2239 ;; This function uses a non-reentrant model
  2240 ;;
  2241                           
  2242     0301                     _isr:	
  2243                           ;psect for function _isr
  2244                           
  2245     0301                     i1l1098:
  2246                           
  2247                           ;src/main.c: 91:   if (INTCONbits.RBIF == 1) {
  2248     0301  1C0B               	btfss	11,0	;volatile
  2249     0302  2B04               	goto	u79_21
  2250     0303  2B05               	goto	u79_20
  2251     0304                     u79_21:
  2252     0304  2B26               	goto	i1l114
  2253     0305                     u79_20:
  2254     0305                     i1l1100:
  2255                           
  2256                           ;src/main.c: 93:     parse_rotary(PORTBbits.RB4, PORTBbits.RB5, &count, 4, 0);
  2257     0305  3000               	movlw	0
  2258     0306  1283               	bcf	3,5	;RP0=0, select bank0
  2259     0307  1303               	bcf	3,6	;RP1=0, select bank0
  2260     0308  1A86               	btfsc	6,5	;volatile
  2261     0309  3001               	movlw	1
  2262     030A  00F0               	movwf	parse_rotary@pinB
  2263     030B  305B               	movlw	(low (_count| 0))& (0+255)
  2264     030C  00F1               	movwf	parse_rotary@counter
  2265     030D  3004               	movlw	4
  2266     030E  00F2               	movwf	parse_rotary@max
  2267     030F  01F3               	clrf	parse_rotary@min
  2268     0310  0E06               	swapf	6,w	;volatile
  2269     0311  3901               	andlw	1
  2270     0312  120A  118A  2214  120A  118A  	fcall	_parse_rotary
  2271     0317                     i1l1102:
  2272                           
  2273                           ;src/main.c: 94:     PORTA = (unsigned char) (~(1 << count));
  2274     0317  3001               	movlw	1
  2275     0318  00F7               	movwf	??_isr
  2276     0319  1283               	bcf	3,5	;RP0=0, select bank0
  2277     031A  1303               	bcf	3,6	;RP1=0, select bank0
  2278     031B  0A5B               	incf	_count,w
  2279     031C  2B1F               	goto	u80_24
  2280     031D                     u80_25:
  2281     031D  1003               	clrc
  2282     031E  0DF7               	rlf	??_isr,f
  2283     031F                     u80_24:
  2284     031F  3EFF               	addlw	-1
  2285     0320  1D03               	skipz
  2286     0321  2B1D               	goto	u80_25
  2287     0322  0877               	movf	??_isr,w
  2288     0323  3AFF               	xorlw	255
  2289     0324  0085               	movwf	5	;volatile
  2290     0325                     i1l1104:
  2291                           
  2292                           ;src/main.c: 97:     INTCONbits.RBIF = INT_AWAITING;
  2293     0325  100B               	bcf	11,0	;volatile
  2294     0326                     i1l114:
  2295     0326  087B               	movf	??_isr+4,w
  2296     0327  00FF               	movwf	btemp+1
  2297     0328  087A               	movf	??_isr+3,w
  2298     0329  008A               	movwf	10
  2299     032A  0879               	movf	??_isr+2,w
  2300     032B  0084               	movwf	4
  2301     032C  0E78               	swapf	??_isr+1,w
  2302     032D  0083               	movwf	3
  2303     032E  0EFE               	swapf	btemp,f
  2304     032F  0E7E               	swapf	btemp,w
  2305     0330  0009               	retfie
  2306     0331                     __end_of_isr:
  2307                           
  2308                           	psect	intentry
  2309     0004                     __pintentry:	
  2310                           ;incstack = 0
  2311                           ; Regs used in _isr: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2312                           
  2313     0004                     interrupt_function:
  2314     007E                     saved_w	set	btemp
  2315     0004  00FE               	movwf	btemp
  2316     0005  0E03               	swapf	3,w
  2317     0006  00F8               	movwf	??_isr+1
  2318     0007  0804               	movf	4,w
  2319     0008  00F9               	movwf	??_isr+2
  2320     0009  080A               	movf	10,w
  2321     000A  00FA               	movwf	??_isr+3
  2322     000B  087F               	movf	btemp+1,w
  2323     000C  00FB               	movwf	??_isr+4
  2324     000D  120A  118A  2B01   	ljmp	_isr
  2325                           
  2326                           	psect	text12
  2327     0214                     __ptext12:	
  2328 ;; *************** function _parse_rotary *****************
  2329 ;; Defined at:
  2330 ;;		line 7 in file "src/rotary_encoder.c"
  2331 ;; Parameters:    Size  Location     Type
  2332 ;;  pinA            1    wreg     unsigned char 
  2333 ;;  pinB            1    0[COMMON] unsigned char 
  2334 ;;  counter         1    1[COMMON] PTR unsigned char 
  2335 ;;		 -> count(1), 
  2336 ;;  max             1    2[COMMON] unsigned char 
  2337 ;;  min             1    3[COMMON] unsigned char 
  2338 ;; Auto vars:     Size  Location     Type
  2339 ;;  pinA            1    5[COMMON] unsigned char 
  2340 ;;  state           1    6[COMMON] unsigned char 
  2341 ;; Return value:  Size  Location     Type
  2342 ;;                  1    wreg      void 
  2343 ;; Registers used:
  2344 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  2345 ;; Tracked objects:
  2346 ;;		On entry : 0/0
  2347 ;;		On exit  : 0/0
  2348 ;;		Unchanged: 0/0
  2349 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2350 ;;      Params:         4       0       0       0       0
  2351 ;;      Locals:         2       0       0       0       0
  2352 ;;      Temps:          1       0       0       0       0
  2353 ;;      Totals:         7       0       0       0       0
  2354 ;;Total ram usage:        7 bytes
  2355 ;; Hardware stack levels used: 1
  2356 ;; This function calls:
  2357 ;;		Nothing
  2358 ;; This function is called by:
  2359 ;;		_isr
  2360 ;; This function uses a non-reentrant model
  2361 ;;
  2362                           
  2363     0214                     _parse_rotary:	
  2364                           ;psect for function _parse_rotary
  2365                           
  2366                           
  2367                           ;incstack = 0
  2368                           ; Regs used in _parse_rotary: [wreg-fsr0h+status,2+status,0+btemp+1]
  2369                           ;parse_rotary@pinA stored from wreg
  2370     0214  00F5               	movwf	parse_rotary@pinA
  2371     0215                     i1l1058:
  2372                           
  2373                           ;src/rotary_encoder.c: 9:   static unsigned char prevState;;src/rotary_encoder.c: 10:   
      +                          unsigned char state;;src/rotary_encoder.c: 13:   _delay((unsigned long)((1)*(500000/4000
      +                          .0)));
  2374     0215  3029               	movlw	41
  2375     0216  00F4               	movwf	??_parse_rotary
  2376     0217                     u83_27:
  2377     0217  0BF4               	decfsz	??_parse_rotary,f
  2378     0218  2A17               	goto	u83_27
  2379     0219  0000               	nop
  2380     021A                     i1l1060:
  2381                           
  2382                           ;src/rotary_encoder.c: 16:   state = (unsigned char)(pinB << 1 | pinA);
  2383     021A  0870               	movf	parse_rotary@pinB,w
  2384     021B  00F4               	movwf	??_parse_rotary
  2385     021C  0774               	addwf	??_parse_rotary,w
  2386     021D  0475               	iorwf	parse_rotary@pinA,w
  2387     021E  00F6               	movwf	parse_rotary@state
  2388     021F                     i1l1062:
  2389                           
  2390                           ;src/rotary_encoder.c: 19:   if (prevState == 0) {
  2391     021F  087C               	movf	parse_rotary@prevState,w
  2392     0220  1D03               	btfss	3,2
  2393     0221  2A23               	goto	u72_21
  2394     0222  2A24               	goto	u72_20
  2395     0223                     u72_21:
  2396     0223  2A3C               	goto	i1l1072
  2397     0224                     u72_20:
  2398     0224                     i1l1064:
  2399                           
  2400                           ;src/rotary_encoder.c: 20:     if (state == ROTATE_LEFT) (*counter)--;
  2401     0224  0376               	decf	parse_rotary@state,w
  2402     0225  1D03               	btfss	3,2
  2403     0226  2A28               	goto	u73_21
  2404     0227  2A29               	goto	u73_20
  2405     0228                     u73_21:
  2406     0228  2A2F               	goto	i1l1068
  2407     0229                     u73_20:
  2408     0229                     i1l1066:
  2409     0229  0871               	movf	parse_rotary@counter,w
  2410     022A  0084               	movwf	4
  2411     022B  3001               	movlw	1
  2412     022C  1383               	bcf	3,7	;select IRP bank0
  2413     022D  0280               	subwf	0,f
  2414     022E  2A3C               	goto	i1l1072
  2415     022F                     i1l1068:
  2416     022F  3002               	movlw	2
  2417     0230  0676               	xorwf	parse_rotary@state,w
  2418     0231  1D03               	btfss	3,2
  2419     0232  2A34               	goto	u74_21
  2420     0233  2A35               	goto	u74_20
  2421     0234                     u74_21:
  2422     0234  2A3C               	goto	i1l1072
  2423     0235                     u74_20:
  2424     0235                     i1l1070:
  2425     0235  3001               	movlw	1
  2426     0236  00FF               	movwf	btemp+1
  2427     0237  0871               	movf	parse_rotary@counter,w
  2428     0238  0084               	movwf	4
  2429     0239  087F               	movf	btemp+1,w
  2430     023A  1383               	bcf	3,7	;select IRP bank0
  2431     023B  0780               	addwf	0,f
  2432     023C                     i1l1072:
  2433                           
  2434                           ;src/rotary_encoder.c: 25:   if (*counter > max) *counter = min;
  2435     023C  0871               	movf	parse_rotary@counter,w
  2436     023D  0084               	movwf	4
  2437     023E  1383               	bcf	3,7	;select IRP bank0
  2438     023F  0800               	movf	0,w
  2439     0240  0272               	subwf	parse_rotary@max,w
  2440     0241  1803               	skipnc
  2441     0242  2A44               	goto	u75_21
  2442     0243  2A45               	goto	u75_20
  2443     0244                     u75_21:
  2444     0244  2A4A               	goto	i1l1076
  2445     0245                     u75_20:
  2446     0245                     i1l1074:
  2447     0245  0871               	movf	parse_rotary@counter,w
  2448     0246  0084               	movwf	4
  2449     0247  0873               	movf	parse_rotary@min,w
  2450     0248  0080               	movwf	0
  2451     0249  2A56               	goto	i1l1080
  2452     024A                     i1l1076:
  2453     024A  0871               	movf	parse_rotary@counter,w
  2454     024B  0084               	movwf	4
  2455     024C  0873               	movf	parse_rotary@min,w
  2456     024D  0200               	subwf	0,w
  2457     024E  1803               	skipnc
  2458     024F  2A51               	goto	u76_21
  2459     0250  2A52               	goto	u76_20
  2460     0251                     u76_21:
  2461     0251  2A56               	goto	i1l1080
  2462     0252                     u76_20:
  2463     0252                     i1l1078:
  2464     0252  0871               	movf	parse_rotary@counter,w
  2465     0253  0084               	movwf	4
  2466     0254  0872               	movf	parse_rotary@max,w
  2467     0255  0080               	movwf	0
  2468     0256                     i1l1080:
  2469                           
  2470                           ;src/rotary_encoder.c: 30:   prevState = state;
  2471     0256  0876               	movf	parse_rotary@state,w
  2472     0257  00FC               	movwf	parse_rotary@prevState
  2473     0258                     i1l1082:
  2474                           
  2475                           ;src/rotary_encoder.c: 31:   PORTB = PORTB;
  2476     0258  1283               	bcf	3,5	;RP0=0, select bank0
  2477     0259  1303               	bcf	3,6	;RP1=0, select bank0
  2478     025A  0806               	movf	6,w	;volatile
  2479     025B  0086               	movwf	6	;volatile
  2480     025C                     i1l130:
  2481     025C  0008               	return
  2482     025D                     __end_of_parse_rotary:
  2483     007E                     btemp	set	126	;btemp
  2484     007E                     wtemp0	set	126
  2485                           
  2486                           	psect	config
  2487                           
  2488                           ;Config register CONFIG1 @ 0x2007
  2489                           ;	Oscillator Selection bits
  2490                           ;	FOSC = INTRC_NOCLKOUT, INTOSCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O f
      +                          unction on RA7/OSC1/CLKIN
  2491                           ;	Watchdog Timer Enable bit
  2492                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  2493                           ;	Power-up Timer Enable bit
  2494                           ;	PWRTE = ON, PWRT enabled
  2495                           ;	RE3/MCLR pin function select bit
  2496                           ;	MCLRE = OFF, RE3/MCLR pin function is digital input, MCLR internally tied to VDD
  2497                           ;	Code Protection bit
  2498                           ;	CP = OFF, Program memory code protection is disabled
  2499                           ;	Data Code Protection bit
  2500                           ;	CPD = OFF, Data memory code protection is disabled
  2501                           ;	Brown Out Reset Selection bits
  2502                           ;	BOREN = ON, BOR enabled
  2503                           ;	Internal External Switchover bit
  2504                           ;	IESO = OFF, Internal/External Switchover mode is disabled
  2505                           ;	Fail-Safe Clock Monitor Enabled bit
  2506                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
  2507                           ;	Low Voltage Programming Enable bit
  2508                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
  2509                           ;	In-Circuit Debugger Mode bit
  2510                           ;	DEBUG = 0x1, unprogrammed default
  2511     2007                     	org	8199
  2512     2007  23C4               	dw	9156
  2513                           
  2514                           ;Config register CONFIG2 @ 0x2008
  2515                           ;	Brown-out Reset Selection bit
  2516                           ;	BOR4V = BOR40V, Brown-out Reset set to 4.0V
  2517                           ;	Flash Program Memory Self Write Enable bits
  2518                           ;	WRT = OFF, Write protection off
  2519     2008                     	org	8200
  2520     2008  3FFF               	dw	16383

Data Sizes:
    Strings     0
    Constant    0
    Data        16
    BSS         10
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      13
    BANK0            80     35      60
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    init_gpio2@config$ansel	PTR volatile unsigned char  size(1) Largest target is 0

    init_gpio2@config$lat	PTR volatile unsigned char  size(1) Largest target is 0

    init_gpio2@config$tris	PTR volatile unsigned char  size(1) Largest target is 0

    init_gpio2@size$ansel	PTR volatile unsigned char  size(1) Largest target is 0

    init_gpio2@size$lat	PTR volatile unsigned char  size(1) Largest target is 0

    init_gpio2@size$tris	PTR volatile unsigned char  size(1) Largest target is 0

    parse_rotary@counter	PTR unsigned char  size(1) Largest target is 1
		 -> count(BANK0[1]), 

    populate_step_array@array	PTR int  size(1) Largest target is 8
		 -> pic_loop@stepArray(BANK0[8]), 

    S28$ansel	PTR volatile unsigned char  size(1) Largest target is 0

    S28$lat	PTR volatile unsigned char  size(1) Largest target is 0

    S28$tris	PTR volatile unsigned char  size(1) Largest target is 0


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _isr->_parse_rotary

Critical Paths under _main in BANK0

    _main->_pic_loop
    _pic_loop->_populate_step_array
    _populate_step_array->___awdiv
    _pic_init->_init_adc

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    2019
                           _pic_init
                           _pic_loop
 ---------------------------------------------------------------------------------
 (1) _pic_loop                                            18    18      0    1357
                                             17 BANK0     18    18      0
                _populate_step_array
                 _read_potentiometer
 ---------------------------------------------------------------------------------
 (2) _read_potentiometer                                   4     2      2      23
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (2) _populate_step_array                                  9     5      4    1081
                                              8 BANK0      9     5      4
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     244
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     452
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _pic_init                                            20    20      0     662
                                              8 BANK0     20    20      0
                           _init_adc
                          _init_gpio
                           _init_int
                           _init_osc
 ---------------------------------------------------------------------------------
 (2) _init_osc                                             4     1      3     144
                                              0 BANK0      4     1      3
 ---------------------------------------------------------------------------------
 (2) _init_int                                             6     0      6     213
                                              0 BANK0      6     0      6
 ---------------------------------------------------------------------------------
 (2) _init_gpio                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_adc                                             8     1      7     236
                                              0 BANK0      8     1      7
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _isr                                                  5     5      0     635
                                              7 COMMON     5     5      0
                       _parse_rotary
 ---------------------------------------------------------------------------------
 (5) _parse_rotary                                         7     3      4     635
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _pic_init
     _init_adc
     _init_gpio
     _init_int
     _init_osc
   _pic_loop
     _populate_step_array
       ___awdiv
       ___wmul
     _read_potentiometer

 _isr (ROOT)
   _parse_rotary

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     23      3C       5       75.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      C       D       1       92.9%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      49      12        0.0%
ABS                  0      0      49       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Fri Nov 24 13:39:56 2023

              pic_init@F1593 0043                pic_init@F1595 0050                pic_init@F1597 004A  
                          pc 0002                           l30 0300                           l23 02F7  
                         l33 02C3                           l34 02C8                           l27 02FC  
                         l36 02CD                           l39 0295                           l82 03AB  
                         _GO 00F9                 ___awdiv@sign 0025                           fsr 0004  
        ___wmul@multiplicand 0022                          l105 014E                          l108 0390  
                        l150 036B                          l144 0213                          l147 035B  
                        l236 033F                          l238 0357                          l900 0331  
                        l389 01B7                          l910 0353                          l902 0335  
                        l920 015B                          l904 0339                          l930 016C  
                        l922 015D                          l914 014F                          l906 0346  
                        l940 0184                          l932 0172                          l924 0161  
                        l916 0152                          l908 034D                          l942 0195  
                        l934 0175                          l950 01A9                          l926 0166  
                        l918 0156                          l960 02D7                          l952 01AE  
                        l944 019B                          l936 017C                          l928 016A  
                        l970 02B4                          l962 02E7                          l954 01B3  
                        l946 019C                          l938 0180                          l980 025D  
                        l972 02BE                          l948 01A3                          l982 0269  
                        l974 02C2                          l966 0296                          l958 02CE  
                        l990 01D9                          l984 0272                          l976 02C7  
                        l968 02B1                          l992 01FF                          l978 02CC  
                        l994 0205                          l986 01BB                          l988 01D6  
                        l996 0358                          l998 035F                          u410 0339  
                        u411 0338                          u510 0195                          u511 0194  
                        u600 02CC                          u440 0353                          u601 02CB  
                        u505 0185                          u441 0352                          u425 0340  
                        u530 01A9                          u450 0156                          u610 0213  
                        u531 01A8                          u515 0191                          u451 0155  
                        u435 0347                          u611 0212                          u540 01AE  
                        u460 0161                          u620 035F                          u541 01AD  
                        u525 019D                          u461 0160                          u621 035E  
                        u550 02F7                          u630 00E1                          u470 0172  
                        u710 00D5                          u551 02F6                          u471 0171  
                        u615 020F                          u711 00D4                          u560 02FB  
                        u640 0137                          u704 00BA                          u561 02FA  
                        u705 00B8                          u570 0300                          u490 0184  
                        u650 0033                          u571 02FF                          u491 0183  
                        u715 00D1                          u580 02C2                          u660 004F  
                        u581 02C1                          u485 0176                          u661 004E  
                        u590 02C7                          u670 007F                          u591 02C6  
                        u671 007E                          u690 00B2                          u691 00B1  
                        u675 007B                          u684 0087                          u685 0085  
                        u695 00AE                          _isr 0301                          fsr0 0004  
                        indf 0000                pic_loop@F1588 0053                         l1010 038A  
                       l1002 037F                         l1012 038B                         l1004 0382  
                       l1020 00EE                         l1014 038E                         l1006 0386  
                       l1030 0149                         l1022 00F4                         l1016 038F  
                       l1008 0389                         l1024 0107                         l1040 005A  
                       l1032 002F                         l1026 0112                         l1018 00D7  
                       l1050 008F                         l1034 0038                         l1028 012D  
                       l1052 00B2                         l1036 0048                         l1054 00C0  
                       l1046 005C                         l1038 004F                         l1056 00C8  
                       l1048 007F                         l1094 03A1                         l1096 03A6  
                       ?_isr 0070                         _main 03A1                         btemp 007E  
                       start 0010            pic_loop@stepArray 0037                        ??_isr 0077  
                      ?_main 0070              __end_of___awdiv 01B8                        _ANSEL 0188  
            ___awdiv@divisor 0020              parse_rotary@max 0072              parse_rotary@min 0073  
                      i1l130 025C                        i1l114 0326              ___awdiv@counter 0024  
                      _PORTA 0005                        _PORTB 0006                        u72_20 0224  
                      u72_21 0223                        u80_24 031F                        u80_25 031D  
                      u73_20 0229                        u73_21 0228                        _TRISA 0085  
                      u74_20 0235                        u74_21 0234                        u75_20 0245  
                      u75_21 0244                        u83_27 0217                        u76_20 0252  
                      u76_21 0251                        u79_20 0305                        u79_21 0304  
        _populate_step_array 01B8                        _count 005B                        pclath 000A  
                      status 0003                        wtemp0 007E     read_potentiometer@result 0022  
       ?_populate_step_array 0028               pic_loop@result 003F              __initialization 0013  
               __end_of_main 03AE                       ??_main 0043                       _ADRESH 001E  
                     _ADRESL 009E             ___awdiv@dividend 0022                       _ANSELH 0189  
                     i1l1100 0305                       i1l1102 0317             parse_rotary@pinA 0075  
                     i1l1104 0325             parse_rotary@pinB 0070                       i1l1060 021A  
                     i1l1070 0235                       i1l1062 021F                       i1l1080 0256  
                     i1l1064 0224                       i1l1072 023C                       i1l1082 0258  
                     i1l1074 0245                       i1l1066 0229                       i1l1058 0215  
                     i1l1076 024A                       i1l1068 022F                       i1l1078 0252  
                     i1l1098 0301        ??_populate_step_array 002C                       ___wmul 0331  
                  ??___awdiv 0024             __end_of_init_adc 0296             __end_of_init_int 02CE  
           __end_of_init_osc 0301             ___awdiv@quotient 0026             __end_of_pic_init 014F  
           __end_of_pic_loop 00D7                       saved_w 007E      __end_of__initialization 002B  
   populate_step_array@array 0030               __pcstackCOMMON 0070                 __pidataBANK0 0391  
              ?_parse_rotary 0070               _OPTION_REGbits 0081                   __pbssBANK0 0053  
                 __pmaintext 03A1                      ?___wmul 0020                   __pintentry 0004  
             ??_parse_rotary 0074            parse_rotary@state 0076                    ?_init_adc 0020  
                  ?_init_int 0020                    ?_init_osc 0020                    ?_pic_init 0070  
                  ?_pic_loop 0070   __end_of_read_potentiometer 036C                      ___awdiv 014F  
                  _ANSELbits 0188                      __ptext1 002F                      __ptext2 0358  
                    __ptext3 01B8                      __ptext4 0331                      __ptext5 014F  
                    __ptext6 00D7                      __ptext7 02CE                      __ptext8 0296  
                    __ptext9 037F            __end_of_init_gpio 0391          parse_rotary@counter 0071  
       end_of_initialization 002B                   ??_init_adc 0027                   ??_init_int 0026  
                 ??_init_osc 0023                   ??_pic_init 0028                   ??_pic_loop 0031  
                  _PORTBbits 0006                    _TRISBbits 0086                    _TRISEbits 0089  
__end_of_populate_step_array 0214         __end_of_parse_rotary 025D               __end_of___wmul 0358  
        start_initialization 0013                  __end_of_isr 0331                     ??___wmul 0024  
                 init_fetch0 036C               init_adc@config 0020                  __pdataBANK0 0043  
populate_step_array@potLimit 002A                  __pbssCOMMON 007C                    ___latbits 0002  
    populate_step_array@size 0028                __pcstackBANK0 0020                     ?___awdiv 0020  
         pic_init@adc_config 002C           _read_potentiometer 0358                    _init_gpio 037F  
        ?_read_potentiometer 0020            interrupt_function 0004               ___wmul@product 0024  
                   _IOCBbits 0096         ??_read_potentiometer 0022                 _parse_rotary 0214  
                 _ADCON0bits 001F                   _ADCON1bits 009F            ___wmul@multiplier 0020  
             init_int@config 0020                   ?_init_gpio 0070        parse_rotary@prevState 007C  
             init_osc@config 0020                    pic_loop@i 0041           pic_init@int_config 0033  
                   __ptext10 025D                     __ptext11 0301                     __ptext12 0214  
                   _init_adc 025D                     _init_int 0296                     _init_osc 02CE  
                   _pic_init 00D7                     _pic_loop 002F           pic_init@osc_config 0039  
                 _INTCONbits 000B                     init_ram0 0370                  ??_init_gpio 0020  
                   intlevel1 0000                   _OSCCONbits 008F         populate_step_array@i 002E  
